# This is a template for the "aminer" logfile miner tool. Copy
# it to "config.py" and define your ruleset.

configProperties={}

# Define the list of log files to read from: the files named here
# do not need to exist when aminer is started. This will just
# result in a warning. However if they exist, they have to be
# readable by the aminer process!
configProperties['LogFileList']=['/var/log/auth.log', '/var/log/syslog']

# Define the uid/gid of the process that runs the calculation
# after opening the log files:
configProperties['AMinerUser']='aminer'
configProperties['AMinerGroup']='aminer'

# Read the analyis from this file. That part of configuration
# is separated from the main configuration so that it can be loaded
# only within the analysis child. Non-absolute path names are
# interpreted relatively to the main configuration file (this
# file). Defaults to "analysis.py".
# configProperties['AnalysisConfigFile']='analysis.py'

# Read and store information to be used between multiple invocations
# of AMiner in this directory. The directory must only be accessible
# to the 'AMinerUser' but not group/world readable. On violation,
# AMiner will refuse to start. When undefined, '/var/lib/aminer'
# is used.
# configProperties['Core.PersistenceDir']='/var/lib/aminer'

# Define a target e-mail address to send alerts to. When undefined,
# no e-mail notification hooks are added.
configProperties['MailAlerting.TargetAddress']='root@localhost'
# Sender address of e-mail alerts. When undefined, "sendmail"
# implementation on host will decide, which sender address should
# be used.
# configProperties['MailAlerting.FromAddress']='root@localhost'
# Define, which text should be prepended to the standard aminer
# subject. Defaults to "AMiner Alerts:"
# configProperties['MailAlerting.SubjectPrefix']='AMiner Alerts:'
# Define a grace time after startup before aminer will react to
# an event and send the first alert e-mail. Defaults to 0 (any
# event can immediately trigger alerting).
# configProperties['MailAlerting.AlertGraceTime']=0
# Define how many seconds to wait after a first event triggered
# the alerting procedure before really sending out the e-mail.
# In that timespan, events are collected and will be sent all
# using a single e-mail. Defaults to 10 seconds.
# configProperties['MailAlerting.EventCollectTime']=10
# Define the minimum time between two alert e-mails in seconds
# to avoid spamming. All events during this timespan are collected
# and sent out with the next report. Defaults to 600 seconds.
# configProperties['MailAlerting.MinAlertGap']=600
# Define the maximum time between two alert e-mails in seconds.
# When undefined this defaults to "MailAlerting.MinAlertGap".
# Otherwise this will activate an exponential backoff to reduce
# messages during permanent error states by increasing the alert
# gap by 50% when more alert-worthy events were recorded while
# the previous gap time was not yet elapsed.
# configProperties['MailAlerting.MaxAlertGap']=600
# Define how many events should be included in one alert mail
# at most. This defaults to 1000
# configProperties['MailAlerting.MaxEventsPerMessage']=1000


# Add your ruleset here:

# Define the pipeline for parsing the log data:
def buildAnalysisPipeline(aminerConfig):
# Build the parsing model first
  from aminer.parsing import FirstMatchModelElement
  from aminer.parsing import SequenceModelElement

  serviceChildren=[]

# import AudispdParsingModel
# serviceChildren.append(AudispdParsingModel.getModel())

# import CronParsingModel
# serviceChildren.append(CronParsingModel.getModel())

# import EximParsingModel
# serviceChildren.append(EximParsingModel.getModel())

# import RsyslogParsingModel
# serviceChildren.append(RsyslogParsingModel.getModel())

# import SshdParsingModel
# serviceChildren.append(SshdParsingModel.getModel())

# import SuSessionParsingModel
# serviceChildren.append(SuSessionParsingModel.getModel())

# import UlogdParsingModel
# serviceChildren.append(UlogdParsingModel.getModel())

  from aminer.parsing import ConfigSyslogPreambleModel
  syslogPreambleModel=ConfigSyslogPreambleModel.getModel()

  parsingModel=SequenceModelElement.SequenceModelElement('model', [
      syslogPreambleModel,
      FirstMatchModelElement.FirstMatchModelElement('services', serviceChildren)])


# Create all global handler lists here and append the real handlers
# later on.
# List for raw (unprocessed) log data atoms.
  rawAtomHandlers=[]
  parsedAtomHandlers=[]
  unparsedAtomHandlers=[]
  anomalyEventHandlers=[]
  timeTriggeredHandlers=[]

  from aminer.parsing import SimpleParsingModelRawAtomHandler
  rawAtomHandlers.append(SimpleParsingModelRawAtomHandler.SimpleParsingModelRawAtomHandler(parsingModel, parsedAtomHandlers, unparsedAtomHandlers))

  from aminer.events import SimpleUnparsedAtomHandler
  unparsedAtomHandlers.append(SimpleUnparsedAtomHandler.SimpleUnparsedAtomHandler(anomalyEventHandlers))

  from aminer.analysis import NewMatchPathDetector
  newMatchPathDetector=NewMatchPathDetector.NewMatchPathDetector(aminerConfig, anomalyEventHandlers, autoIncludeFlag=True)
  parsedAtomHandlers.append(newMatchPathDetector)
  timeTriggeredHandlers.append(newMatchPathDetector)

# Include the e-mail notification handler only if the configuration
# parameter was set.
  from aminer.events import DefaultMailNotificationEventHandler
  if aminerConfig.configProperties.has_key(DefaultMailNotificationEventHandler.configKeyMailAlertingTargetAddress):
    mailNotificationHandler=DefaultMailNotificationEventHandler.DefaultMailNotificationEventHandler(aminerConfig)
    anomalyEventHandlers.append(mailNotificationHandler)
    timeTriggeredHandlers.append(mailNotificationHandler)

# Add stdout stream printing for debugging, tuning.
# from aminer.events import StreamPrinterEventHandler
# anomalyEventHandlers.append(StreamPrinterEventHandler.StreamPrinterEventHandler(aminerConfig))

  return((rawAtomHandlers, timeTriggeredHandlers))
