"""This module defines a detector for variable type."""
import numpy as np
import matplotlib.pyplot as plt
import copy
from scipy.stats import kstest, ks_2samp, norm, multinomial
from scipy.stats import chisquare  # Only needed if the chisquare test is used (self.options['usedMultinomialTest'] == 'Chi')
import os

from aminer import AMinerConfig
from aminer.AnalysisChild import AnalysisContext
from aminer.events import EventSourceInterface
from aminer.input import AtomHandlerInterface
from aminer.util import TimeTriggeredComponentInterface
from aminer.util import PersistencyUtil


class VariableTypeDetector(AtomHandlerInterface, TimeTriggeredComponentInterface, EventSourceInterface):
    """This class tests each variable of the event_types for the implemented variable_types. This module needs to run after the
    EventTypeDetector is initialised"""

    def __init__(self, aminer_config, anomaly_event_handlers, event_type_detector, persistence_id='Default', options=None,
                 path_list=None):
        """Initialize the detector. This will also trigger reading or creation of persistence storage location."""
        # General options
        # Used to track the indicators and changed variable types
        self.print_statistics = True
        # Saves the plot of the indicator values in '/home/usr/tmp/VTDoutput'
        self.show_indi_plot = True
        # States if empiric distributions of the variables should be used
        self.use_empiric_distr = True

        if self.print_statistics or self.show_indi_plot:
            # List of the numbers of total parsed log lines, when an indicator failed. Only used for the statistics
            self.failed_indicators_total = []
            # List of the confidences of the indicators
            self.failed_indicators_values = []
            # List of the paths of the indicators
            self.failed_indicators_paths = []
            # List of the numbers of total parsed log lines, when a variable changed its type. Only used for the statistics
            self.changed_var_types = []

        self.next_persist_time = None
        self.anomaly_event_handlers = anomaly_event_handlers

        # List of paths, which variables are being tested for a type. All other paths will not get a type assigned. If None all paths are
        # being tested.
        self.path_list = path_list
        # Number of eventTypes
        self.num_events = 0
        # event_type_detector. Used to get the eventNumbers and values of the variables, etc.
        self.event_type_detector = event_type_detector
        # Add the varTypeDetector to the list of the modules, which use the event_type_detector.
        self.event_type_detector.add_following_modules(self)
        # List of the numbers of variables of the eventTypes
        self.length = []
        # Used to keep track of the indices of the variables if the path_list is not empty
        self.variable_path_num = []
        # List of the found vartypes
        self.var_type = []
        # Stores the possible varTypes of the variables
        self.possible_var_type = []
        # Stores the values the distribution, which are needed for the sKS
        self.distr_val = []
        # List of the successes of the binomialtest for the rejection in the sKS or variables of discrete type
        self.bt_results = []
        # List of the history of varTypes of the single variables. The lists to the variables take the following form
        self.var_type_history_list = []
        # Reference of a var_type_history_list, used for evaluation of the log-data
        self.var_type_history_list_reference = []
        # Order of the var_type_history_list [others, static, [discrete, number of appended steps], asc, desc , unique, EV of continuous
        # distributions]
        self.var_type_history_list_order = ['others', 'stat', 'd', 'asc', 'desc', 'unq', 'cont']
        # Number of minimal successes in the last sKS_BT_Num sKS-tests
        self.s_ksbt_min_success = 0
        # Number of minimal successes in the last d_BT_Num discrete-tests
        self.d_bt_min_success = 0
        # List of the distributions for which the sliding KS-test is implemented
        self.distr_list = ['nor', 'uni', 'spec', 'beta', 'betam', 'emp']
        # List of the numbers of log lines of this eventType, when an indicator failed
        self.failed_indicators = []
        # Stores the standardised values of all tested distributions for better performance. The list is hardcoded below
        self.distribution_data = {}
        # Stores the number of minimal successes for the BT with samplesize 20, 30, 50, 100, 200, 1000 and a probability of
        # 0.1, 0.05, 0.025. The list is hardcoded below
        self.bt_min_succ_data = {}

        # List of the options, which can else be given as inputs. Note that not the whole list of inputs have to be given as inputs, but
        # only the ones which are changed.
        self.options = {
            # 0.05 # significance niveau for p-value for the distribution test (normal KS-test)
            'KS_Alpha': 0.05,
            # significance niveau for p-value for the sliding KS-test
            'sKS_Alpha': 0.05,
            'sKS_BT_Alpha': 0.05,
            # significance niveau for the binomialtest of the testresults of the KS-test # Faster runtime for the values 0.1, 0.05, 0.025!!!
            'd_Alpha': 0.1,
            # significance niveau for the binomialtest of the single discrete variables # Faster runtime for the values 0.2, 0.1, 0.05!!!
            # significance niveau for the binomialtest of the testresults of the discrete variables
            'd_BT_Alpha': 0.1,
            'divThres': 0.3,
            # threshold for diversity of the values of a variable (the higher the more values have to be distinct to be considered to be
            # continuous distributed)
            'simThres': 0.1,
            # 0.5 # threshold for similarity of the values of a variable (the higher the more values have to be common to be considered
            # discrete)
            # threshold for the indicator
            'indicatorThres': 0.4,
            # 60, # Minimal number for trying to find the variableType
            'numMinAppearance': 100,
            'numUpdate': 50,
            # 20, # 60 # Number of values for which the variableType is updated # Faster runtime for the values 20, 30, 50, 100, 200, 1000!
            'numUpdateUnq': 200,
            # Number of values for which the values of type unq is unique (the last numUpdate+numUpdateUnq values are unique)
            # 30, # <= numMinAppearance, >= numUpdate # Number of values which are tested in the sKS-test
            'sKS_NumValues': 50,
            # Number of tested sKS-Tests in the binomial test
            'sKS_BT_Num': 30,
            'd_BT_Num': 30,
            # Number of tested discrete samples in the binomial test # Faster runtime for the values 20, 30, 50, 100, 200, 1000!!!
            # Number of paused updates, before the discrete var_type is adapted
            'numPauseDiscrete': 5,
            # Number of paused update runs, before trying to find a new var_type
            'numPauseOthers': 1,
            # Test integer number for a continuous variable type
            'testInt': True,
            # States if the binomialtest is applied on the alternative distributions in update_var_type
            'sKS_BT_TestAltDistr': False,
            # States, if the algorithm changes the found variableTypes after a failed test
            'update_var_type': True,
            'numStopUpdate': False,
            # Stops updating the found variableTypes after numStopUpdate parsed lines. If False the updating of lines will not be stopped
            # True, # Silences the all messages without a confidence-entry
            'silenceAllWithoutConfidence': True,
            # True, # Silences the all messages without a confidence-entry
            'silenceAllExceptIndicator': True,
            'numVarTypeHistRef': 3,
            # States how long the reference for the varTypeHist is. The reference is used in the evaluation. If False the updating of lines
            # will not be stopped
            # Number of updatesteps before the varTypeHistRef is being updated
            'numUpdateVarTypeHistRef': 6,
            'numCheckVarTypeVT': 2,
            # This attribute states how many variable types of the history are used as the recent history in the calculation of the
            # indicator. False if no output of the indicator should be generated
            'numStatToStopTracking': 200,
            # Number of static values of a variable, to stop tracking the variable type and read in in eventTypeD. False if not wanted.
            'numUpdatesTillVarRed': 20,
            # Number of updatesteps till the variables are tested if they are suitable for an indicator. If not suitable, they are removed
            # from the tracking of EvTypeD (reduce checked variables), False if not wanted.
            'varRedThres': 0.6,
            # Threshold for the reduction of variable types. The most likely none others var type must have a higher relative appearance
            # for the variable to be further checked.
            # Minimal number of the tracked indicators for the indicator weights
            'minNumTrIndFIndWeights': 1,
            # 100 # Maximal number of the tracked indicators for the indicator weights
            'maxNumTrIndFIndWeights': 100,
            'usedMultinomialTest': 'Approx'
            # ['MT', 'Approx', 'Chi'] States the used multinomial test. 'MT' means original MT, 'Approx' is the approximation with BTs and
            # 'Chi' is the ChisquareTest
        }

        # Overwrites the options with the specified input options
        if options is not None:
            for key in options.keys():
                if key in self.options:
                    self.options[key] = options[key]
                else:
                    print('Unknown option %s in VariableTypeDetector' % key)

        # Saves the minimal number of successes for the BT for the sKS-test
        self.s_ksbt_min_success = self.bt_min_successes(
            self.options['sKS_BT_Num'], 1 - self.options['sKS_Alpha'], self.options['sKS_BT_Alpha'])
        # Saves the minimal number of successes for the BT for discrete values
        self.d_bt_min_success = self.bt_min_successes(self.options['d_BT_Num'], 1 - self.options['d_Alpha'], self.options['d_BT_Alpha'])

        # Stores the standardised values of all tested distributions for better performance.
        self.distribution_data = {
            'nor': np.array([-2.5698001008578837,-2.5226575126696793,-2.475514924481476,-2.4336104016475173,-2.396943944167803,-2.3655155520423334,-2.3340871599168644,-2.302658767791395,-2.276468441020171,-2.250278114248947,-2.2240877874777225,-2.197897460706498,-2.1769451992895186,-2.155992937872539,-2.1350406764555596,-2.1140884150385806,-2.093136153621601,-2.077421957558866,-2.0564696961418867,-2.040755500079152,-2.0250413040164177,-2.009327107953683,-1.9936129118909485,-1.977898715828214,-1.9621845197654795,-1.9464703237027448,-1.93075612764001,-1.9150419315772755,-1.9045658008687858,-1.888851604806051,-1.8783754740975616,-1.8626612780348268,-1.852185147326337,-1.8417090166178474,-1.8259948205551126,-1.8155186898466231,-1.8050425591381332,-1.794566428429644,-1.7840902977211544,-1.7736141670126646,-1.7631380363041749,-1.7526619055956851,-1.7421857748871954,-1.7317096441787057,-1.721233513470216,-1.7107573827617262,-1.7002812520532364,-1.6898051213447467,-1.679328990636257,-1.674090925282012,-1.6636147945735222,-1.6531386638650325,-1.6426625331565428,-1.637424467802298,-1.6269483370938083,-1.6217102717395633,-1.6112341410310735,-1.6007580103225838,-1.595519944968339,-1.5850438142598493,-1.5798057489056043,-1.5693296181971146,-1.5640915528428698,-1.55361542213438,-1.548377356780135,-1.5379012260716454,-1.5326631607174006,-1.5221870300089109,-1.5169489646546659,-1.5064728339461761,-1.5012347685919314,-1.4959967032376864,-1.4855205725291967,-1.480282507174952,-1.4750444418207076,-1.4645683111122176,-1.4593302457579729,-1.4540921804037281,-1.4436160496952382,-1.4383779843409934,-1.4331399189867486,-1.4279018536325037,-1.417425722924014,-1.4121876575697692,-1.4069495922155242,-1.4017115268612792,-1.3964734615070344,-1.3859973307985447,-1.3807592654442997,-1.375521200090055,-1.3702831347358102,-1.3650450693815652,-1.3598070040273202,-1.3493308733188307,-1.3440928079645857,-1.3388547426103408,-1.333616677256096,-1.3283786119018512,-1.3231405465476063,-1.3179024811933613,-1.3126644158391165,-1.3074263504848718,-1.3021882851306268,-1.2969502197763818,-1.2864740890678923,-1.2812360237136473,-1.2759979583594023,-1.2707598930051576,-1.2655218276509128,-1.2602837622966678,-1.2550456969424229,-1.249807631588178,-1.2445695662339333,-1.2393315008796884,-1.2340934355254434,-1.2288553701711988,-1.2236173048169539,-1.218379239462709,-1.2131411741084641,-1.2079031087542194,-1.2026650433999744,-1.1974269780457296,-1.1948079453686073,-1.1921889126914846,-1.1869508473372399,-1.181712781982995,-1.1764747166287501,-1.1712366512745052,-1.1659985859202604,-1.1607605205660154,-1.1555224552117707,-1.1502843898575257,-1.145046324503281,-1.139808259149036,-1.1371892264719137,-1.1345701937947914,-1.1293321284405462,-1.1240940630863017,-1.1188559977320567,-1.113617932377812,-1.108379867023567,-1.1031418016693222,-1.1005227689921995,-1.0979037363150772,-1.0926656709608324,-1.0874276056065875,-1.0821895402523427,-1.0769514748980977,-1.071713409543853,-1.0690943768667305,-1.0664753441896082,-1.0612372788353632,-1.0559992134811185,-1.0507611481268735,-1.048142115449751,-1.0455230827726287,-1.0402850174183838,-1.035046952064139,-1.029808886709894,-1.0245708213556493,-1.0219517886785268,-1.0193327560014043,-1.0140946906471595,-1.0088566252929145,-1.0062375926157923,-1.0036185599386698,-0.9983804945844249,-0.9931424292301801,-0.9879043638759352,-0.9852853311988128,-0.9826662985216904,-0.9774282331674454,-0.9721901678132007,-0.9695711351360782,-0.9669521024589557,-0.9617140371047109,-0.956475971750466,-0.9538569390733436,-0.9512379063962212,-0.9459998410419762,-0.9407617756877314,-0.938142743010609,-0.9355237103334865,-0.9302856449792417,-0.9250475796249967,-0.9224285469478744,-0.919809514270752,-0.914571448916507,-0.9119524162393846,-0.9093333835622622,-0.9040953182080173,-0.8988572528537726,-0.8962382201766501,-0.8936191874995277,-0.888381122145283,-0.8857620894681605,-0.8831430567910381,-0.8779049914367932,-0.8726669260825484,-0.870047893405426,-0.8674288607283035,-0.8621907953740586,-0.8595717626969362,-0.8569527300198138,-0.8517146646655689,-0.8490956319884465,-0.846476599311324,-0.8412385339570791,-0.8386195012799568,-0.8360004686028343,-0.8307624032485894,-0.8255243378943445,-0.822905305217222,-0.8202862725400997,-0.8150482071858548,-0.8124291745087323,-0.8098101418316099,-0.8045720764773651,-0.8019530438002426,-0.7993340111231202,-0.7940959457688753,-0.7914769130917528,-0.7888578804146305,-0.7836198150603856,-0.7810007823832631,-0.7783817497061407,-0.7757627170290183,-0.7731436843518958,-0.767905618997651,-0.7652865863205286,-0.7626675536434061,-0.7574294882891612,-0.7548104556120389,-0.7521914229349164,-0.7469533575806715,-0.7443343249035491,-0.7417152922264266,-0.7364772268721819,-0.7338581941950594,-0.731239161517937,-0.7286201288408146,-0.7260010961636921,-0.7207630308094474,-0.718143998132325,-0.7155249654552025,-0.7102869001009576,-0.7076678674238353,-0.7050488347467128,-0.7024298020695903,-0.6998107693924679,-0.694572704038223,-0.6919536713611005,-0.6893346386839782,-0.6867156060068558,-0.6840965733297333,-0.6788585079754884,-0.676239475298366,-0.6736204426212435,-0.6683823772669987,-0.6657633445898763,-0.6631443119127538,-0.6605252792356313,-0.6579062465585089,-0.6526681812042641,-0.6500491485271416,-0.6474301158500192,-0.6448110831728968,-0.6421920504957743,-0.6369539851415295,-0.6343349524644071,-0.6317159197872846,-0.6290968871101621,-0.6264778544330397,-0.6212397890787948,-0.6186207564016725,-0.6160017237245501,-0.6133826910474276,-0.6107636583703052,-0.6081446256931828,-0.6055255930160603,-0.6002875276618155,-0.5976684949846931,-0.5950494623075706,-0.5924304296304481,-0.5898113969533257,-0.5845733315990809,-0.5819542989219584,-0.579335266244836,-0.5767162335677136,-0.5740972008905911,-0.5714781682134686,-0.5688591355363463,-0.5636210701821014,-0.5610020375049789,-0.5583830048278565,-0.5557639721507341,-0.5531449394736117,-0.5505259067964892,-0.5479068741193669,-0.542668808765122,-0.5400497760879995,-0.5374307434108772,-0.5348117107337548,-0.5321926780566323,-0.5295736453795098,-0.5269546127023874,-0.5243355800252649,-0.5217165473481424,-0.5164784819938976,-0.5138594493167752,-0.5112404166396527,-0.5086213839625303,-0.5060023512854078,-0.5033833186082854,-0.500764285931163,-0.4981452532540406,-0.49552622057691814,-0.49028815522267327,-0.48766912254555084,-0.4850500898684284,-0.48243105719130597,-0.47981202451418353,-0.4771929918370611,-0.47457395915993866,-0.47195492648281623,-0.4693358938056938,-0.4640978284514489,-0.4614787957743265,-0.45885976309720405,-0.4562407304200816,-0.4536216977429592,-0.4510026650658368,-0.4483836323887144,-0.445764599711592,-0.44314556703446956,-0.4405265343573471,-0.4379075016802247,-0.43528846900310225,-0.4326694363259798,-0.42743137097173495,-0.4248123382946125,-0.4221933056174901,-0.41957427294036764,-0.41695524026324526,-0.41433620758612283,-0.4117171749090004,-0.40909814223187796,-0.4064791095547555,-0.4038600768776331,-0.40124104420051065,-0.3986220115233882,-0.3960029788462658,-0.3907649134920209,-0.3881458808148985,-0.38552684813777605,-0.3829078154606536,-0.3802887827835312,-0.37766975010640874,-0.3750507174292863,-0.3724316847521639,-0.3698126520750415,-0.36719361939791906,-0.3645745867207966,-0.3619555540436742,-0.35933652136655175,-0.3567174886894293,-0.3540984560123069,-0.35147942333518445,-0.348860390658062,-0.3462413579809396,-0.34362232530381714,-0.3383842599495723,-0.33576522727244984,-0.33314619459532746,-0.330527161918205,-0.3279081292410826,-0.32528909656396016,-0.3226700638868377,-0.3200510312097153,-0.31743199853259285,-0.3148129658554704,-0.312193933178348,-0.30957490050122555,-0.30695586782410317,-0.30433683514698073,-0.3017178024698583,-0.29909876979273586,-0.29647973711561343,-0.293860704438491,-0.29124167176136856,-0.2886226390842461,-0.2860036064071237,-0.28338457373000125,-0.2807655410528788,-0.2781465083757564,-0.27552747569863395,-0.2729084430215115,-0.2702894103443891,-0.26767037766726665,-0.2650513449901442,-0.2624323123130218,-0.2598132796358994,-0.25719424695877696,-0.2545752142816545,-0.24933714892740966,-0.24671811625028722,-0.2440990835731648,-0.24148005089604235,-0.23886101821891992,-0.23624198554179748,-0.23362295286467505,-0.2310039201875526,-0.22838488751043018,-0.2257658548333078,-0.2231468221561854,-0.22052778947906296,-0.21790875680194052,-0.2152897241248181,-0.21267069144769565,-0.21005165877057322,-0.20743262609345078,-0.20481359341632835,-0.20219456073920591,-0.19957552806208348,-0.19695649538496104,-0.1943374627078386,-0.19171843003071617,-0.18909939735359374,-0.18648036467647136,-0.18386133199934893,-0.1812422993222265,-0.17862326664510406,-0.17600423396798162,-0.1733852012908592,-0.17076616861373675,-0.16814713593661432,-0.16552810325949188,-0.16290907058236945,-0.160290037905247,-0.1576710052281246,-0.15505197255100217,-0.15243293987387974,-0.1498139071967573,-0.14719487451963487,-0.14457584184251246,-0.14195680916539002,-0.1393377764882676,-0.13671874381114515,-0.13409971113402272,-0.13148067845690029,-0.12886164577977782,-0.1262426131026554,-0.12362358042553297,-0.12100454774841053,-0.1183855150712881,-0.11576648239416568,-0.11314744971704327,-0.11052841703992083,-0.1079093843627984,-0.10529035168567596,-0.10267131900855353,-0.1000522863314311,-0.09743325365430866,-0.09481422097718623,-0.09219518830006382,-0.08957615562294138,-0.08695712294581895,-0.08433809026869651,-0.08171905759157408,-0.07910002491445166,-0.07648099223732922,-0.07386195956020679,-0.07124292688308435,-0.06862389420596193,-0.0660048615288395,-0.06338582885171706,-0.06076679617459463,-0.0581477634974722,-0.05552873082034977,-0.052909698143227345,-0.05029066546610491,-0.047671632788982475,-0.04505260011186005,-0.042433567434737626,-0.03981453475761519,-0.03719550208049276,-0.03457646940337032,-0.0319574367262479,-0.029338404049125466,-0.02671937137200303,-0.024100338694880607,-0.021481306017758172,-0.01886227334063574,-0.016243240663513313,-0.013624207986390881,-0.011878186201642594,-0.010132164416894306,-0.008386142632146019,-0.005767109955023588,-0.0031480772779011574,-0.0005290446007787262,0.0020899880763437045,0.004709020753466135,0.007328053430588567,0.009947086107710997,0.012566118784833427,0.01518515146195586,0.017804184139078288,0.020423216816200723,0.023042249493323154,0.025661282170445582,0.028280314847568013,0.030899347524690448,0.03351838020181288,0.036137412878935314,0.03875644555605774,0.04137547823318016,0.0439945109103026,0.04661354358742503,0.04923257626454747,0.05185160894166989,0.054470641618792316,0.05708967429591475,0.059708706973037186,0.062327739650159614,0.06494677232728205,0.06756580500440448,0.07018483768152692,0.07280387035864935,0.07542290303577177,0.0780419357128942,0.08066096839001663,0.08328000106713906,0.0858990337442615,0.08851806642138392,0.09113709909850636,0.09375613177562879,0.09637516445275122,0.09899419712987365,0.10161322980699608,0.10423226248411852,0.10685129516124095,0.10947032783836337,0.11208936051548579,0.11470839319260823,0.11732742586973066,0.11994645854685308,0.12256549122397552,0.12518452390109797,0.1278035565782204,0.1304225892553428,0.13304162193246524,0.13566065460958768,0.1382796872867101,0.14089871996383255,0.14351775264095498,0.14613678531807742,0.14875581799519985,0.15137485067232226,0.15399388334944467,0.1566129160265671,0.15923194870368954,0.16185098138081197,0.1644700140579344,0.16708904673505684,0.16970807941217927,0.1723271120893017,0.17494614476642414,0.17756517744354658,0.180184210120669,0.18280324279779142,0.18542227547491386,0.1880413081520363,0.19066034082915873,0.19327937350628113,0.19589840618340357,0.198517438860526,0.20113647153764844,0.20375550421477087,0.2063745368918933,0.20899356956901574,0.21161260224613818,0.2142316349232606,0.21685066760038305,0.21946970027750545,0.22208873295462786,0.2247077656317503,0.22732679830887273,0.22994583098599516,0.2325648636631176,0.23518389634024,0.23780292901736244,0.24042196169448488,0.2430409943716073,0.24566002704872975,0.24827905972585218,0.2508980924029746,0.25351712508009705,0.2561361577572195,0.2587551904343419,0.2639932557885868,0.2666122884657092,0.26923132114283166,0.2718503538199541,0.27446938649707653,0.27708841917419896,0.2797074518513214,0.28232648452844383,0.28494551720556627,0.2875645498826887,0.29018358255981114,0.29280261523693357,0.295421647914056,0.29804068059117844,0.3006597132683009,0.30327874594542326,0.3058977786225457,0.3085168112996681,0.31113584397679056,0.313754876653913,0.31637390933103543,0.31899294200815786,0.3216119746852803,0.32423100736240273,0.32685004003952517,0.3294690727166476,0.33208810539377004,0.3347071380708925,0.3373261707480149,0.33994520342513734,0.3425642361022598,0.3478023014565046,0.350421334133627,0.35304036681074946,0.3556593994878719,0.35827843216499433,0.36089746484211677,0.3635164975192392,0.36613553019636164,0.368754562873484,0.37137359555060645,0.3739926282277289,0.3766116609048513,0.37923069358197375,0.3818497262590962,0.3844687589362186,0.38708779161334106,0.3897068242904635,0.39494488964470836,0.3975639223218308,0.40018295499895323,0.40280198767607567,0.4054210203531981,0.40804005303032054,0.410659085707443,0.4132781183845654,0.41589715106168784,0.4185161837388103,0.4211352164159327,0.42375424909305515,0.4263732817701776,0.42899231444729996,0.4316113471244224,0.43684941247866726,0.4394684451557897,0.44208747783291213,0.4447065105100345,0.4473255431871569,0.44994457586427933,0.45256360854140176,0.4551826412185242,0.45780167389564663,0.46042070657276907,0.4630397392498915,0.46827780460413637,0.4708968372812588,0.47351586995838124,0.4761349026355037,0.4787539353126261,0.48137296798974855,0.483992000666871,0.4866110333439934,0.48923006602111585,0.4918490986982383,0.4944681313753607,0.4997061967296056,0.502325229406728,0.5049442620838505,0.5075632947609728,0.5101823274380953,0.5128013601152177,0.5154203927923402,0.5180394254694626,0.5206584581465851,0.5258965235008298,0.5285155561779523,0.5311345888550747,0.5337536215321971,0.5363726542093196,0.5389916868864421,0.5416107195635644,0.5468487849178093,0.5494678175949318,0.5520868502720542,0.5547058829491766,0.557324915626299,0.5599439483034215,0.5625629809805439,0.5678010463347888,0.5704200790119113,0.5730391116890337,0.575658144366156,0.5782771770432785,0.580896209720401,0.5835152423975234,0.5887533077517683,0.5913723404288908,0.5939913731060131,0.5966104057831355,0.599229438460258,0.6044675038145029,0.6070865364916253,0.6097055691687477,0.6123246018458701,0.6149436345229925,0.617562667200115,0.6201816998772374,0.6254197652314822,0.6280387979086047,0.6306578305857271,0.6332768632628494,0.6358958959399719,0.6411339612942167,0.6437529939713391,0.6463720266484616,0.6489910593255841,0.6516100920027065,0.6568481573569513,0.6594671900340738,0.6620862227111962,0.6647052553883186,0.6673242880654411,0.672562353419686,0.6751813860968083,0.6778004187739308,0.6804194514510533,0.6830384841281757,0.6882765494824206,0.690895582159543,0.6935146148366654,0.6987526801909103,0.7013717128680328,0.7039907455451552,0.7066097782222776,0.7092288108994,0.7144668762536449,0.7170859089307673,0.7197049416078898,0.7249430069621347,0.727562039639257,0.7301810723163795,0.7328001049935019,0.7354191376706243,0.7406572030248691,0.7432762357019915,0.745895268379114,0.7511333337333589,0.7537523664104813,0.7563713990876038,0.7616094644418486,0.764228497118971,0.7668475297960935,0.769466562473216,0.7720855951503384,0.7773236605045832,0.7799426931817057,0.7825617258588281,0.787799791213073,0.7904188238901955,0.7930378565673178,0.7982759219215627,0.8008949545986852,0.8035139872758075,0.8087520526300523,0.8113710853071748,0.8139901179842972,0.8192281833385421,0.8218472160156646,0.824466248692787,0.8297043140470318,0.8323233467241543,0.8349423794012767,0.8401804447555216,0.842799477432644,0.8454185101097664,0.8506565754640113,0.8558946408182562,0.8585136734953785,0.861132706172501,0.8663707715267459,0.8689898042038683,0.8716088368809908,0.8768469022352356,0.879465934912358,0.8820849675894805,0.8873230329437254,0.8925610982979703,0.8951801309750925,0.8977991636522149,0.9030372290064599,0.9056562616835823,0.9082752943607046,0.9135133597149496,0.9187514250691944,0.9213704577463169,0.9239894904234394,0.9292275557776841,0.9344656211319291,0.9370846538090515,0.9397036864861739,0.9449417518404188,0.9501798171946636,0.9527988498717861,0.9554178825489086,0.9606559479031533,0.9658940132573983,0.9685130459345207,0.971132078611643,0.976370143965888,0.9816082093201327,0.9842272419972552,0.9868462746743777,0.9920843400286224,0.9973224053828674,0.9999414380599898,1.0025604707371123,1.0077985360913573,1.013036601445602,1.018274666799847,1.0208936994769693,1.0235127321540918,1.0287507975083368,1.0339888628625815,1.0392269282168265,1.0418459608939488,1.0444649935710713,1.0497030589253162,1.054941124279561,1.060179189633806,1.0654172549880507,1.068036287665173,1.0706553203422955,1.0758933856965405,1.0811314510507852,1.0863695164050302,1.091607581759275,1.0942266144363972,1.09684564711352,1.1020837124677647,1.1073217778220097,1.1125598431762544,1.1177979085304994,1.1230359738847442,1.1282740392389892,1.1308930719161114,1.133512104593234,1.138750169947479,1.1439882353017237,1.1492263006559686,1.1544643660102134,1.1597024313644584,1.1649404967187031,1.1701785620729481,1.1754166274271929,1.1806546927814379,1.1832737254585601,1.1858927581356826,1.1911308234899276,1.1963688888441724,1.2016069541984173,1.206845019552662,1.212083084906907,1.2173211502611518,1.2225592156153968,1.2277972809696411,1.2330353463238861,1.238273411678131,1.2435114770323759,1.2487495423866206,1.2539876077408656,1.2592256730951106,1.2644637384493553,1.2697018038036,1.274939869157845,1.28017793451209,1.2854159998663348,1.2906540652205796,1.3011301959290695,1.3063682612833143,1.311606326637559,1.316844391991804,1.322082457346049,1.3273205227002938,1.3325585880545385,1.3377966534087835,1.3430347187630285,1.3482727841172732,1.358748914825763,1.363986980180008,1.3692250455342527,1.3744631108884975,1.3797011762427425,1.3849392415969874,1.395415372305477,1.400653437659722,1.405891503013967,1.4111295683682117,1.4216056990767014,1.4268437644309464,1.4320818297851912,1.437319895139436,1.4477960258479259,1.4530340912021706,1.4582721565564154,1.4687482872649054,1.47398635261915,1.4792244179733947,1.4897005486818844,1.4949386140361294,1.5001766793903741,1.5106528100988639,1.5158908754531089,1.5263670061615986,1.5316050715158434,1.5368431368700883,1.547319267578578,1.5525573329328228,1.5630334636413123,1.5682715289955576,1.578747659704047,1.5892237904125368,1.5944618557667816,1.6049379864752713,1.6101760518295163,1.620652182538006,1.6311283132464958,1.6363663786007405,1.6468425093092303,1.65731864001772,1.6677947707262097,1.6730328360804547,1.6835089667889445,1.6939850974974342,1.704461228205924,1.7149373589144137,1.7254134896229034,1.7306515549771482,1.741127685685638,1.7516038163941277,1.7620799471026174,1.7777941431653521,1.7882702738738419,1.7987464045823311,1.809222535290821,1.8196986659993106,1.8354128620620453,1.845888992770535,1.8563651234790248,1.8720793195417595,1.882555450250249,1.8982696463129838,1.9087457770214733,1.9244599730842078,1.9401741691469425,1.9506502998554323,1.9663644959181668,1.9820786919809015,1.9977928880436362,2.013507084106371,2.0344593455233504,2.050173541586085,2.0658877376488194,2.086839999065799,2.1077922604827783,2.123506456545513,2.144458717962492,2.1706490447337163,2.191601306150696,2.2125535675676753,2.2387438943388998,2.264934221110124,2.296362613235593,2.3225529400068177,2.3539813321322867,2.390647789612001,2.427314247091715,2.4639807045714286,2.5111232927596325,2.558265880947836,2.610646534490285]),
            'beta1': np.array([-1.4349413455004163,-1.4346541254447314,-1.4343669053890462,-1.434079685333361,-1.4337924652776761,-1.4335052452219912,-1.4332180251663063,-1.432930805110621,-1.432643585054936,-1.432356364999251,-1.432069144943566,-1.4316588305783016,-1.4312485162130375,-1.430838201847773,-1.4304278874825087,-1.4300175731172444,-1.4296072587519801,-1.4291969443867159,-1.4287182442939075,-1.428239544201099,-1.4277608441082907,-1.4272821440154824,-1.426803443922674,-1.4263247438298656,-1.4257503037184955,-1.4251758636071254,-1.4246014234957556,-1.4240269833843853,-1.4234525432730154,-1.4228781031616453,-1.4223036630502752,-1.4217292229389054,-1.4211547828275353,-1.4205803427161652,-1.4198622925769526,-1.41914424243774,-1.4184261922985275,-1.417708142159315,-1.4169900920201024,-1.4162720418808898,-1.4155539917416773,-1.4148359416024647,-1.4141178914632522,-1.4133998413240396,-1.4126817911848273,-1.4119637410456145,-1.411006340859998,-1.410048940674381,-1.4090915404887643,-1.408373490349552,-1.4076554402103392,-1.4069373900711268,-1.406219339931914,-1.4052619397462975,-1.4043045395606808,-1.4033471393750638,-1.4023897391894473,-1.4014323390038306,-1.4004749388182136,-1.399517538632597,-1.3985601384469803,-1.3976027382613634,-1.3966453380757469,-1.3956879378901301,-1.3947305377045132,-1.393294437426088,-1.3918583371476632,-1.3909009369620464,-1.3899435367764297,-1.388986136590813,-1.3875500363123878,-1.3861139360339627,-1.385156535848346,-1.3841991356627292,-1.3832417354771125,-1.3818056351986874,-1.3803695349202623,-1.3794121347346455,-1.3784547345490288,-1.377497334363412,-1.376061234084987,-1.3746251338065618,-1.3731890335281367,-1.3717529332497116,-1.3703168329712865,-1.3688807326928614,-1.3674446324144363,-1.3660085321360111,-1.3650511319503944,-1.3640937317647777,-1.363136331579161,-1.3617002313007358,-1.3602641310223107,-1.3588280307438856,-1.3573919304654605,-1.3559558301870356,-1.3545197299086102,-1.3530836296301854,-1.35164752935176,-1.3487753287949098,-1.347339228516485,-1.3459031282380596,-1.3444670279596347,-1.3430309276812094,-1.3415948274027845,-1.3401587271243591,-1.3387226268459342,-1.3372865265675091,-1.335850426289084,-1.334414326010659,-1.3315421254538087,-1.3301060251753836,-1.3286699248969585,-1.3272338246185333,-1.3257977243401082,-1.3243616240616831,-1.322925523783258,-1.3200533232264078,-1.3186172229479827,-1.3171811226695578,-1.3157450223911327,-1.3143089221127076,-1.3114367215558573,-1.3100006212774322,-1.308564520999007,-1.3056923204421569,-1.3042562201637318,-1.3028201198853067,-1.2999479193284564,-1.2985118190500313,-1.2970757187716062,-1.295639618493181,-1.294203518214756,-1.2913313176579058,-1.2898952173794807,-1.2884591171010555,-1.2855869165442053,-1.282714715987355,-1.28127861570893,-1.2798425154305049,-1.2769703148736546,-1.2755342145952295,-1.2740981143168044,-1.2712259137599542,-1.269789813481529,-1.268353713203104,-1.2654815126462537,-1.2626093120894035,-1.2611732118109784,-1.2597371115325533,-1.2568649109757033,-1.253992710418853,-1.252556610140428,-1.2511205098620028,-1.2482483093051526,-1.2453761087483024,-1.2439400084698773,-1.2425039081914522,-1.239631707634602,-1.2367595070777517,-1.2353234067993266,-1.2338873065209015,-1.2310151059640513,-1.228142905407201,-1.2252707048503508,-1.2238346045719257,-1.2223985042935006,-1.2195263037366504,-1.2166541031798002,-1.21378190262295,-1.2123458023445248,-1.2109097020660997,-1.2080375015092495,-1.2051653009523993,-1.202293100395549,-1.199420899838699,-1.197984799560274,-1.1965486992818488,-1.1936764987249986,-1.1908042981681484,-1.1879320976112981,-1.185059897054448,-1.182187696497598,-1.1807515962191726,-1.1793154959407477,-1.1764432953838975,-1.1735710948270472,-1.170698894270197,-1.1678266937133468,-1.1649544931564966,-1.1620822925996463,-1.160646192321221,-1.1592100920427961,-1.156337891485946,-1.1534656909290957,-1.1505934903722455,-1.1477212898153952,-1.144849089258545,-1.1419768887016948,-1.1391046881448446,-1.1362324875879943,-1.133360287031144,-1.1304880864742939,-1.1276158859174437,-1.1261797856390185,-1.1247436853605934,-1.1218714848037434,-1.1189992842468932,-1.116127083690043,-1.1132548831331928,-1.1103826825763425,-1.1075104820194923,-1.104638281462642,-1.1017660809057919,-1.0988938803489416,-1.0960216797920914,-1.0931494792352412,-1.090277278678391,-1.0874050781215407,-1.0845328775646905,-1.0816606770078403,-1.07878847645099,-1.0759162758941399,-1.0730440753372896,-1.0701718747804394,-1.0672996742235892,-1.0644274736667392,-1.061555273109889,-1.0586830725530387,-1.0558108719961885,-1.0529386714393383,-1.050066470882488,-1.0471942703256378,-1.0443220697687876,-1.0385776686550872,-1.035705468098237,-1.0328332675413867,-1.0299610669845365,-1.0270888664276863,-1.024216665870836,-1.0213444653139858,-1.0184722647571356,-1.0156000642002854,-1.0127278636434351,-1.009855663086585,-1.0069834625297347,-1.0041112619728847,-0.9983668608591841,-0.9954946603023339,-0.9926224597454837,-0.9897502591886336,-0.9868780586317834,-0.9840058580749331,-0.9811336575180829,-0.9782614569612327,-0.9753892564043825,-0.969644855290682,-0.9667726547338318,-0.9639004541769816,-0.9610282536201314,-0.9581560530632812,-0.955283852506431,-0.9524116519495808,-0.9495394513927305,-0.9437950502790303,-0.9409228497221801,-0.9380506491653299,-0.9351784486084797,-0.9323062480516294,-0.9294340474947792,-0.9236896463810788,-0.9208174458242285,-0.9179452452673783,-0.9150730447105282,-0.912200844153678,-0.9093286435968277,-0.9035842424831273,-0.9007120419262771,-0.8978398413694268,-0.8949676408125766,-0.8920954402557264,-0.8863510391420261,-0.8834788385851758,-0.8806066380283256,-0.8777344374714754,-0.8748622369146252,-0.8691178358009247,-0.8662456352440745,-0.8633734346872243,-0.860501234130374,-0.8576290335735238,-0.8518846324598236,-0.8490124319029734,-0.8461402313461232,-0.8432680307892729,-0.8375236296755726,-0.8346514291187224,-0.8317792285618721,-0.8289070280050219,-0.8231626268913215,-0.8202904263344712,-0.817418225777621,-0.8145460252207708,-0.8088016241070705,-0.8059294235502202,-0.80305722299337,-0.8001850224365198,-0.7944406213228193,-0.7915684207659691,-0.7886962202091189,-0.7829518190954184,-0.7800796185385683,-0.7772074179817181,-0.7743352174248679,-0.7685908163111674,-0.7657186157543172,-0.762846415197467,-0.7571020140837665,-0.7542298135269163,-0.7513576129700662,-0.748485412413216,-0.7427410112995155,-0.7398688107426653,-0.7369966101858151,-0.7312522090721146,-0.7283800085152644,-0.7255078079584142,-0.7197634068447138,-0.7168912062878636,-0.7140190057310134,-0.708274604617313,-0.7054024040604627,-0.7025302035036125,-0.6967858023899121,-0.6939136018330618,-0.6910414012762117,-0.6852970001625113,-0.682424799605661,-0.6795525990488108,-0.6738081979351104,-0.6709359973782602,-0.6680637968214099,-0.6623193957077096,-0.6594471951508594,-0.6565749945940091,-0.6508305934803087,-0.6479583929234585,-0.6450861923666082,-0.6393417912529078,-0.6364695906960576,-0.6307251895823573,-0.6278529890255071,-0.6249807884686569,-0.6192363873549565,-0.6163641867981063,-0.6134919862412561,-0.6077475851275557,-0.6048753845707054,-0.599130983457005,-0.5962587829001548,-0.5933865823433045,-0.5876421812296042,-0.584769980672754,-0.5790255795590535,-0.5761533790022033,-0.5732811784453531,-0.5675367773316526,-0.5646645767748024,-0.5589201756611021,-0.5560479751042519,-0.5531757745474016,-0.5474313734337012,-0.544559172876851,-0.5388147717631505,-0.5359425712063003,-0.5330703706494501,-0.5273259695357497,-0.5244537689788995,-0.5187093678651991,-0.5158371673083488,-0.5100927661946484,-0.5072205656377982,-0.5043483650809479,-0.49860396396724754,-0.4957317634103973,-0.4899873622966969,-0.4871151617398467,-0.48137076062614625,-0.4784985600692961,-0.47562635951244586,-0.4698819583987454,-0.4670097578418952,-0.4612653567281948,-0.4583931561713446,-0.4526487550576443,-0.44977655450079407,-0.4440321533870937,-0.44115995283024345,-0.4382877522733932,-0.43254335115969283,-0.4296711506028426,-0.42392674948914216,-0.42105454893229194,-0.41531014781859155,-0.4124379472617413,-0.4066935461480409,-0.40382134559119065,-0.39807694447749026,-0.39520474392064003,-0.3894603428069396,-0.3865881422500894,-0.3837159416932392,-0.37797154057953875,-0.3750993400226885,-0.36935493890898813,-0.3664827383521379,-0.36073833723843746,-0.3578661366815873,-0.35212173556788684,-0.3492495350110366,-0.3435051338973362,-0.340632933340486,-0.33488853222678555,-0.3320163316699353,-0.32627193055623493,-0.3233997299993847,-0.31765532888568426,-0.3147831283288341,-0.30903872721513365,-0.3061665266582834,-0.300422125544583,-0.2975499249877328,-0.29180552387403236,-0.28893332331718213,-0.28318892220348174,-0.2803167216466315,-0.27457232053293107,-0.271700119976081,-0.2659557188623806,-0.2630835183055304,-0.25733911719182995,-0.2544669166349797,-0.24872251552127933,-0.2458503149644291,-0.24010591385072869,-0.23723371329387846,-0.23148931218017804,-0.22861711162332785,-0.2228727105096274,-0.2200005099527772,-0.21425610883907675,-0.21138390828222656,-0.20563950716852614,-0.2027673066116759,-0.1970229054979755,-0.19415070494112527,-0.18840630382742485,-0.18553410327057462,-0.1797897021568742,-0.176917501600024,-0.17117310048632356,-0.16830089992947336,-0.16255649881577292,-0.15968429825892272,-0.1539398971452223,-0.15106769658837207,-0.14532329547467165,-0.14245109491782143,-0.136706693804121,-0.13383449324727079,-0.12809009213357037,-0.12521789157672017,-0.11947349046301974,-0.11660128990616951,-0.11085688879246909,-0.10798468823561888,-0.10224028712191845,-0.09936808656506824,-0.09362368545136797,-0.08787928433766755,-0.08500708378081734,-0.0792626826671169,-0.0763904821102667,-0.07064608099656626,-0.06777388043971605,-0.06202947932601563,-0.05915727876916541,-0.053412877655464985,-0.050540677098614775,-0.04479627598491435,-0.04192407542806414,-0.03617967431436371,-0.033307473757513494,-0.02756307264381307,-0.024690872086962856,-0.01894647097326243,-0.016074270416412215,-0.01032986930271179,-0.007457668745861576,-0.0017132676321611501,0.0040311334815392764,0.006903334038389489,0.012647735152089916,0.01551993570894013,0.021264336822640555,0.024136537379490768,0.029880938493191195,0.03275313905004141,0.038497540163741836,0.041369740720592046,0.047114141834292474,0.049986342391142684,0.05573074350484311,0.05860294406169333,0.06434734517539376,0.06721954573224397,0.07296394684594439,0.07583614740279461,0.08158054851649503,0.08445274907334524,0.09019715018704567,0.0959415513007461,0.0988137518575963,0.10455815297129674,0.10743035352814695,0.11317475464184738,0.1160469551986976,0.12179135631239801,0.12466355686924822,0.13040795798294866,0.13328015853979888,0.1390245596534993,0.1418967602103495,0.14764116132404995,0.15051336188090014,0.15625776299460056,0.1591299635514508,0.1648743646651512,0.16774656522200143,0.17349096633570185,0.17636316689255174,0.18210756800625216,0.1849797685631024,0.1907241696768028,0.19359637023365303,0.19934077134735345,0.20221297190420368,0.2079573730179041,0.21082957357475432,0.21657397468845474,0.21944617524530494,0.22519057635900538,0.22806277691585558,0.233807178029556,0.23667937858640622,0.24242377970010665,0.24529598025695687,0.2510403813706573,0.2539125819275075,0.25965698304120793,0.26252918359805816,0.26827358471175855,0.2711457852686088,0.2768901863823092,0.27976238693915945,0.28550678805285984,0.28837898860971006,0.2941233897234105,0.2969955902802607,0.3027399913939611,0.30561219195081135,0.31135659306451174,0.31422879362136197,0.3199731947350624,0.32284539529191264,0.32858979640561303,0.33146199696246326,0.3372063980761637,0.3400785986330139,0.3458229997467143,0.34869520030356455,0.35443960141726494,0.35731180197411516,0.3630562030878156,0.36592840364466583,0.3716728047583662,0.37454500531521645,0.3802894064289169,0.3831616069857671,0.3860338075426173,0.39177820865631774,0.39465040921316796,0.40039481032686836,0.4032670108837186,0.409011411997419,0.41188361255426925,0.41762801366796964,0.42050021422481987,0.4262446153385203,0.4291168158953705,0.43486121700907093,0.43773341756592116,0.4406056181227714,0.4463500192364718,0.449222219793322,0.45496662090702245,0.4578388214638726,0.46358322257757306,0.4664554231344233,0.4721998242481237,0.4750720248049739,0.4779442253618241,0.4836886264755246,0.4865608270323748,0.4923052281460752,0.4951774287029254,0.5009218298166258,0.503794030373476,0.5066662309303263,0.5124106320440267,0.5152828326008769,0.5210272337145774,0.5238994342714275,0.5296438353851279,0.5325160359419782,0.535388236498828,0.5411326376125285,0.5440048381693787,0.5497492392830792,0.5526214398399294,0.5554936403967796,0.56123804151048,0.5641102420673302,0.5698546431810306,0.5727268437378809,0.5755990442947311,0.5813434454084315,0.5842156459652817,0.5899600470789821,0.5928322476358323,0.5957044481926825,0.601448849306383,0.6043210498632332,0.6100654509769337,0.6129376515337839,0.615809852090634,0.6215542532043344,0.6244264537611847,0.6272986543180349,0.6330430554317353,0.6359152559885856,0.641659657102286,0.6445318576591362,0.6474040582159863,0.6531484593296868,0.656020659886537,0.6588928604433872,0.6646372615570877,0.6675094621139379,0.6703816626707881,0.6761260637844885,0.6789982643413387,0.6818704648981889,0.6876148660118894,0.6904870665687396,0.6933592671255898,0.6991036682392903,0.7019758687961405,0.7048480693529906,0.710592470466691,0.7134646710235413,0.7163368715803915,0.722081272694092,0.7249534732509422,0.7278256738077924,0.7335700749214927,0.736442275478343,0.7393144760351932,0.7450588771488936,0.7479310777057439,0.7508032782625941,0.7536754788194443,0.7594198799331447,0.762292080489995,0.7651642810468451,0.7709086821605455,0.7737808827173958,0.776653083274246,0.7795252838310962,0.7852696849447967,0.7881418855016469,0.7910140860584971,0.7967584871721974,0.7996306877290477,0.8025028882858979,0.8053750888427481,0.8111194899564486,0.8139916905132988,0.816863891070149,0.8197360916269992,0.8254804927406996,0.8283526932975498,0.8312248938544,0.8340970944112502,0.8398414955249507,0.8427136960818009,0.8455858966386511,0.8484580971955014,0.8542024983092017,0.8570746988660519,0.8599468994229021,0.8628190999797524,0.8656913005366026,0.871435701650303,0.8743079022071533,0.8771801027640035,0.8800523033208537,0.8829245038777038,0.8886689049914043,0.8915411055482545,0.8944133061051044,0.8972855066619546,0.9001577072188048,0.9059021083325053,0.9087743088893555,0.9116465094462057,0.9145187100030558,0.9173909105599061,0.9202631111167563,0.9260075122304567,0.928879712787307,0.9317519133441572,0.9346241139010074,0.9374963144578576,0.9403685150147079,0.9461129161284082,0.9489851166852584,0.9518573172421086,0.9547295177989589,0.9576017183558091,0.9604739189126593,0.9633461194695095,0.9662183200263598,0.9719627211400602,0.9748349216969103,0.9777071222537606,0.9805793228106108,0.983451523367461,0.9863237239243112,0.9891959244811614,0.9920681250380117,0.9949403255948619,1.0006847267085623,1.0035569272654126,1.0064291278222628,1.009301328379113,1.0121735289359632,1.0150457294928135,1.0179179300496635,1.0207901306065137,1.023662331163364,1.0265345317202141,1.0294067322770644,1.0322789328339146,1.0351511333907648,1.0408955345044653,1.0437677350613155,1.0466399356181657,1.049512136175016,1.0523843367318662,1.0552565372887164,1.0581287378455666,1.0610009384024168,1.063873138959267,1.0667453395161173,1.0696175400729675,1.0724897406298177,1.0753619411866677,1.078234141743518,1.0811063423003682,1.0839785428572184,1.0868507434140686,1.0897229439709188,1.092595144527769,1.0954673450846193,1.0983395456414695,1.1012117461983197,1.10408394675517,1.1069561473120202,1.1098283478688704,1.1127005484257206,1.1155727489825709,1.118444949539421,1.1213171500962713,1.1241893506531215,1.1256254509315464,1.1270615512099718,1.129933751766822,1.1328059523236722,1.1356781528805222,1.1385503534373724,1.1414225539942227,1.1442947545510729,1.147166955107923,1.1500391556647733,1.1529113562216236,1.1557835567784738,1.158655757335324,1.160091857613749,1.1615279578921742,1.1644001584490244,1.1672723590058747,1.170144559562725,1.1730167601195751,1.1758889606764253,1.1787611612332756,1.1801972615117007,1.1816333617901258,1.184505562346976,1.1873777629038262,1.1902499634606765,1.1931221640175265,1.1959943645743767,1.197430464852802,1.198866565131227,1.2017387656880771,1.2046109662449274,1.2074831668017776,1.2103553673586278,1.2117914676370527,1.213227567915478,1.2160997684723283,1.2189719690291785,1.2218441695860287,1.2232802698644536,1.224716370142879,1.2275885706997292,1.2304607712565794,1.2333329718134296,1.2347690720918545,1.2362051723702798,1.23907737292713,1.2419495734839803,1.2433856737624054,1.2448217740408305,1.2476939745976807,1.250566175154531,1.2520022754329558,1.2534383757113807,1.256310576268231,1.2591827768250812,1.260618877103506,1.2620549773819314,1.2649271779387816,1.2677993784956318,1.269235478774057,1.270671579052482,1.2735437796093323,1.2749798798877574,1.2764159801661825,1.2792881807230327,1.2807242810014579,1.282160381279883,1.285032581836733,1.2879047823935832,1.2893408826720083,1.2907769829504334,1.2936491835072836,1.2950852837857088,1.2965213840641339,1.2979574843425592,1.299393584620984,1.3022657851778343,1.3037018854562596,1.3051379857346845,1.3080101862915348,1.30944628656996,1.310882386848385,1.3137545874052352,1.3151906876836605,1.3166267879620854,1.3180628882405103,1.3194989885189357,1.3223711890757859,1.3238072893542108,1.325243389632636,1.3266794899110614,1.3281155901894863,1.3295516904679112,1.3309877907463366,1.3338599913031868,1.3352960915816117,1.336732191860037,1.3381682921384621,1.3396043924168872,1.3410404926953121,1.3424765929737374,1.3439126932521626,1.3453487935305875,1.3467848938090126,1.3482209940874377,1.351093194644288,1.352529294922713,1.3539653952011381,1.3554014954795635,1.3568375957579883,1.3582736960364135,1.3597097963148386,1.361145896593264,1.3625819968716888,1.3635393970573055,1.3644967972429225,1.365454197428539,1.3668902977069644,1.3683263979853892,1.3697624982638141,1.3711985985422395,1.3726346988206648,1.3740707990990897,1.3755068993775146,1.37694299965594,1.3779003998415564,1.3788578000271734,1.3798152002127901,1.381251300491215,1.3826874007696404,1.3836448009552569,1.3846022011408738,1.3855596013264906,1.3869957016049155,1.3884318018833408,1.3893892020689573,1.3903466022545743,1.391304002440191,1.392740102718616,1.3941762029970413,1.3951336031826578,1.3960910033682747,1.3970484035538915,1.398005803739508,1.398963203925125,1.3999206041107417,1.4008780042963582,1.4018354044819752,1.4027928046675917,1.4037502048532084,1.4047076050388254,1.405665005224442,1.4063830553636545,1.4071011055028673,1.4078191556420798,1.4085372057812922,1.409494605966909,1.4104520061525259,1.4114094063381424,1.412127456477355,1.4128455066165677,1.4135635567557803,1.4142816068949926,1.4149996570342052,1.4157177071734177,1.4164357573126305,1.4171538074518428,1.4178718575910554,1.4185899077302682,1.4193079578694807,1.420026008008693,1.4206004481200631,1.421174888231433,1.4217493283428033,1.4223237684541734,1.4228982085655433,1.4234726486769134,1.4240470887882832,1.4246215288996535,1.4251959690110236,1.4257704091223935,1.4262491092152019,1.4267278093080102,1.4272065094008184,1.4276852094936272,1.4281639095864354,1.4286426096792437,1.429052924044508,1.4294632384097725,1.4298735527750368,1.4302838671403009,1.4306941815055652,1.4311044958708297,1.431514810236094,1.4317759193776258,1.4320370285191573,1.4322981376606894,1.4325592468022212,1.4328203559437531,1.4330814650852846,1.4333425742268167,1.4336036833683485,1.4338647925098804,1.4341259016514118]),
            'beta2': np.array([-3.3502204466115333,-3.1682583387773127,-3.055316340811244,-2.9674725646154134,-2.892177899304701,-2.829432344879107,-2.772961345896073,-2.7227649023555984,-2.678843014257683,-2.641195681602327,-2.603548348946971,-2.565901016291615,-2.534528239078818,-2.503155461866021,-2.4717826846532245,-2.4404099074404275,-2.4153116856701904,-2.390213463899953,-2.3651152421297152,-2.340017020359478,-2.3211933540318004,-2.296095132261563,-2.2772714659338846,-2.252173244163647,-2.2333495778359693,-2.214525911508291,-2.195702245180613,-2.176878578852935,-2.158054912525257,-2.1455058016401383,-2.12668213531246,-2.107858468984782,-2.095309358099663,-2.0764856917719854,-2.0639365808868666,-2.0451129145591884,-2.0325638036740696,-2.020014692788951,-2.001191026461273,-1.9886419155761543,-1.9760928046910355,-1.9635436938059168,-1.9509945829207982,-1.9384454720356794,-1.925896361150561,-1.9133472502654423,-1.9007981393803237,-1.888249028495205,-1.8756999176100861,-1.8631508067249676,-1.8506016958398488,-1.83805258495473,-1.8255034740696114,-1.819228918627052,-1.8066798077419333,-1.7941306968568145,-1.781581585971696,-1.7753070305291365,-1.7627579196440177,-1.750208808758899,-1.7439342533163398,-1.731385142431221,-1.7188360315461022,-1.7125614761035428,-1.7000123652184242,-1.6937378097758649,-1.681188698890746,-1.6749141434481867,-1.6623650325630681,-1.6560904771205087,-1.64354136623539,-1.6372668107928305,-1.624717699907712,-1.6184431444651526,-1.6121685890225932,-1.5996194781374744,-1.5933449226949152,-1.5870703672523558,-1.574521256367237,-1.5682467009246777,-1.5619721454821183,-1.5494230345969997,-1.5431484791544405,-1.5368739237118814,-1.5243248128267626,-1.5180502573842032,-1.5117757019416438,-1.5055011464990844,-1.4929520356139658,-1.4866774801714064,-1.480402924728847,-1.4741283692862877,-1.461579258401169,-1.4553047029586097,-1.4490301475160503,-1.442755592073491,-1.4364810366309315,-1.4302064811883721,-1.4176573703032536,-1.4113828148606942,-1.4051082594181348,-1.3988337039755754,-1.392559148533016,-1.3862845930904568,-1.3800100376478974,-1.373735482205338,-1.3674609267627786,-1.3549118158776599,-1.3486372604351007,-1.3423627049925413,-1.336088149549982,-1.3298135941074225,-1.323539038664863,-1.3172644832223037,-1.3109899277797443,-1.3047153723371852,-1.2984408168946258,-1.2921662614520664,-1.285891706009507,-1.2796171505669476,-1.2733425951243882,-1.267068039681829,-1.2607934842392696,-1.2545189287967102,-1.2482443733541508,-1.2419698179115914,-1.235695262469032,-1.2294207070264729,-1.2231461515839135,-1.216871596141354,-1.2105970406987947,-1.2043224852562353,-1.198047929813676,-1.1949106520923967,-1.1917733743711167,-1.1854988189285574,-1.179224263485998,-1.1729497080434386,-1.1666751526008792,-1.1604005971583198,-1.1541260417157606,-1.1478514862732012,-1.1415769308306418,-1.1384396531093617,-1.1353023753880824,-1.129027819945523,-1.1227532645029636,-1.1164787090604045,-1.110204153617845,-1.1039295981752857,-1.0976550427327263,-1.094517765011447,-1.091380487290167,-1.0851059318476075,-1.0788313764050483,-1.072556820962489,-1.0662822655199296,-1.0631449877986494,-1.0600077100773702,-1.0537331546348108,-1.0474585991922514,-1.0411840437496922,-1.0349094883071328,-1.0317722105858533,-1.0286349328645734,-1.022360377422014,-1.0160858219794546,-1.0098112665368952,-1.006673988815616,-1.0035367110943358,-0.9972621556517766,-0.9909876002092173,-0.9878503224879372,-0.9847130447666579,-0.9784384893240985,-0.9721639338815392,-0.9658893784389798,-0.9627521007176998,-0.9596148229964204,-0.9533402675538618,-0.9470657121113024,-0.9439284343900224,-0.9407911566687431,-0.9345166012261837,-0.9282420457836243,-0.925104768062345,-0.921967490341065,-0.9156929348985057,-0.9094183794559463,-0.9062811017346663,-0.9031438240133869,-0.8968692685708276,-0.8905947131282682,-0.8874574354069888,-0.8843201576857088,-0.8780456022431495,-0.8749083245218702,-0.8717710468005901,-0.8654964913580308,-0.8592219359154715,-0.8560846581941914,-0.8529473804729121,-0.8466728250303527,-0.8435355473090727,-0.8403982695877934,-0.834123714145234,-0.830986436423954,-0.8278491587026746,-0.8215746032601153,-0.8153000478175559,-0.8121627700962766,-0.8090254923749965,-0.8027509369324373,-0.7996136592111579,-0.7964763814898779,-0.7902018260473185,-0.7870645483260392,-0.7839272706047592,-0.7776527151621998,-0.7745154374409204,-0.7713781597196404,-0.7651036042770811,-0.7619663265558018,-0.7588290488345217,-0.7525544933919623,-0.7494172156706831,-0.7462799379494031,-0.7400053825068437,-0.7368681047855643,-0.7337308270642843,-0.727456271621725,-0.7243189939004456,-0.7211817161791656,-0.7180444384578856,-0.7149071607366062,-0.7086326052940469,-0.7054953275727669,-0.7023580498514875,-0.6960834944089281,-0.6929462166876481,-0.6898089389663689,-0.6835343835238095,-0.6803971058025294,-0.6772598280812501,-0.6741225503599708,-0.6709852726386908,-0.6647107171961314,-0.661573439474852,-0.658436161753572,-0.6521616063110127,-0.6490243285897334,-0.6458870508684533,-0.6427497731471733,-0.6396124954258939,-0.6333379399833345,-0.6302006622620546,-0.6270633845407753,-0.6239261068194959,-0.6207888290982159,-0.6145142736556565,-0.6113769959343772,-0.6082397182130972,-0.6051024404918172,-0.6019651627705378,-0.5956906073279784,-0.5925533296066984,-0.5894160518854191,-0.5862787741641398,-0.5831414964428597,-0.5768669410003003,-0.5737296632790211,-0.570592385557741,-0.567455107836461,-0.5643178301151817,-0.5611805523939023,-0.5580432746726223,-0.551768719230063,-0.5486314415087836,-0.5454941637875036,-0.5423568860662236,-0.5392196083449442,-0.5329450529023849,-0.5298077751811049,-0.5266704974598255,-0.5235332197385462,-0.5203959420172661,-0.5172586642959861,-0.5141213865747069,-0.5109841088534275,-0.5078468311321475,-0.5015722756895881,-0.49843499796830876,-0.4952977202470287,-0.4921604425257487,-0.4890231648044694,-0.4858858870831901,-0.48274860936191005,-0.47647405391935066,-0.47333677619807135,-0.4701994984767913,-0.4670622207555113,-0.463924943034232,-0.4607876653129526,-0.4576503875916726,-0.45451310987039256,-0.45137583214911325,-0.44823855442783395,-0.4451012767065539,-0.4388267212639945,-0.4356894435427152,-0.4325521658214352,-0.42941488810015516,-0.42627761037887585,-0.4231403326575965,-0.42000305493631646,-0.4168657772150364,-0.4137284994937571,-0.41059122177247775,-0.4074539440511977,-0.40431666632991775,-0.4011793886086384,-0.39490483316607905,-0.391767555444799,-0.38863027772351966,-0.38549300000224035,-0.3823557222809603,-0.3792184445596803,-0.376081166838401,-0.3729438891171216,-0.3698066113958416,-0.36666933367456156,-0.36353205595328225,-0.36039477823200294,-0.3572575005107229,-0.3541202227894429,-0.3509829450681635,-0.3478456673468842,-0.3447083896256042,-0.34157111190432415,-0.33843383418304485,-0.3352965564617655,-0.33215927874048545,-0.3258847232979261,-0.3227474455766468,-0.3196101678553668,-0.31647289013408675,-0.3133356124128074,-0.3101983346915281,-0.30706105697024805,-0.303923779248968,-0.3007865015276887,-0.29764922380640935,-0.2945119460851293,-0.2913746683638493,-0.28823739064257,-0.2851001129212906,-0.28196283520001064,-0.2788255574787306,-0.27568827975745125,-0.27255100203617194,-0.2694137243148919,-0.2662764465936119,-0.2631391688723325,-0.2600018911510532,-0.2568646134297732,-0.25372733570849315,-0.25059005798721384,-0.2474527802659345,-0.24431550254465448,-0.24117822482337445,-0.2380409471020951,-0.23490366938081578,-0.23176639165953578,-0.22862911393825575,-0.2254918362169764,-0.22235455849569707,-0.21921728077441704,-0.21712576229356417,-0.21503424381271058,-0.21294272533185768,-0.20980544761057837,-0.20666816988929834,-0.2035308921680183,-0.20039361444673898,-0.19725633672545964,-0.1941190590041796,-0.19098178128289958,-0.18784450356162027,-0.18470722584034094,-0.1815699481190609,-0.17843267039778088,-0.17529539267650154,-0.1721581149552222,-0.1690208372339429,-0.16588355951266356,-0.16274628179138353,-0.1596090040701035,-0.15647172634882417,-0.15333444862754483,-0.15019717090626483,-0.1470598931849848,-0.14392261546370547,-0.14183109698285257,-0.139739578501999,-0.1376480600211461,-0.13451078229986607,-0.13137350457858676,-0.12823622685730743,-0.1250989491360274,-0.12196167141474737,-0.11882439369346803,-0.11568711597218871,-0.11254983825090868,-0.10941256052962865,-0.10627528280834932,-0.10313800508707,-0.10000072736578997,-0.09790920888493708,-0.0958176904040835,-0.09372617192323061,-0.09058889420195128,-0.08745161648067125,-0.08431433875939123,-0.0811770610381119,-0.07803978331683256,-0.07490250559555255,-0.07176522787427252,-0.06862795015299318,-0.06549067243171386,-0.06235339471043382,-0.06026187622958094,-0.05817035774872736,-0.05607883926787447,-0.05294156154659514,-0.04980428382531511,-0.04666700610403508,-0.043529728382755754,-0.040392450661476426,-0.037255172940196396,-0.03411789521891637,-0.03098061749763704,-0.028889099016784155,-0.026797580535930572,-0.024706062055077686,-0.021568784333797657,-0.018431506612518328,-0.015294228891238998,-0.012156951169958971,-0.009019673448678945,-0.005882395727399615,-0.003790877246546728,-0.0016993587656931445,0.00039215971515974213,0.0035294374364397687,0.006666715157719099,0.009803992878998429,0.012941270600278455,0.016078548321558483,0.01921582604283781,0.0213073445236907,0.023398863004544284,0.02549038148539717,0.028627659206677196,0.031764936927956525,0.03490221464923585,0.03803949237051588,0.04117677009179591,0.04431404781307524,0.04640556629392813,0.04849708477478171,0.0505886032556346,0.05372588097691462,0.05686315869819395,0.06000043641947328,0.06313771414075331,0.06627499186203334,0.06941226958331266,0.07150378806416555,0.07359530654501914,0.07568682502587203,0.07882410274715206,0.08196138046843138,0.08509865818971071,0.08823593591099074,0.09032745439184363,0.09241897287269721,0.0945104913535501,0.09764776907482943,0.10078504679610945,0.10392232451738947,0.10705960223866881,0.11019687995994813,0.11333415768122816,0.11542567616208105,0.11751719464293463,0.11960871312378753,0.12274599084506685,0.12588326856634688,0.1290205462876269,0.13215782400890624,0.13424934248975912,0.1363408609706127,0.13843237945146558,0.1415696571727456,0.14470693489402495,0.14784421261530428,0.1509814903365843,0.15307300881743718,0.15516452729829078,0.15725604577914365,0.16039332350042299,0.16353060122170301,0.16666787894298304,0.16980515666426238,0.17189667514511525,0.17398819362596885,0.17607971210682175,0.17921698982810175,0.18235426754938108,0.18549154527066042,0.18862882299194045,0.19072034147279332,0.1928118599536469,0.1949033784344998,0.19804065615577912,0.20117793387705915,0.20326945235791205,0.20536097083876562,0.20745248931961852,0.21058976704089785,0.21372704476217788,0.2168643224834579,0.22000160020473722,0.22209311868559012,0.2241846371664437,0.22627615564729658,0.2294134333685766,0.23255071108985595,0.23568798881113528,0.2388252665324153,0.2409167850132682,0.24300830349412178,0.24509982197497465,0.248237099696254,0.251374377417534,0.2534658958983869,0.2555574143792405,0.2576489328600934,0.2607862105813727,0.2639234883026527,0.26706076602393275,0.27019804374521206,0.272289562226065,0.2743810807069186,0.27647259918777145,0.2796098769090515,0.2827471546303308,0.28483867311118366,0.28693019159203725,0.2890217100728902,0.29215898779417016,0.2952962655154495,0.2984335432367288,0.30157082095800886,0.30366233943886173,0.3057538579197153,0.30784537640056825,0.31098265412184756,0.3141199318431276,0.31621145032398046,0.31830296880483405,0.3203944872856869,0.3235317650069663,0.3266690427282463,0.32980632044952635,0.33294359817080565,0.3350351166516585,0.3371266351325121,0.339218153613365,0.342355431334645,0.3454927090559244,0.34758422753677726,0.34967574601763085,0.3517672644984837,0.35490454221976375,0.35804181994104306,0.360133338421896,0.3622248569027495,0.36431637538360245,0.3674536531048825,0.3705909308261618,0.3737282085474411,0.37686548626872113,0.37895700474957406,0.3810485232304276,0.3831400417112805,0.38627731943255983,0.38941459715383986,0.39150611563469273,0.3935976341155463,0.3956891525963992,0.39882643031767856,0.4019637080389586,0.40405522651981146,0.40614674500066505,0.4082382634815179,0.4113755412027973,0.41451281892407726,0.4176500966453573,0.42078737436663666,0.42287889284748953,0.4249704113283431,0.427061929809196,0.430199207530476,0.4333364852517554,0.43542800373260826,0.43751952221346185,0.4396110406943147,0.44274831841559475,0.44588559613687406,0.44797711461772693,0.45006863309858053,0.45216015157943346,0.45529742930071343,0.4584347070219928,0.46052622550284567,0.46261774398369926,0.46470926246455213,0.46784654018583216,0.4709838179071115,0.4730753363879644,0.475166854868818,0.47725837334967086,0.4803956510709509,0.4835329287922302,0.48667020651350956,0.4898074842347896,0.49189900271564246,0.49399052119649606,0.49608203967734893,0.49921931739862824,0.5023565951199083,0.5044481136007611,0.5065396320816148,0.5086311505624677,0.511768428283747,0.514905706005027,0.5169972244858799,0.5190887429667335,0.5211802614475863,0.5243175391688657,0.5274548168901457,0.5295463353709986,0.5316378538518521,0.5337293723327051,0.5368666500539844,0.5400039277752644,0.5420954462561173,0.5441869647369709,0.5462784832178238,0.5494157609391032,0.5525530386603832,0.5556903163816632,0.5588275941029425,0.5609191125837953,0.563010631064649,0.5651021495455019,0.5682394272667819,0.5713767049880613,0.5734682234689141,0.5755597419497677,0.5776512604306205,0.5807885381519006,0.5839258158731799,0.5860173343540328,0.5881088528348863,0.5902003713157393,0.5933376490370194,0.5964749267582986,0.5985664452391515,0.6006579637200051,0.602749482200858,0.605886759922138,0.6090240376434174,0.6111155561242703,0.6132070746051231,0.615298593085976,0.6184358708072554,0.6215731485285354,0.6247104262498154,0.6278477039710947,0.6299392224519476,0.6320307409328012,0.6341222594136541,0.6372595371349341,0.6403968148562135,0.6424883333370663,0.6445798518179199,0.6466713702987728,0.6498086480200528,0.6529459257413321,0.655037444222185,0.6571289627030387,0.6592204811838915,0.6623577589051716,0.6654950366264508,0.6675865551073038,0.6696780735881573,0.6717695920690102,0.6749068697902902,0.6780441475115696,0.6811814252328489,0.6843187029541289,0.6864102214349819,0.6885017399158354,0.6905932583966883,0.6937305361179676,0.6968678138392477,0.6989593323201005,0.7010508508009541,0.703142369281807,0.7062796470030863,0.7094169247243663,0.7115084432052192,0.7135999616860729,0.7156914801669257,0.718828757888205,0.721966035609485,0.725103313330765,0.7282405910520444,0.7303321095328973,0.7324236280137509,0.7345151464946038,0.7376524242158838,0.7407897019371631,0.7428812204180161,0.7449727388988696,0.7470642573797225,0.7502015351010025,0.7533388128222819,0.7564760905435612,0.7596133682648413,0.7617048867456941,0.7637964052265477,0.7658879237074006,0.7690252014286799,0.77216247914996,0.7742539976308128,0.7763455161116664,0.7784370345925193,0.7815743123137986,0.7847115900350786,0.7878488677563587,0.790986145477638,0.7930776639584909,0.7951691824393444,0.7972607009201974,0.8003979786414774,0.8035352563627567,0.8056267748436096,0.8077182933244632,0.8098098118053161,0.8129470895265961,0.8160843672478755,0.8192216449691547,0.8223589226904348,0.8244504411712876,0.8265419596521413,0.8286334781329942,0.8317707558542735,0.8349080335755535,0.8380453112968336,0.8411825890181128,0.8432741074989657,0.8453656259798193,0.8474571444606722,0.8505944221819522,0.8537316999032316,0.8558232183840845,0.857914736864938,0.8600062553457909,0.8631435330670709,0.8662808107883503,0.8694180885096296,0.8725553662309097,0.8746468847117626,0.8767384031926161,0.878829921673469,0.8819671993947483,0.8851044771160284,0.8882417548373084,0.8913790325585877,0.894516310279867,0.897653588001147,0.8997451064819999,0.9018366249628536,0.9039281434437064,0.9070654211649858,0.9102026988862658,0.9133399766075458,0.9164772543288251,0.918568772809678,0.9206602912905316,0.9227518097713845,0.9258890874926645,0.9290263652139439,0.9321636429352231,0.9353009206565032,0.9373924391373561,0.9394839576182097,0.9415754760990626,0.9447127538203419,0.947850031541622,0.950987309262902,0.9541245869841812,0.9572618647054606,0.9603991424267406,0.9624906609075935,0.9645821793884471,0.9666736978693,0.9698109755905793,0.9729482533118593,0.9760855310331393,0.9792228087544187,0.9823600864756981,0.9854973641969781,0.9886346419182581,0.9917719196395374,0.9938634381203904,0.9959549566012439,0.9980464750820968,1.001183752803377,1.0043210305246562,1.0074583082459354,1.0105955859672155,1.0137328636884955,1.016870141409775,1.0200074191310542,1.0231446968523341,1.025236215333187,1.0273277338140407,1.0294192522948935,1.032556530016173,1.035693807737453,1.038831085458733,1.0419683631800123,1.0451056409012915,1.0482429186225717,1.0513801963438516,1.054517474065131,1.0576547517864103,1.0607920295076902,1.0628835479885432,1.0649750664693969,1.0670665849502496,1.0702038626715291,1.073341140392809,1.0764784181140892,1.0796156958353684,1.0827529735566477,1.0858902512779278,1.0890275289992077,1.0921648067204872,1.0953020844417665,1.0984393621630464,1.1015766398843265,1.1047139176056058,1.1078511953268853,1.1109884730481652,1.1141257507694453,1.1172630284907246,1.1204003062120038,1.123537583933284,1.1266748616545639,1.1298121393758433,1.1329494170971226,1.1360866948184025,1.1392239725396827,1.142361250260962,1.1454985279822414,1.1486358057035213,1.1517730834248014,1.1549103611460807,1.15804763886736,1.16118491658864,1.16432219430992,1.1674594720311995,1.1705967497524787,1.1737340274737587,1.1768713051950388,1.180008582916318,1.1831458606375975,1.1862831383588774,1.1894204160801576,1.1925576938014368,1.195694971522716,1.1988322492439962,1.2019695269652761,1.2051068046865556,1.2082440824078349,1.211381360129115,1.214518637850395,1.2176559155716742,1.2239304710142336,1.2270677487355137,1.230205026456793,1.2333423041780722,1.2364795818993524,1.2396168596206323,1.2427541373419118,1.245891415063191,1.2490286927844712,1.252165970505751,1.2553032482270303,1.2615778036695897,1.2647150813908699,1.267852359112149,1.2709896368334284,1.2741269145547085,1.2772641922759884,1.280401469997268,1.2866760254398273,1.2898133031611072,1.2929505808823865,1.296087858603666,1.2992251363249459,1.3054996917675052,1.3086369694887845,1.3117742472100646,1.3149115249313446,1.318048802652624,1.3243233580951834,1.3274606358164633,1.3305979135377426,1.333735191259022,1.336872468980302,1.3431470244228614,1.3462843021441406,1.3494215798654208,1.3556961353079802,1.3588334130292594,1.3619706907505396,1.3651079684718195,1.3682452461930987,1.3745198016356581,1.3776570793569383,1.3807943570782175,1.387068912520777,1.3902061902420568,1.3933434679633363,1.3996180234058948,1.4058925788484542,1.4090298565697343,1.4121671342910136,1.418441689733573,1.421578967454853,1.4247162451761324,1.4309908006186918,1.437265356061251,1.4404026337825304,1.4435399115038103,1.4498144669463697,1.4560890223889291,1.459226300110209,1.4623635778314885,1.468638133274048,1.4749126887166073,1.4811872441591665,1.4843245218804466,1.4874617996017259,1.4937363550442853,1.5000109104868447,1.506285465929404,1.5125600213719634,1.5188345768145226,1.525109132257082,1.5313836876996414,1.5376582431422008,1.5439327985847602,1.5502073540273196,1.5564819094698787,1.5627564649124381,1.5690310203549975,1.575305575797557,1.5815801312401163,1.5878546866826757,1.5941292421252349,1.6066783530103537,1.612952908452913,1.6192274638954725,1.631776574780591,1.6380511302231504,1.6506002411082692,1.6568747965508286,1.6694239074359472,1.681973018321066,1.7007966846487441,1.7133457955338627,1.7384440173041003,1.7823659054020158]),
            'beta3': np.array([-1.7341249137918135,-1.7092155443450079,-1.696760859621605,-1.6780788325365008,-1.665624147813098,-1.6531694630896951,-1.6469421207279935,-1.6344874360045907,-1.6282600936428893,-1.6158054089194864,-1.609578066557785,-1.6033507241960836,-1.5908960394726808,-1.5846686971109794,-1.578441354749278,-1.5722140123875765,-1.565986670025875,-1.559759327664174,-1.5535319853024725,-1.547304642940771,-1.5410773005790697,-1.5348499582173682,-1.5286226158556668,-1.5223952734939652,-1.516167931132264,-1.5099405887705626,-1.5037132464088612,-1.4974859040471598,-1.4912585616854583,-1.485031219323757,-1.4788038769620555,-1.4756902057812047,-1.472576534600354,-1.4663491922386527,-1.4601218498769513,-1.4538945075152498,-1.450780836334399,-1.4476671651535484,-1.441439822791847,-1.4352124804301456,-1.4320988092492948,-1.4289851380684442,-1.4227577957067428,-1.4165304533450414,-1.4134167821641905,-1.41030311098334,-1.4040757686216383,-1.4009620974407877,-1.3978484262599369,-1.3916210838982355,-1.385393741536534,-1.3822800703556835,-1.3791663991748326,-1.3729390568131312,-1.3698253856322806,-1.3667117144514298,-1.3604843720897284,-1.3573707009088778,-1.354257029728027,-1.3511433585471764,-1.3480296873663256,-1.3418023450046241,-1.3386886738237735,-1.3355750026429227,-1.3293476602812213,-1.3262339891003705,-1.32312031791952,-1.320006646738669,-1.3168929755578185,-1.310665633196117,-1.3075519620152662,-1.3044382908344156,-1.3013246196535648,-1.2982109484727142,-1.2919836061110128,-1.288869934930162,-1.2857562637493114,-1.2826425925684606,-1.27952892138761,-1.2733015790259086,-1.2701879078450578,-1.2670742366642072,-1.2639605654833563,-1.2608468943025057,-1.257733223121655,-1.254619551940804,-1.248392209579103,-1.2452785383982523,-1.2421648672174015,-1.239051196036551,-1.2359375248557,-1.2328238536748495,-1.2297101824939987,-1.226596511313148,-1.2234828401322972,-1.2203691689514466,-1.2172554977705958,-1.2110281554088944,-1.2079144842280436,-1.204800813047193,-1.2016871418663422,-1.1985734706854916,-1.1954597995046408,-1.1923461283237902,-1.1892324571429393,-1.1861187859620888,-1.183005114781238,-1.1798914436003873,-1.1767777724195365,-1.173664101238686,-1.170550430057835,-1.1674367588769845,-1.1643230876961337,-1.161209416515283,-1.1580957453344323,-1.1549820741535817,-1.1518684029727309,-1.1487547317918803,-1.1456410606110297,-1.1425273894301788,-1.1394137182493282,-1.1363000470684774,-1.1331863758876268,-1.130072704706776,-1.1269590335259254,-1.1238453623450746,-1.120731691164224,-1.1176180199833732,-1.1145043488025226,-1.1113906776216718,-1.1082770064408212,-1.1051633352599703,-1.1020496640791198,-1.098935992898269,-1.0958223217174183,-1.0927086505365675,-1.0895949793557167,-1.086481308174866,-1.0833676369940153,-1.0802539658131647,-1.0771402946323139,-1.0740266234514633,-1.0709129522706125,-1.0677992810897619,-1.064685609908911,-1.0615719387280604,-1.0594961579408264,-1.0574203771535928,-1.055344596366359,-1.0522309251855082,-1.0491172540046576,-1.0460035828238068,-1.0428899116429562,-1.0397762404621054,-1.0366625692812548,-1.033548898100404,-1.0304352269195534,-1.0273215557387025,-1.024207884557852,-1.022132103770618,-1.0200563229833843,-1.0179805421961505,-1.0148668710152997,-1.011753199834449,-1.0086395286535983,-1.0055258574727475,-1.0024121862918969,-0.9992985151110462,-0.9961848439301955,-0.9930711727493448,-0.990995391962111,-0.988919611174877,-0.9868438303876433,-0.9837301592067926,-0.9806164880259419,-0.9775028168450911,-0.9743891456642404,-0.9712754744833897,-0.968161803302539,-0.9650481321216883,-0.9619344609408376,-0.9598586801536039,-0.95778289936637,-0.9557071185791362,-0.9525934473982854,-0.9494797762174347,-0.946366105036584,-0.9432524338557333,-0.9401387626748826,-0.9370250914940319,-0.9349493107067981,-0.9328735299195642,-0.9307977491323305,-0.9276840779514798,-0.9245704067706291,-0.9214567355897784,-0.9183430644089277,-0.9162672836216939,-0.9141915028344599,-0.9121157220472262,-0.9090020508663755,-0.9058883796855249,-0.9027747085046742,-0.8996610373238235,-0.8975852565365898,-0.8955094757493558,-0.8934336949621221,-0.8903200237812714,-0.8872063526004207,-0.88409268141957,-0.8809790102387193,-0.8778653390578686,-0.8747516678770179,-0.872675887089784,-0.8706001063025501,-0.8685243255153164,-0.8654106543344657,-0.862296983153615,-0.8591833119727642,-0.8560696407919135,-0.8539938600046798,-0.8519180792174459,-0.8498422984302121,-0.8467286272493614,-0.8436149560685107,-0.841539175281277,-0.8394633944940431,-0.8373876137068093,-0.8342739425259585,-0.8311602713451078,-0.8280466001642571,-0.8249329289834064,-0.8228571481961727,-0.8207813674089387,-0.818705586621705,-0.8155919154408543,-0.8124782442600036,-0.8093645730791529,-0.8062509018983022,-0.8041751211110684,-0.8020993403238345,-0.8000235595366008,-0.79690988835575,-0.7937962171748993,-0.7917204363876655,-0.7896446556004316,-0.7875688748131979,-0.7844552036323472,-0.7813415324514964,-0.7782278612706457,-0.775114190089795,-0.7730384093025613,-0.7709626285153274,-0.7688868477280936,-0.7657731765472429,-0.7626595053663922,-0.7605837245791585,-0.7585079437919245,-0.7564321630046907,-0.75331849182384,-0.7502048206429893,-0.7470911494621386,-0.7439774782812879,-0.7419016974940541,-0.7398259167068202,-0.7377501359195865,-0.7346364647387358,-0.7315227935578851,-0.7294470127706513,-0.7273712319834174,-0.7252954511961837,-0.722181780015333,-0.7190681088344822,-0.7159544376536316,-0.7128407664727809,-0.7107649856855472,-0.7086892048983133,-0.7066134241110795,-0.7034997529302288,-0.7003860817493781,-0.6983103009621443,-0.6962345201749104,-0.6941587393876767,-0.691045068206826,-0.6879313970259753,-0.6858556162387415,-0.6837798354515076,-0.6817040546642739,-0.6785903834834232,-0.6754767123025724,-0.6723630411217217,-0.669249369940871,-0.6671735891536372,-0.6650978083664033,-0.6630220275791695,-0.6599083563983188,-0.6567946852174681,-0.6547189044302344,-0.6526431236430005,-0.6505673428557667,-0.647453671674916,-0.6443400004940653,-0.6422642197068316,-0.6401884389195976,-0.6381126581323638,-0.6349989869515131,-0.6318853157706624,-0.6298095349834287,-0.6277337541961948,-0.625657973408961,-0.6225443022281103,-0.6194306310472596,-0.6163169598664089,-0.6132032886855582,-0.6111275078983244,-0.6090517271110905,-0.6069759463238568,-0.603862275143006,-0.6007486039621553,-0.5986728231749215,-0.5965970423876876,-0.5945212616004539,-0.5914075904196032,-0.5882939192387525,-0.5862181384515187,-0.5841423576642848,-0.582066576877051,-0.5789529056962003,-0.5758392345153496,-0.5737634537281159,-0.571687672940882,-0.5696118921536482,-0.5664982209727975,-0.5633845497919467,-0.561308769004713,-0.5592329882174791,-0.5571572074302453,-0.5540435362493946,-0.5509298650685439,-0.5478161938876932,-0.5447025227068425,-0.5426267419196087,-0.5405509611323748,-0.5384751803451411,-0.5353615091642904,-0.5322478379834397,-0.5301720571962059,-0.5280962764089719,-0.5260204956217382,-0.5229068244408875,-0.5197931532600368,-0.517717372472803,-0.5156415916855693,-0.5135658108983355,-0.5104521397174848,-0.5073384685366341,-0.5052626877494003,-0.5031869069621664,-0.5011111261749327,-0.497997454994082,-0.4948837838132313,-0.49280800302599753,-0.4907322222387636,-0.48865644145152987,-0.4855427702706791,-0.4824290990898284,-0.4793154279089777,-0.476201756728127,-0.47412597594089323,-0.4720501951536593,-0.46997441436642556,-0.46686074318557486,-0.46374707200472415,-0.4616712912174904,-0.4595955104302565,-0.45751972964302273,-0.454406058462172,-0.4512923872813213,-0.44921660649408757,-0.4471408257068536,-0.44506504491961985,-0.44195137373876914,-0.43883770255791843,-0.4367619217706847,-0.43468614098345076,-0.432610360196217,-0.4294966890153663,-0.4263830178345156,-0.42430723704728185,-0.42223145626004793,-0.4201556754728142,-0.4170420042919635,-0.41392833311111277,-0.410814661930262,-0.4077009907494113,-0.40562520996217755,-0.40354942917494363,-0.4014736483877099,-0.3983599772068592,-0.39524630602600846,-0.3931705252387747,-0.3910947444515408,-0.38901896366430705,-0.38590529248345634,-0.38279162130260563,-0.3807158405153719,-0.37864005972813797,-0.3765642789409042,-0.3734506077600535,-0.37033693657920275,-0.36722326539835204,-0.36410959421750133,-0.3620338134302676,-0.35995803264303367,-0.3578822518557999,-0.3547685806749492,-0.3516549094940985,-0.34957912870686475,-0.34750334791963083,-0.3454275671323971,-0.3423138959515464,-0.33920022477069567,-0.3371244439834619,-0.33504866319622795,-0.3329728824089942,-0.3298592112281435,-0.3267455400472928,-0.32363186886644224,-0.32051819768559153,-0.3184424168983578,-0.31636663611112387,-0.3142908553238901,-0.3111771841430394,-0.3080635129621887,-0.30598773217495495,-0.30391195138772104,-0.3018361706004873,-0.2987224994196366,-0.29560882823878587,-0.29249515705793516,-0.2893814858770844,-0.28730570508985065,-0.28522992430261673,-0.283154143515383,-0.2800404723345323,-0.27692680115368157,-0.2748510203664478,-0.2727752395792139,-0.27069945879198015,-0.26758578761112944,-0.26447211643027874,-0.26135844524942803,-0.2582447740685773,-0.25616899328134357,-0.2540932124941096,-0.25201743170687585,-0.24890376052602517,-0.24579008934517446,-0.2437143085579407,-0.24163852777070677,-0.23956274698347302,-0.2364490758026223,-0.2333354046217716,-0.2302217334409209,-0.2271080622600702,-0.22503228147283624,-0.2229565006856027,-0.22088071989836874,-0.21776704871751804,-0.21465337753666733,-0.21153970635581662,-0.2084260351749659,-0.20635025438773197,-0.2042744736004984,-0.20219869281326447,-0.19908502163241376,-0.19597135045156305,-0.19389556966432914,-0.19181978887709555,-0.18974400808986164,-0.18663033690901093,-0.1835166657281602,-0.1804029945473095,-0.17728932336645878,-0.17521354257922486,-0.17313776179199128,-0.17106198100475736,-0.16794830982390666,-0.16483463864305592,-0.1617209674622052,-0.1586072962813545,-0.1565315154941206,-0.154455734706887,-0.1523799539196531,-0.14926628273880238,-0.14615261155795164,-0.14303894037710094,-0.13992526919625023,-0.1378494884090163,-0.13577370762178273,-0.1336979268345488,-0.1305842556536981,-0.12747058447284737,-0.12435691329199668,-0.12124324211114595,-0.11916746132391204,-0.11709168053667846,-0.11501589974944454,-0.11190222856859382,-0.10878855738774311,-0.1056748862068924,-0.10256121502604168,-0.09944754384519097,-0.09633387266434026,-0.09425809187710633,-0.09218231108987275,-0.09010653030263883,-0.08699285912178813,-0.0838791879409374,-0.0807655167600867,-0.07765184557923599,-0.07557606479200206,-0.07350028400476848,-0.07142450321753456,-0.06831083203668385,-0.06519716085583313,-0.06208348967498242,-0.05896981849413171,-0.055856147313281,-0.052742476132430285,-0.05066669534519636,-0.048590914557962786,-0.04651513377072886,-0.04340146258987815,-0.04028779140902743,-0.037174120228176726,-0.03406044904732601,-0.030946777866475646,-0.02783310668562493,-0.02575732589839101,-0.023681545111157432,-0.02160576432392351,-0.018492093143072794,-0.015378421962222083,-0.012264750781371372,-0.009151079600520659,-0.0060374084196699465,-0.002923737238819234,-0.0008479564515853106,0.0012278243356482672,0.003303605122882191,0.006417276303732903,0.009530947484583616,0.012644618665434327,0.01575828984628504,0.01887196102713575,0.021985632207986466,0.02406141299522039,0.026137193782453966,0.02821297456968789,0.031326645750538604,0.03444031693138931,0.037553988112240026,0.04066765929309074,0.04378133047394145,0.046895001654792164,0.05000867283564288,0.053122344016493586,0.05519812480372751,0.05727390559096109,0.059349686378195016,0.062463357559045724,0.06557702873989643,0.06869069992074715,0.07180437110159786,0.07491804228244857,0.07803171346329929,0.08114538464415,0.0842590558250007,0.08737272700585143,0.09048639818670214,0.09256217897393607,0.09463795976116963,0.09671374054840357,0.09982741172925427,0.10294108291010498,0.1060547540909557,0.10916842527180641,0.11228209645265712,0.11539576763350784,0.11850943881435855,0.12162310999520926,0.12473678117605998,0.12785045235691067,0.1309641235377614,0.13407779471861211,0.13615357550584603,0.1382293562930796,0.14030513708031353,0.14341880826116424,0.14653247944201495,0.14964615062286568,0.1527598218037164,0.1558734929845671,0.1589871641654178,0.1621008353462685,0.16521450652711922,0.16832817770796996,0.17144184888882066,0.17455552006967137,0.17766919125052208,0.1807828624313728,0.1838965336122235,0.18701020479307423,0.19012387597392494,0.19323754715477565,0.19635121833562635,0.19946488951647706,0.20257856069732777,0.2056922318781785,0.2088059030590292,0.21088168384626313,0.2129574646334967,0.21503324542073063,0.21814691660158134,0.22126058778243204,0.22437425896328278,0.2274879301441335,0.2306016013249842,0.2337152725058349,0.2368289436866856,0.23994261486753632,0.24305628604838703,0.24616995722923776,0.24928362841008847,0.25239729959093915,0.2555109707717899,0.2586246419526406,0.26173831313349133,0.26485198431434204,0.26796565549519274,0.27107932667604345,0.27419299785689416,0.27730666903774487,0.2804203402185956,0.2835340113994463,0.286647682580297,0.2897613537611477,0.29287502494199846,0.29598869612284917,0.2991023673036999,0.3022160384845506,0.3053297096654013,0.308443380846252,0.3115570520271027,0.3146707232079534,0.3177843943888041,0.32089806556965483,0.32712540793135625,0.330239079112207,0.3333527502930577,0.33646642147390843,0.33958009265475914,0.34269376383560984,0.34580743501646055,0.34892110619731126,0.35203477737816197,0.3551484485590127,0.35826211973986305,0.36137579092071376,0.36448946210156447,0.3676031332824152,0.3707168044632659,0.3738304756441166,0.37694414682496735,0.38005781800581806,0.38317148918666877,0.3862851603675195,0.3893988315483702,0.3956261739100716,0.3987398450909223,0.401853516271773,0.4049671874526237,0.40808085863347443,0.41119452981432514,0.41430820099517585,0.4174218721760266,0.4205355433568773,0.423649214537728,0.42676288571857873,0.42987655689942944,0.43299022808028015,0.43921757044198156,0.44233124162283227,0.445444912803683,0.4485585839845337,0.4516722551653844,0.45478592634623516,0.45789959752708587,0.4610132687079366,0.4641269398887873,0.467240611069638,0.4703542822504887,0.4765816246121901,0.4796952957930408,0.48280896697389153,0.48592263815474224,0.48903630933559294,0.4921499805164437,0.4952636516972944,0.5014909940589958,0.5046046652398465,0.5077183364206972,0.510832007601548,0.5139456787823987,0.5170593499632494,0.5201730211441001,0.5232866923249508,0.5264003635058015,0.532627705867503,0.5357413770483537,0.5388550482292044,0.5419687194100551,0.5450823905909058,0.5513097329526072,0.5544234041334579,0.5575370753143086,0.5606507464951593,0.56376441767601,0.5668780888568608,0.5699917600377115,0.5762191023994129,0.5793327735802636,0.5824464447611143,0.585560115941965,0.5886737871228158,0.5949011294845172,0.5980148006653679,0.6011284718462186,0.6042421430270694,0.6073558142079201,0.6135831565696215,0.6166968277504722,0.6198104989313229,0.6229241701121736,0.6260378412930243,0.6322651836547257,0.6353788548355764,0.6384925260164271,0.6416061971972778,0.6447198683781286,0.65094721073983,0.6540608819206807,0.6571745531015314,0.6634018954632328,0.6665155666440836,0.6696292378249343,0.672742909005785,0.6758565801866357,0.6820839225483372,0.6851975937291879,0.6883112649100386,0.69453860727174,0.6976522784525907,0.7007659496334414,0.7069932919951428,0.7101069631759935,0.7132206343568442,0.716334305537695,0.7194479767185457,0.7256753190802471,0.7287889902610978,0.7319026614419485,0.7381300038036499,0.7412436749845007,0.7443573461653514,0.7505846885270525,0.7536983597079032,0.7568120308887539,0.7630393732504553,0.766153044431306,0.7692667156121568,0.7754940579738582,0.7786077291547089,0.7817214003355596,0.787948742697261,0.7910624138781117,0.7941760850589624,0.8004034274206638,0.8035170986015145,0.8066307697823653,0.8128581121440667,0.8190854545057681,0.8221991256866188,0.8253127968674695,0.831540139229171,0.8346538104100217,0.8377674815908724,0.8439948239525739,0.8471084951334246,0.8502221663142753,0.8564495086759767,0.8626768510376781,0.8657905222185288,0.8689041933993795,0.8751315357610809,0.8782452069419316,0.8813588781227824,0.8875862204844838,0.8938135628461852,0.8969272340270359,0.9000409052078866,0.9062682475695881,0.9124955899312895,0.9156092611121402,0.918722932292991,0.9249502746546924,0.9311776170163938,0.9342912881972445,0.9374049593780952,0.9436323017397966,0.949859644101498,0.9529733152823487,0.9560869864631995,0.9623143288249009,0.9685416711866023,0.9747690135483037,0.9778826847291544,0.9809963559100052,0.9872236982717066,0.9934510406334081,0.9965647118142588,0.9996783829951095,1.0059057253568109,1.0121330677185123,1.0183604100802137,1.0214740812610645,1.0245877524419151,1.0308150948036165,1.037042437165318,1.0432697795270194,1.0494971218887208,1.0526107930695716,1.0557244642504222,1.0619518066121236,1.068179148973825,1.0744064913355265,1.0806338336972279,1.0837475048780787,1.0868611760589293,1.0930885184206307,1.0993158607823323,1.1055432031440338,1.1117705455057352,1.1179978878674366,1.124225230229138,1.1273389014099886,1.1304525725908394,1.1366799149525404,1.1429072573142418,1.1491345996759432,1.1553619420376446,1.161589284399346,1.1678166267610475,1.1740439691227489,1.1802713114844505,1.1833849826653011,1.186498653846152,1.1927259962078534,1.1989533385695548,1.2051806809312562,1.2114080232929576,1.217635365654659,1.2238627080163604,1.2300900503780619,1.2363173927397633,1.2425447351014647,1.248772077463166,1.2549994198248675,1.261226762186569,1.2674541045482703,1.2736814469099718,1.2799087892716732,1.2861361316333746,1.292363473995076,1.2985908163567774,1.3048181587184788,1.3110455010801803,1.3172728434418817,1.323500185803583,1.3297275281652845,1.3359548705269861,1.348409555250389,1.3546368976120904,1.3608642399737918,1.3670915823354932,1.3733189246971946,1.379546267058896,1.3857736094205975,1.3920009517822989,1.3982282941440003,1.4106829788674031,1.4169103212291045,1.423137663590806,1.4293650059525074,1.4355923483142088,1.4418196906759102,1.454274375399313,1.4605017177610145,1.4667290601227159,1.4729564024844173,1.4854110872078203,1.4916384295695218,1.4978657719312232,1.5040931142929246,1.5165477990163274,1.5227751413780288,1.5290024837397302,1.541457168463133,1.5476845108248345,1.553911853186536,1.5663665379099387,1.5725938802716402,1.5788212226333416,1.5912759073567444,1.5975032497184458,1.6037305920801472,1.61618527680355,1.6224126191652515,1.6348673038886543,1.641094646250356,1.6535493309737588,1.6597766733354602,1.672231358058863,1.6784587004205644,1.6909133851439673,1.6971407275056687,1.7095954122290715,1.7220500969524737,1.728277439314175,1.740732124037578,1.7531868087609808,1.7594141511226822,1.771868835846085,1.7843235205694878,1.7967782052928907,1.803005547654592,1.8154602323779951,1.827914917101398,1.8403696018248008,1.8528242865482036,1.8652789712716065,1.8777336559950093,1.8901883407184121,1.902643025441815,1.9150977101652178,1.9275523948886206,1.9400070796120235,1.9524617643354263,1.9649164490588293,1.9773711337822322,1.9960531608673364,2.008507845590739,2.020962530314142,2.0396445573992463,2.052099242122649,2.0707812692077536,2.0832359539311565,2.1019179810162605,2.120600008101365,2.133054692824768,2.151736719909872,2.1704187469949763,2.1891007740800803,2.2077828011651848,2.2264648282502892,2.251374197697095,2.270056224782199,2.2949655942290046,2.313647621314109,2.3385569907609147,2.3634663602077204,2.388375729654526,2.4132850991013317,2.444421810909839,2.475558522718346,2.5066952345268523,2.5378319463353596,2.575196000505568,2.6125600546757766,2.649924108845985,2.693515505377895,2.7433342442715065,2.7993803255268195,2.8616537491438336,2.9363818574842506,3.023564650548071,3.1356568130586964,3.316249741548037,4.437171366654293]),
            'beta4': np.array([-1.1732524992004538,-1.1714972262877759,-1.1697419533750981,-1.1679866804624204,-1.1662314075497424,-1.1648271892196003,-1.163422970889458,-1.1620187525593157,-1.1606145342291736,-1.1592103158990312,-1.1578060975688889,-1.1564018792387467,-1.1549976609086046,-1.1535934425784622,-1.15218922424832,-1.1507850059181777,-1.1493807875880355,-1.1479765692578932,-1.146572350927751,-1.1451681325976086,-1.1437639142674665,-1.1423596959373243,-1.140955477607182,-1.1395512592770396,-1.1381470409468974,-1.136742822616755,-1.135338604286613,-1.1339343859564708,-1.1325301676263284,-1.1311259492961863,-1.129721730966044,-1.1283175126359017,-1.1269132943057594,-1.1255090759756172,-1.1241048576454749,-1.1227006393153327,-1.1212964209851906,-1.1198922026550482,-1.1184879843249058,-1.1170837659947637,-1.1156795476646213,-1.1142753293344791,-1.112871111004337,-1.1114668926741946,-1.1100626743440523,-1.1083074014313745,-1.1065521285186968,-1.1047968556060188,-1.103041582693341,-1.1016373643631987,-1.1002331460330568,-1.0988289277029144,-1.097424709372772,-1.0960204910426299,-1.0946162727124877,-1.0932120543823454,-1.0918078360522032,-1.0904036177220608,-1.0889993993919185,-1.0875951810617766,-1.0861909627316342,-1.0847867444014918,-1.0833825260713497,-1.0819783077412073,-1.0805740894110651,-1.079169871080923,-1.0777656527507806,-1.0763614344206383,-1.074957216090496,-1.0732019431778181,-1.0714466702651406,-1.0696913973524627,-1.067936124439785,-1.0665319061096428,-1.0651276877795004,-1.063723469449358,-1.0623192511192159,-1.0609150327890737,-1.0595108144589314,-1.0581065961287892,-1.0567023777986468,-1.0552981594685045,-1.0538939411383625,-1.0521386682256844,-1.0503833953130068,-1.048628122400329,-1.0468728494876511,-1.045468631157509,-1.0440644128273666,-1.0426601944972242,-1.041255976167082,-1.03985175783694,-1.0384475395067976,-1.0370433211766554,-1.035639102846513,-1.0342348845163707,-1.0328306661862288,-1.0310753932735508,-1.029320120360873,-1.0275648474481953,-1.0258095745355174,-1.0244053562053752,-1.0230011378752328,-1.0215969195450905,-1.0201927012149483,-1.0187884828848062,-1.0170332099721284,-1.0152779370594505,-1.0135226641467727,-1.011767391234095,-1.0103631729039526,-1.0089589545738102,-1.007554736243668,-1.0061505179135257,-1.0047462995833836,-1.0029910266707058,-1.001235753758028,-0.9994804808453501,-0.9977252079326724,-0.9963209896025301,-0.9949167712723878,-0.9935125529422455,-0.9921083346121033,-0.9907041162819611,-0.9889488433692832,-0.9871935704566055,-0.9854382975439276,-0.9836830246312498,-0.9822788063011075,-0.9808745879709653,-0.9794703696408231,-0.9780661513106809,-0.9766619329805386,-0.9749066600678608,-0.9731513871551829,-0.9713961142425052,-0.9696408413298273,-0.968236622999685,-0.9668324046695428,-0.9654281863394006,-0.9640239680092584,-0.962619749679116,-0.9608644767664383,-0.9591092038537604,-0.9573539309410826,-0.9555986580284048,-0.9541944396982625,-0.9527902213681202,-0.9513860030379782,-0.9499817847078358,-0.9485775663776935,-0.9468222934650157,-0.9450670205523379,-0.9433117476396601,-0.9415564747269822,-0.9398012018143045,-0.9380459289016266,-0.9362906559889488,-0.934535383076271,-0.9331311647461287,-0.9317269464159864,-0.9303227280858444,-0.928918509755702,-0.9275142914255597,-0.9257590185128819,-0.9240037456002042,-0.9222484726875263,-0.9204931997748484,-0.9187379268621707,-0.9169826539494929,-0.915227381036815,-0.9134721081241373,-0.9120678897939951,-0.9106636714638529,-0.9092594531337106,-0.9078552348035682,-0.906451016473426,-0.9046957435607481,-0.9029404706480704,-0.9011851977353925,-0.8994299248227147,-0.8976746519100369,-0.8959193789973591,-0.8941641060846812,-0.8924088331720035,-0.8906535602593256,-0.8888982873466478,-0.88714301443397,-0.8853877415212922,-0.8836324686086143,-0.8818771956959366,-0.8801219227832587,-0.8783666498705809,-0.8769624315404387,-0.8755582132102965,-0.8741539948801542,-0.872749776550012,-0.8713455582198697,-0.869590285307192,-0.8678350123945141,-0.8660797394818363,-0.8643244665691585,-0.8625691936564807,-0.8608139207438028,-0.8590586478311251,-0.8573033749184472,-0.8555481020057694,-0.8537928290930916,-0.8520375561804138,-0.8502822832677359,-0.8485270103550582,-0.8467717374423803,-0.8450164645297025,-0.8432611916170247,-0.8415059187043469,-0.839750645791669,-0.8379953728789913,-0.8362400999663134,-0.8348358816361713,-0.8334316633060289,-0.8320274449758867,-0.8306232266457444,-0.8292190083156021,-0.8274637354029244,-0.8257084624902465,-0.8239531895775687,-0.822197916664891,-0.8204426437522131,-0.8186873708395352,-0.8169320979268576,-0.8151768250141798,-0.8134215521015019,-0.8116662791888242,-0.8099110062761463,-0.8081557333634685,-0.8064004604507906,-0.8046451875381129,-0.802889914625435,-0.8011346417127572,-0.7993793688000794,-0.7976240958874016,-0.7958688229747237,-0.794113550062046,-0.7923582771493681,-0.7906030042366903,-0.7888477313240125,-0.7870924584113347,-0.7853371854986568,-0.7835819125859791,-0.7818266396733012,-0.7800713667606234,-0.7783160938479456,-0.7765608209352678,-0.7748055480225899,-0.7730502751099122,-0.7712950021972343,-0.7695397292845565,-0.7677844563718788,-0.7660291834592009,-0.764273910546523,-0.7625186376338453,-0.7607633647211675,-0.7590080918084896,-0.7566677279249193,-0.7543273640413487,-0.7519870001577784,-0.7502317272451006,-0.7484764543324227,-0.746721181419745,-0.7449659085070671,-0.7432106355943893,-0.7414553626817115,-0.7397000897690337,-0.7379448168563558,-0.7361895439436781,-0.7344342710310002,-0.7326789981183224,-0.7309237252056446,-0.7291684522929668,-0.7274131793802889,-0.7256579064676112,-0.7239026335549333,-0.7221473606422555,-0.7203920877295777,-0.7186368148168999,-0.716881541904222,-0.7151262689915443,-0.7133709960788664,-0.7116157231661886,-0.7098604502535109,-0.7075200863699403,-0.70517972248637,-0.7028393586027996,-0.7010840856901217,-0.699328812777444,-0.6975735398647661,-0.6958182669520883,-0.6940629940394105,-0.6923077211267327,-0.6905524482140548,-0.6887971753013771,-0.6870419023886992,-0.6852866294760214,-0.6835313565633436,-0.6817760836506658,-0.6794357197670954,-0.677095355883525,-0.6747549919999546,-0.6729997190872767,-0.671244446174599,-0.6694891732619211,-0.6677339003492433,-0.6659786274365656,-0.6642233545238877,-0.6624680816112098,-0.6607128086985321,-0.6589575357858543,-0.6572022628731764,-0.6554469899604987,-0.6536917170478208,-0.6513513531642504,-0.64901098928068,-0.6466706253971095,-0.6449153524844318,-0.6431600795717539,-0.6414048066590761,-0.6396495337463983,-0.6373091698628278,-0.6349688059792575,-0.632628442095687,-0.6308731691830092,-0.6291178962703314,-0.6273626233576536,-0.6256073504449757,-0.623852077532298,-0.6220968046196201,-0.6203415317069423,-0.6185862587942645,-0.616245894910694,-0.6139055310271236,-0.6115651671435532,-0.6098098942308754,-0.6080546213181977,-0.6062993484055198,-0.604544075492842,-0.6022037116092716,-0.5998633477257012,-0.5975229838421308,-0.5957677109294529,-0.5940124380167751,-0.5922571651040973,-0.5905018921914195,-0.588161528307849,-0.5858211644242787,-0.5834808005407082,-0.5817255276280304,-0.5799702547153526,-0.5782149818026747,-0.576459708889997,-0.5741193450064266,-0.5717789811228561,-0.5694386172392858,-0.5676833443266079,-0.5659280714139301,-0.5641727985012523,-0.5624175255885745,-0.5600771617050041,-0.5577367978214337,-0.5553964339378632,-0.5536411610251855,-0.5518858881125076,-0.5501306151998298,-0.548375342287152,-0.5460349784035815,-0.5436946145200112,-0.5413542506364407,-0.5395989777237629,-0.5378437048110851,-0.5360884318984073,-0.5343331589857294,-0.531992795102159,-0.5296524312185886,-0.5273120673350182,-0.5255567944223404,-0.5238015215096625,-0.5220462485969848,-0.5202909756843069,-0.5179506118007364,-0.5156102479171661,-0.5132698840335956,-0.5109295201500252,-0.5085891562664548,-0.5062487923828844,-0.5044935194702066,-0.5027382465575287,-0.500982973644851,-0.49922770073217315,-0.4968873368486027,-0.49454697296503236,-0.49220660908146185,-0.4898662451978914,-0.48752588131432106,-0.4851855174307506,-0.4834302445180728,-0.48167497160539496,-0.47991969869271717,-0.47816442578003937,-0.4758240618964689,-0.4734836980128985,-0.4711433341293281,-0.4688029702457576,-0.4664626063621873,-0.46412224247861683,-0.4617818785950465,-0.45944151471147604,-0.45710115082790564,-0.45534587791522785,-0.45359060500255005,-0.4518353320898722,-0.4500800591771944,-0.44773969529362395,-0.4453993314100536,-0.44305896752648316,-0.4407186036429127,-0.4383782397593423,-0.43603787587577186,-0.4336975119922014,-0.43135714810863107,-0.4290167842250606,-0.42667642034149017,-0.42433605645791983,-0.4219956925743494,-0.4202404196616715,-0.41848514674899373,-0.41672987383631593,-0.4149746009236381,-0.41263423704006763,-0.4102938731564973,-0.40795350927292684,-0.4056131453893564,-0.40327278150578605,-0.4009324176222156,-0.3985920537386451,-0.39625168985507475,-0.3939113259715043,-0.39157096208793385,-0.3892305982043635,-0.38689023432079306,-0.3845498704372226,-0.3822095065536522,-0.37986914267008176,-0.3775287787865113,-0.37518841490294097,-0.3728480510193705,-0.37050768713580007,-0.36816732325222973,-0.3658269593686593,-0.3634865954850888,-0.36114623160151843,-0.358805867717948,-0.3570505948052702,-0.3552953218925924,-0.35354004897991453,-0.35178477606723674,-0.3494444121836664,-0.34710404830009595,-0.34476368441652555,-0.3424233205329551,-0.34008295664938476,-0.3377425927658143,-0.33540222888224386,-0.3330618649986735,-0.33072150111510307,-0.3283811372315326,-0.3260407733479622,-0.32370040946439177,-0.3213600455808213,-0.319019681697251,-0.3166793178136805,-0.3143389539301101,-0.31199859004653974,-0.3096582261629693,-0.30614768033761364,-0.302637134512258,-0.30029677062868754,-0.2979564067451172,-0.29561604286154675,-0.2932756789779764,-0.29093531509440584,-0.28859495121083545,-0.2862545873272651,-0.28391422344369455,-0.2815738595601242,-0.27923349567655387,-0.2768931317929833,-0.27455276790941296,-0.27221240402584257,-0.26987204014227206,-0.26753167625870167,-0.2651913123751313,-0.26285094849156077,-0.2605105846079904,-0.2581702207244201,-0.2558298568408495,-0.2534894929572792,-0.2511491290737088,-0.24880876519013825,-0.2464684013065679,-0.24295785548121226,-0.23944730965585664,-0.23710694577228628,-0.23476658188871574,-0.23242621800514537,-0.23008585412157503,-0.22774549023800447,-0.2254051263544341,-0.22306476247086376,-0.2207243985872932,-0.21838403470372286,-0.2160436708201525,-0.21370330693658193,-0.2113629430530116,-0.20785239722765597,-0.20434185140230032,-0.20200148751872998,-0.19966112363515942,-0.19732075975158905,-0.1949803958680187,-0.19264003198444815,-0.1902996681008778,-0.18795930421730744,-0.1856189403337371,-0.18327857645016674,-0.17976803062481111,-0.17625748479945547,-0.17391712091588513,-0.17157675703231456,-0.16923639314874422,-0.16689602926517386,-0.1645556653816033,-0.16221530149803295,-0.1587047556726773,-0.15519420984732168,-0.15285384596375134,-0.15051348208018078,-0.14817311819661041,-0.14583275431304007,-0.1434923904294695,-0.14115202654589917,-0.13764148072054352,-0.1341309348951879,-0.13179057101161754,-0.129450207128047,-0.12710984324447663,-0.12476947936090628,-0.12242911547733573,-0.12008875159376538,-0.11657820576840974,-0.11306765994305412,-0.11072729605948375,-0.1083869321759132,-0.10604656829234285,-0.10253602246698722,-0.0990254766416316,-0.09668511275806124,-0.09434474887449068,-0.09200438499092033,-0.08849383916556469,-0.08498329334020907,-0.08264292945663872,-0.08030256557306815,-0.0779622016894978,-0.07562183780592745,-0.0732814739223569,-0.07094111003878655,-0.06743056421343091,-0.06392001838807528,-0.06157965450450492,-0.05923929062093437,-0.05689892673736402,-0.053388380912008385,-0.04987783508665276,-0.0475374712030824,-0.04519710731951185,-0.042856743435941494,-0.039346197610585866,-0.03583565178523023,-0.03349528790165988,-0.031154924018089326,-0.02881456013451897,-0.02530401430916334,-0.02179346848380771,-0.018282922658452078,-0.014772376833096446,-0.01243201294952609,-0.010091649065955539,-0.0077512851823851835,-0.004240739357029552,-0.0007301935316739213,0.0016101703518964345,0.003950534235466985,0.00629089811903734,0.009801443944392972,0.013311989769748603,0.016822535595104233,0.020333081420459864,0.02267344530403022,0.02501380918760077,0.027354173071171127,0.030864718896526564,0.034375264721882196,0.03788581054723782,0.04139635637259346,0.04373672025616381,0.04607708413973436,0.04841744802330472,0.05192799384866035,0.055438539674015984,0.05894908549937161,0.06245963132472724,0.0647999952082976,0.06714035909186815,0.0694807229754385,0.07299126880079414,0.07650181462614977,0.0800123604515054,0.08352290627686103,0.08586327016043138,0.08820363404400193,0.0905439979275723,0.09405454375292792,0.09756508957828355,0.10107563540363919,0.10458618122899481,0.10809672705435044,0.11160727287970608,0.11394763676327643,0.11628800064684698,0.11862836453041734,0.12213891035577297,0.1256494561811286,0.12916000200648423,0.13267054783183987,0.1361810936571955,0.13969163948255112,0.14320218530790677,0.1467127311332624,0.150223276958618,0.15373382278397366,0.156074186667544,0.15841455055111456,0.16075491443468493,0.16426546026004055,0.16777600608539617,0.17128655191075182,0.17479709773610744,0.17830764356146306,0.1818181893868187,0.18532873521217433,0.18883928103752995,0.1923498268628856,0.19586037268824122,0.19937091851359687,0.2028814643389525,0.2063920101643081,0.20990255598966376,0.21341310181501938,0.216923647640375,0.21926401152394537,0.22160437540751593,0.22394473929108627,0.2274552851164419,0.23096583094179754,0.23447637676715316,0.2379869225925088,0.24149746841786443,0.24500801424322005,0.2485185600685757,0.2520291058939313,0.25553965171928694,0.25905019754464237,0.262560743369998,0.26607128919535367,0.26958183502070926,0.2730923808460649,0.27660292667142056,0.28011347249677615,0.2836240183221318,0.28713456414748745,0.29064510997284304,0.2941556557981987,0.29766620162355434,0.30117674744891,0.3046872932742656,0.30819783909962123,0.31521893075033247,0.3187294765756881,0.32224002240104377,0.32575056822639936,0.329261114051755,0.33277165987711066,0.33628220570246625,0.3397927515278219,0.34330329735317755,0.34681384317853314,0.3503243890038888,0.35383493482924444,0.35734548065460003,0.3608560264799557,0.36436657230531133,0.3678771181306669,0.3713876639560226,0.37840875560673387,0.38191930143208946,0.3854298472574451,0.38894039308280076,0.39245093890815635,0.395961484733512,0.39947203055886765,0.40298257638422325,0.4064931222095789,0.41000366803493454,0.41351421386029014,0.42053530551100143,0.424045851336357,0.4275563971617127,0.4310669429870683,0.4345774888124239,0.43808803463777957,0.4415985804631352,0.44861967211384646,0.4521302179392021,0.45564076376455775,0.45915130958991335,0.462661855415269,0.46617240124062465,0.46968294706598024,0.4767040387166913,0.48021458454204696,0.48372513036740256,0.4872356761927582,0.49074622201811385,0.4977673136688251,0.5012778594941807,0.5047884053195364,0.508298951144892,0.5118094969702476,0.5188305886209589,0.5223411344463145,0.5258516802716702,0.5293622260970258,0.5328727719223815,0.5398938635730927,0.5434044093984484,0.546914955223804,0.5504255010491595,0.5539360468745153,0.5609571385252264,0.5644676843505821,0.5679782301759377,0.574999321826649,0.5785098676520046,0.5820204134773602,0.5855309593027159,0.5890415051280715,0.5960625967787828,0.5995731426041384,0.603083688429494,0.6101047800802053,0.6136153259055609,0.6171258717309166,0.6241469633816278,0.6276575092069835,0.6311680550323391,0.6381891466830504,0.641699692508406,0.6452102383337616,0.6522313299844729,0.6557418758098285,0.6592524216351842,0.6662735132858953,0.669784059111251,0.6732946049366066,0.6803156965873179,0.6838262424126735,0.6873367882380291,0.6943578798887404,0.6978684257140961,0.7013789715394517,0.708400063190163,0.7119106090155186,0.7154211548408742,0.7224422464915855,0.7294633381422968,0.7329738839676524,0.736484429793008,0.7435055214437193,0.7470160672690749,0.7505266130944306,0.7575477047451418,0.7645687963958531,0.7680793422212087,0.7715898880465644,0.7786109796972756,0.7856320713479868,0.7891426171733424,0.7926531629986981,0.7996742546494093,0.8066953463001203,0.8102058921254759,0.8137164379508315,0.8207375296015428,0.8277586212522541,0.8312691670776097,0.8347797129029653,0.8418008045536766,0.8488218962043879,0.8523324420297435,0.855842987855099,0.8628640795058103,0.8698851711565216,0.8769062628072328,0.8804168086325885,0.8839273544579441,0.8909484461086554,0.8979695377593666,0.9049906294100779,0.9085011752354335,0.9120117210607892,0.9190328127115004,0.9260539043622117,0.933074996012923,0.9400960876636343,0.9436066334889899,0.9471171793143455,0.9541382709650568,0.9611593626157681,0.9681804542664793,0.9752015459171905,0.9822226375679018,0.9857331833932574,0.989243729218613,0.9962648208693243,1.0032859125200355,1.010307004170747,1.0173280958214581,1.0243491874721693,1.0313702791228807,1.0348808249482362,1.038391370773592,1.045412462424303,1.0524335540750145,1.0594546457257257,1.0664757373764369,1.0734968290271483,1.0805179206778595,1.0875390123285706,1.094560103979282,1.1015811956299932,1.1086022872807044,1.1156233789314158,1.122644470582127,1.1296655622328382,1.1366866538835496,1.1437077455342608,1.150728837184972,1.1577499288356834,1.1647710204863946,1.171792112137106,1.1788132037878172,1.1858342954385284,1.1928553870892398,1.199876478739951,1.2068975703906621,1.2139186620413736,1.2209397536920847,1.227960845342796,1.2349819369935073,1.242003028644218,1.2490241202949295,1.2560452119456407,1.2630663035963519,1.2771084868977745,1.2841295785484856,1.291150670199197,1.2981717618499082,1.3051928535006194,1.3122139451513308,1.319235036802042,1.3332772201034646,1.3402983117541758,1.347319403404887,1.3543404950555984,1.3613615867063096,1.3754037700077322,1.3824248616584434,1.3894459533091545,1.396467044959866,1.4034881366105771,1.4175303199119997,1.424551411562711,1.431572503213422,1.4456146865148447,1.452635778165556,1.4596568698162673,1.4666779614669785,1.480720144768401,1.4877412364191123,1.5017834197205349,1.508804511371246,1.5158256030219572,1.5298677863233798,1.536888877974091,1.5439099696248024,1.5579521529262248,1.5649732445769362,1.5790154278783588,1.58603651952907,1.6000787028304926,1.6070997944812038,1.6211419777826264,1.6281630694333376,1.6422052527347601,1.6492263443854713,1.663268527686894,1.6773107109883163,1.6843318026390273,1.6983739859404499,1.7124161692418722,1.7194372608925836,1.733479444194006,1.7475216274954286,1.7545427191461398,1.7685849024475626,1.7826270857489852,1.7966692690504076,1.803690360701119,1.8177325440025414,1.831774727303964,1.8458169106053866,1.859859093906809,1.8739012772082315,1.8879434605096541,1.9019856438110765,1.916027827112499,1.9300700104139217,1.944112193715344,1.9581543770167666,1.9721965603181892,1.9862387436196116,2.0073020185717456,2.021344201873168,2.0353863851745904,2.056449660126724,2.070491843428147,2.0845340267295693,2.105597301681703,2.119639484983125,2.140702759935259,2.154744943236681,2.175808218188815,2.1968714931409488,2.2179347680930825,2.231976951394505,2.2530402263466387,2.2741035012987725,2.2951667762509063,2.31623005120304,2.3443144178058852,2.365377692758019,2.386440967710153,2.414525334312998,2.4355886092651318,2.463672975867977,2.4917573424708217,2.5128206174229555,2.5409049840258007,2.576010442279357,2.604094808882202,2.632179175485047,2.6672846337386034,2.7023900919921595,2.737495550245716,2.7726010084992723,2.814727558403539,2.8568541083078065,2.898980658212074,2.948128299767053,2.997275941322032,3.053444674527722,3.109613407733412,3.1728032325898132,3.243014149096926,3.32024615725475,3.4115203487139962,3.516836723474665,3.6502374648381792,3.8187436644552486,4.085545147182277,5.840818059860091]),
            'beta5': np.array([-4.15610125279909,-3.8921543211021543,-3.7138117996853066,-3.5854051842651757,-3.4783996714150667,-3.3856615602783053,-3.300057149998218,-3.2287201414314786,-3.164516833721413,-3.1074472268680218,-3.0503776200146304,-3.000441714017913,-2.9576395088778695,-2.907703602881152,-2.864901397741108,-2.8292328934577387,-2.7935643891743687,-2.750762184034325,-2.7222273806076296,-2.6865588763242596,-2.65089037204089,-2.622355568614194,-2.593820765187499,-2.5652859617608033,-2.5367511583341074,-2.508216354907412,-2.4868152523373896,-2.458280448910694,-2.4368793463406724,-2.4083445429139765,-2.3869434403439547,-2.365542337773933,-2.344141235203911,-2.3227401326338892,-2.3013390300638674,-2.2799379274938456,-2.258536824923824,-2.237135722353802,-2.2228683206404543,-2.2014672180704324,-2.1800661155004106,-2.1657987137870625,-2.1443976112170406,-2.130130209503693,-2.108729106933671,-2.0944617052203234,-2.080194303506975,-2.0587932009369534,-2.0445257992236057,-2.030258397510258,-2.0159909957969098,-2.001723594083562,-1.987456192370214,-1.9660550898001923,-1.9517876880868446,-1.9375202863734966,-1.9232528846601495,-1.9089854829468016,-1.9018517820901277,-1.8875843803767798,-1.8733169786634318,-1.859049576950084,-1.8447821752367362,-1.8305147735233882,-1.8162473718100405,-1.8091136709533664,-1.7948462692400187,-1.7805788675266707,-1.7663114658133228,-1.759177764956649,-1.744910363243301,-1.7306429615299532,-1.7235092606732791,-1.7092418589599314,-1.7021081581032573,-1.6878407563899096,-1.6735733546765617,-1.6664396538198878,-1.6521722521065398,-1.645038551249866,-1.630771149536518,-1.6236374486798442,-1.6093700469664962,-1.6022363461098224,-1.5951026452531483,-1.5808352435398005,-1.5737015426831265,-1.5594341409697787,-1.5523004401131046,-1.5451667392564308,-1.5308993375430828,-1.523765636686409,-1.509498234973061,-1.5023645341163872,-1.495230833259713,-1.4809634315463653,-1.4738297306896913,-1.4666960298330174,-1.4595623289763435,-1.4452949272629956,-1.4381612264063217,-1.4310275255496476,-1.4238938246929738,-1.4096264229796258,-1.402492722122952,-1.395359021266278,-1.388225320409604,-1.3810916195529301,-1.3668242178395822,-1.3596905169829083,-1.3525568161262345,-1.3454231152695604,-1.3382894144128865,-1.3311557135562126,-1.3168883118428647,-1.3097546109861908,-1.3026209101295168,-1.2954872092728429,-1.288353508416169,-1.281219807559495,-1.274086106702821,-1.2669524058461472,-1.2598187049894731,-1.2526850041327993,-1.2455513032761254,-1.2384176024194513,-1.2241502007061036,-1.2170164998494295,-1.2098827989927556,-1.2027490981360818,-1.1956153972794077,-1.1884816964227338,-1.18134799556606,-1.1742142947093859,-1.167080593852712,-1.1599468929960381,-1.152813192139364,-1.1456794912826902,-1.1385457904260163,-1.1314120895693422,-1.1242783887126684,-1.120711538284331,-1.1171446878559945,-1.1100109869993204,-1.1028772861426466,-1.0957435852859727,-1.0886098844292986,-1.0814761835726248,-1.074342482715951,-1.0672087818592768,-1.060075081002603,-1.0529413801459289,-1.045807679289255,-1.0386739784325818,-1.0351071280042452,-1.031540277575908,-1.024406576719234,-1.01727287586256,-1.0101391750058861,-1.0030054741492123,-0.9958717732925383,-0.9887380724358643,-0.9851712220075269,-0.9816043715791903,-0.9744706707225165,-0.9673369698658425,-0.9602032690091685,-0.9530695681524947,-0.9495027177241581,-0.9459358672958207,-0.9388021664391467,-0.9316684655824728,-0.9245347647257989,-0.9174010638691249,-0.9138342134407875,-0.910267363012451,-0.9031336621557771,-0.8959999612991031,-0.8888662604424292,-0.8852994100140918,-0.8817325595857552,-0.8745988587290813,-0.8674651578724074,-0.8638983074440708,-0.8603314570157334,-0.8531977561590595,-0.8460640553023855,-0.8389303544457116,-0.835363504017375,-0.8317966535890376,-0.8246629527323637,-0.8175292518756898,-0.8139624014473524,-0.8103955510190158,-0.8032618501623419,-0.7996949997340046,-0.796128149305668,-0.788994448448994,-0.78186074759232,-0.7782938971639836,-0.7747270467356462,-0.7675933458789722,-0.7604596450222982,-0.7568927945939609,-0.7533259441656244,-0.7461922433089504,-0.742625392880613,-0.7390585424522764,-0.7319248415956026,-0.7247911407389286,-0.721224290310592,-0.7176574398822546,-0.7105237390255807,-0.7069568885972441,-0.7033900381689068,-0.6962563373122328,-0.6926894868838962,-0.6891226364555589,-0.681988935598885,-0.6784220851705484,-0.674855234742211,-0.6677215338855371,-0.6641546834572005,-0.6605878330288631,-0.6534541321721892,-0.6498872817438526,-0.6463204313155153,-0.6391867304588413,-0.6356198800305047,-0.6320530296021674,-0.6249193287454934,-0.6213524783171569,-0.6177856278888195,-0.6106519270321455,-0.607085076603809,-0.6035182261754716,-0.5999513757471343,-0.5963845253187977,-0.5892508244621237,-0.5856839740337864,-0.5821171236054498,-0.5749834227487759,-0.5714165723204385,-0.5678497218921019,-0.5642828714637653,-0.560716021035428,-0.5535823201787541,-0.5500154697504175,-0.5464486193220801,-0.5428817688937427,-0.5393149184654061,-0.5321812176087323,-0.5286143671803949,-0.5250475167520583,-0.5214806663237217,-0.5179138158953843,-0.5107801150387105,-0.5072132646103739,-0.5036464141820365,-0.5000795637536991,-0.49651271332536256,-0.4893790124686886,-0.4858121620403512,-0.48224531161201467,-0.4786784611836781,-0.47511161075534075,-0.4679779098986668,-0.46441105947033023,-0.46084420904199286,-0.4572773586136555,-0.4537105081853189,-0.45014365775698234,-0.44657680732864496,-0.4430099569003076,-0.43944310647197105,-0.43230940561529707,-0.42874255518695975,-0.42517570475862315,-0.42160885433028655,-0.41804200390194923,-0.41447515347361186,-0.41090830304527526,-0.4073414526169387,-0.40377460218860134,-0.3966409013319274,-0.3930740509035908,-0.38950720047525345,-0.38594035004691607,-0.3823734996185795,-0.37880664919024293,-0.3752397987619056,-0.37167294833356823,-0.36810609790523163,-0.3645392474768951,-0.3609723970485577,-0.35383869619188374,-0.3502718457635472,-0.3467049953352098,-0.34313814490687244,-0.3395712944785359,-0.3360044440501993,-0.3324375936218619,-0.3288707431935246,-0.325303892765188,-0.32173704233685146,-0.3181701919085141,-0.3146033414801767,-0.3110364910518401,-0.30746964062350357,-0.3039027901951662,-0.3003359397668288,-0.2967690893384923,-0.2932022389101557,-0.2896353884818183,-0.2860685380534809,-0.2825016876251444,-0.2789348371968078,-0.27536798676847046,-0.2718011363401331,-0.2682342859117965,-0.26466743548345995,-0.26110058505512257,-0.2575337346267852,-0.25396688419844865,-0.25040003377011205,-0.24683318334177468,-0.24326633291343733,-0.23969948248510076,-0.23613263205676419,-0.2325657816284268,-0.22899893120008943,-0.22543208077175286,-0.2218652303434163,-0.21829837991507892,-0.21473152948674157,-0.211164679058405,-0.20759782863006843,-0.20403097820173105,-0.20046412777339367,-0.1968972773450571,-0.1945193770594994,-0.1921414767739409,-0.18976357648838318,-0.1861967260600458,-0.18262987563170924,-0.17906302520337267,-0.1754961747750353,-0.17192932434669794,-0.16836247391836137,-0.16479562349002477,-0.16122877306168742,-0.15766192263335005,-0.15409507220501348,-0.1505282217766769,-0.14696137134834034,-0.14458347106278263,-0.14220557077722412,-0.1398276704916664,-0.13626082006332904,-0.13269396963499247,-0.12912711920665587,-0.12556026877831852,-0.12199341834998115,-0.11842656792164458,-0.11604866763608686,-0.11367076735052836,-0.11129286706497064,-0.10772601663663328,-0.1041591662082967,-0.10059231577996013,-0.09702546535162276,-0.0934586149232854,-0.08989176449494883,-0.08751386420939111,-0.0851359639238326,-0.08275806363827488,-0.07919121320993752,-0.07562436278160095,-0.07205751235326437,-0.068490661924927,-0.06492381149658964,-0.06135696106825307,-0.05897906078269535,-0.05660116049713684,-0.05422326021157913,-0.05065640978324176,-0.04708955935490519,-0.04352270892656862,-0.03995585849823125,-0.03757795821267354,-0.03520005792711503,-0.03282215764155731,-0.02925530721322074,-0.025688456784883375,-0.02331055649932566,-0.02093265621376715,-0.018554755928209436,-0.014987905499872863,-0.011421055071535497,-0.007854204643198132,-0.004287354214861559,-0.0019094539293038435,0.00046844635625466403,0.0028463466418123798,0.006413197070149745,0.009980047498486319,0.012357947784044034,0.014735848069602542,0.017113748355160257,0.020680598783497622,0.024247449211834197,0.026625349497391912,0.029003249782950418,0.03138115006850813,0.0349480004968455,0.03851485092518207,0.04089275121073979,0.043270651496298294,0.04564855178185601,0.049215402210193375,0.05278225263852995,0.055160152924087665,0.057538053209646174,0.05991595349520389,0.06348280392354126,0.06704965435187783,0.06942755463743554,0.07180545492299405,0.07418335520855177,0.07775020563688913,0.08131705606522571,0.08369495635078342,0.08607285663634193,0.08845075692189965,0.09201760735023701,0.09558445777857358,0.0979623580641313,0.1003402583496898,0.10271815863524753,0.10628500906358489,0.10985185949192146,0.11222975977747918,0.11460766006303769,0.1169855603485954,0.11936346063415311,0.12174136091971162,0.12411926120526934,0.1276861116336059,0.13125296206194328,0.133630862347501,0.1360087626330595,0.1383866629186172,0.14076456320417494,0.14314246348973345,0.14552036377529115,0.14908721420362853,0.1526540646319651,0.1550319649175228,0.1574098652030813,0.15978776548863904,0.16216566577419675,0.16454356605975526,0.16692146634531296,0.17048831677364953,0.1740551672019869,0.17643306748754461,0.17881096777310312,0.18118886805866086,0.18356676834421856,0.18594466862977707,0.18832256891533478,0.19188941934367215,0.19545626977200872,0.19783417005756646,0.20021207034312494,0.20258997062868267,0.20496787091424037,0.20734577119979888,0.20972367148535662,0.21210157177091432,0.21447947205647283,0.21685737234203054,0.21923527262758827,0.22161317291314678,0.22399107319870448,0.22755792362704105,0.23112477405537843,0.23350267434093613,0.23588057462649464,0.23825847491205235,0.24063637519761008,0.2430142754831686,0.2453921757687263,0.247770076054284,0.25014797633984254,0.2525258766254002,0.25490377691095795,0.25728167719651646,0.2596595774820742,0.26203747776763187,0.2644153780531904,0.2667932783387481,0.2703601287670847,0.273926979195422,0.27630487948097976,0.27868277976653827,0.281060680052096,0.28343858033765373,0.2858164806232122,0.2881943809087699,0.29057228119432765,0.29295018147988616,0.2953280817654439,0.29770598205100157,0.3000838823365601,0.3024617826221178,0.30483968290767555,0.30721758319323406,0.30959548347879173,0.31197338376434947,0.314351284049908,0.3167291843354657,0.3191070846210234,0.3214849849065819,0.3238628851921396,0.32624078547769736,0.32861868576325587,0.33099658604881355,0.3333744863343713,0.3357523866199298,0.3381302869054875,0.3405081871910452,0.3428860874766037,0.34526398776216144,0.34764188804771917,0.3500197883332777,0.35239768861883536,0.3547755889043931,0.3571534891899516,0.35953138947550933,0.361909289761067,0.3642871900466255,0.36666509033218325,0.369042990617741,0.3714208909032995,0.37379879118885717,0.3761766914744149,0.3785545917599734,0.38093249204553115,0.3833103923310888,0.38568829261664733,0.38806619290220506,0.38984961811637336,0.39163304333054244,0.39341646854471074,0.395199893758879,0.3975777940444367,0.3999556943299952,0.40233359461555296,0.4047114949011107,0.40708939518666915,0.4094672954722269,0.4118451957577846,0.4142230960433431,0.41660099632890085,0.41897889661445853,0.42135679690001704,0.42373469718557477,0.4261125974711325,0.428490497756691,0.4308683980422487,0.432651823256417,0.43443524847058607,0.43621867368475437,0.43800209889892266,0.44037999918448034,0.44275789947003885,0.4451357997555966,0.4475137000411543,0.4498916003267128,0.4522695006122705,0.45464740089782824,0.45702530118338675,0.4594032014689445,0.4611866266831127,0.4629700518972818,0.4647534771114501,0.4665369023256184,0.46891480261117613,0.47129270289673464,0.4736706031822923,0.47604850346785005,0.47842640375340856,0.4808043040389663,0.48318220432452397,0.4855601046100825,0.4879380048956402,0.4897214301098085,0.4915048553239776,0.4932882805381459,0.49507170575231413,0.49744960603787186,0.49982750632343037,0.502205406608988,0.5045833068945458,0.5069612071801043,0.509339107465662,0.5111225326798303,0.5129059578939986,0.5146893831081677,0.516472808322336,0.5188507086078937,0.5212286088934522,0.5236065091790099,0.5253899343931782,0.5271733596073465,0.5289567848215155,0.5307402100356838,0.5331181103212416,0.5354960106068001,0.5378739108923578,0.5402518111779155,0.542629711463474,0.5450076117490317,0.5467910369632,0.548574462177369,0.5503578873915373,0.5521413126057056,0.5545192128912634,0.5568971131768219,0.5592750134623796,0.5610584386765479,0.562841863890717,0.5646252891048853,0.5664087143190535,0.5687866146046112,0.5711645148901697,0.5735424151757275,0.5753258403898958,0.5771092656040648,0.5788926908182331,0.5806761160324014,0.5830540163179592,0.5854319166035177,0.5878098168890754,0.5895932421032436,0.5913766673174127,0.593160092531581,0.5949435177457493,0.597321418031307,0.5996993183168655,0.6020772186024232,0.6038606438165915,0.6056440690307606,0.6074274942449289,0.6092109194590972,0.6115888197446548,0.6139667200302134,0.6163446203157711,0.6181280455299394,0.6199114707441085,0.6216948959582768,0.6234783211724451,0.6252617463866134,0.6270451716007817,0.6288285968149507,0.630612022029119,0.6329899223146767,0.6353678226002352,0.6377457228857929,0.6395291480999612,0.6413125733141295,0.6430959985282986,0.6448794237424669,0.6466628489566352,0.6484462741708042,0.6502296993849725,0.6520131245991408,0.6543910248846985,0.656768925170257,0.6591468254558147,0.660930250669983,0.6627136758841521,0.6644971010983204,0.6662805263124887,0.668063951526657,0.6698473767408253,0.6716308019549944,0.6734142271691627,0.6757921274547204,0.6781700277402788,0.6805479280258365,0.6823313532400048,0.6841147784541731,0.6858982036683422,0.6876816288825105,0.6894650540966788,0.6912484793108479,0.6930319045250162,0.6948153297391845,0.6965987549533528,0.698382180167521,0.70016560538169,0.7019490305958583,0.7043269308814161,0.7067048311669746,0.7090827314525323,0.7108661566667006,0.7126495818808689,0.714433007095038,0.7162164323092063,0.7179998575233746,0.7197832827375437,0.721566707951712,0.7233501331658801,0.7251335583800484,0.7269169835942167,0.7287004088083858,0.7304838340225541,0.7322672592367224,0.7340506844508915,0.7358341096650598,0.7376175348792281,0.7394009600933964,0.7411843853075647,0.7429678105217329,0.7447512357359012,0.7471291360214589,0.7495070363070174,0.7518849365925752,0.7536683618067435,0.7554517870209125,0.7572352122350808,0.7590186374492491,0.7608020626634174,0.7625854878775856,0.7643689130917547,0.766152338305923,0.7679357635200913,0.7697191887342604,0.7715026139484287,0.773286039162597,0.7750694643767653,0.7768528895909336,0.7786363148051026,0.780419740019271,0.7822031652334392,0.7839865904476083,0.7857700156617765,0.7875534408759448,0.7893368660901131,0.7911202913042814,0.7929037165184505,0.7946871417326188,0.7964705669467871,0.7982539921609562,0.8000374173751245,0.8018208425892928,0.8036042678034611,0.8053876930176292,0.8071711182317984,0.8089545434459666,0.8107379686601349,0.812521393874304,0.8143048190884723,0.8160882443026406,0.8178716695168089,0.8196550947309772,0.8214385199451463,0.8232219451593146,0.8250053703734829,0.826788795587652,0.8285722208018202,0.8303556460159884,0.8321390712301567,0.833922496444325,0.8357059216584941,0.8374893468726624,0.8392727720868307,0.8410561973009998,0.8428396225151681,0.8446230477293364,0.8464064729435047,0.848189898157673,0.8499733233718421,0.8517567485860102,0.853183488757345,0.8546102289286795,0.856036969100015,0.8574637092713496,0.8588904494426842,0.8606738746568525,0.8624572998710208,0.8642407250851899,0.8660241502993582,0.8678075755135265,0.8695910007276956,0.8713744259418639,0.8731578511560321,0.8749412763702004,0.8767247015843687,0.8785081267985377,0.880291552012706,0.8820749772268743,0.8838584024410434,0.8856418276552117,0.88742525286938,0.8888519930407146,0.8902787332120492,0.8917054733833847,0.8931322135547193,0.894558953726054,0.8963423789402222,0.8981258041543912,0.8999092293685595,0.9016926545827278,0.9034760797968961,0.9052595050110644,0.9070429302252335,0.9088263554394018,0.9106097806535701,0.9123932058677392,0.9141766310819075,0.9159600562960758,0.9173867964674104,0.918813536638745,0.9202402768100805,0.9216670169814151,0.9230937571527497,0.924877182366918,0.926660607581087,0.9284440327952553,0.9302274580094236,0.9320108832235919,0.9337943084377602,0.9355777336519293,0.9373611588660976,0.9387878990374322,0.9402146392087668,0.9416413793801023,0.9430681195514369,0.9444948597227715,0.9462782849369398,0.9480617101511081,0.9498451353652771,0.9516285605794454,0.9534119857936137,0.9551954110077828,0.9569788362219511,0.9587622614361194,0.960189001607454,0.9616157417787886,0.9630424819501241,0.9644692221214587,0.9658959622927933,0.9676793875069616,0.9694628127211307,0.971246237935299,0.9730296631494673,0.9744564033208019,0.9758831434921366,0.9773098836634719,0.9787366238348065,0.9801633640061412,0.9819467892203095,0.9837302144344786,0.9855136396486468,0.9872970648628151,0.9887238050341498,0.9901505452054844,0.9915772853768198,0.9930040255481545,0.9944307657194891,0.9962141909336574,0.9979976161478264,0.9997810413619947,1.001564466576163,1.0029912067474975,1.0044179469188323,1.0058446870901676,1.0072714272615024,1.008698167432837,1.0104815926470052,1.0122650178611743,1.0140484430753427,1.0158318682895109,1.0172586084608455,1.01868534863218,1.0201120888035156,1.0215388289748502,1.0229655691461847,1.0247489943603532,1.0265324195745222,1.0283158447886904,1.0300992700028588,1.0315260101741934,1.032952750345528,1.0343794905168635,1.035806230688198,1.0372329708595327,1.0390163960737009,1.04079982128787,1.0425832465020384,1.0443666717162066,1.0457934118875414,1.047220152058876,1.0486468922302112,1.050073632401546,1.0515003725728806,1.0529271127442152,1.0543538529155498,1.0557805930868853,1.05720733325822,1.0586340734295545,1.0604174986437227,1.062200923857891,1.0639843490720602,1.0657677742862284,1.0671945144575632,1.0686212546288978,1.070047994800233,1.0714747349715679,1.0729014751429025,1.074328215314237,1.0757549554855717,1.0771816956569071,1.0786084358282417,1.0800351759995763,1.0818186012137447,1.0836020264279138,1.085385451642082,1.0871688768562502,1.088595617027585,1.0900223571989196,1.0914490973702549,1.0928758375415897,1.0943025777129243,1.0957293178842589,1.0971560580555935,1.098582798226929,1.1000095383982635,1.1014362785695981,1.1028630187409327,1.1042897589122673,1.1057164990836028,1.1071432392549374,1.108569979426272,1.1103534046404404,1.1121368298546095,1.1139202550687777,1.115703680282946,1.1171304204542807,1.1185571606256153,1.1199839007969508,1.1214106409682854,1.12283738113962,1.1242641213109545,1.1256908614822891,1.1271176016536246,1.1285443418249592,1.1299710819962938,1.1313978221676286,1.1328245623389632,1.1342513025102985,1.1356780426816333,1.137104782852968,1.1385315230243025,1.139958263195637,1.1413850033669726,1.1428117435383072,1.1442384837096418,1.1456652238809764,1.147091964052311,1.1485187042236464,1.149945444394981,1.1513721845663156,1.1527989247376504,1.154225664908985,1.1556524050803203,1.1570791452516551,1.1585058854229897,1.1599326255943243,1.161359365765659,1.1627861059369944,1.164212846108329,1.1656395862796636,1.1670663264509982,1.1684930666223328,1.1699198067936682,1.1713465469650028,1.1727732871363374,1.1742000273076723,1.1756267674790069,1.1770535076503421,1.178480247821677,1.1799069879930115,1.1799069879930115,1.1799069879930115,1.1799069879930115,1.1799069879930115]),
            'spec': np.array([-1.8273443302401238,-1.7593797798616286,-1.709951015949996,-1.6790580385052258,-1.6543436565494094,-1.6296292745935932,-1.6110934881267307,-1.5925577016598689,-1.5740219151930066,-1.561664724215098,-1.5493075332371908,-1.5369503422592823,-1.5245931512813744,-1.512235960303466,-1.5060573648145121,-1.4937001738366036,-1.4875215783476496,-1.4751643873697418,-1.4689857918807874,-1.4628071963918334,-1.4566286009028795,-1.444271409924971,-1.438092814436017,-1.431914218947063,-1.4257356234581091,-1.4195570279691547,-1.4133784324802008,-1.4071998369912468,-1.401021241502293,-1.3948426460133383,-1.3886640505243844,-1.3824854550354304,-1.3763068595464765,-1.373217561801999,-1.370128264057522,-1.363949668568568,-1.357771073079614,-1.35159247759066,-1.3485031798461826,-1.3454138821017056,-1.3392352866127517,-1.3330566911237978,-1.3299673933793208,-1.3268780956348438,-1.3206995001458892,-1.3176102024014122,-1.3145209046569353,-1.3083423091679813,-1.3052530114235044,-1.3021637136790274,-1.295985118190073,-1.292895820445596,-1.289806522701119,-1.2836279272121651,-1.2805386294676881,-1.2774493317232112,-1.2743600339787335,-1.2712707362342566,-1.2650921407453026,-1.2620028430008257,-1.2589135452563487,-1.2558242475118717,-1.2527349497673947,-1.2496456520229173,-1.2465563542784404,-1.2434670565339634,-1.2403777587894864,-1.2341991633005323,-1.2311098655560553,-1.2280205678115783,-1.2249312700671011,-1.2218419723226241,-1.2187526745781472,-1.2156633768336702,-1.2125740790891932,-1.209484781344716,-1.206395483600239,-1.203306185855762,-1.2002168881112847,-1.1971275903668077,-1.1940382926223307,-1.1909489948778538,-1.1878596971333768,-1.1847703993888996,-1.1827108675592481,-1.1806513357295971,-1.1785918038999457,-1.175502506155469,-1.172413208410992,-1.169323910666515,-1.1662346129220378,-1.1631453151775606,-1.1600560174330836,-1.1569667196886066,-1.1538774219441297,-1.1518178901144782,-1.1497583582848272,-1.1476988264551757,-1.1446095287106988,-1.1415202309662216,-1.1384309332217442,-1.1353416354772672,-1.133282103647616,-1.1312225718179647,-1.1291630399883132,-1.1260737422438363,-1.1229844444993593,-1.120924912669708,-1.1188653808400566,-1.1168058490104051,-1.113716551265928,-1.110627253521451,-1.107537955776974,-1.104448658032497,-1.1023891262028456,-1.1003295943731946,-1.098270062543543,-1.0951807647990661,-1.092091467054589,-1.0900319352249375,-1.087972403395286,-1.0859128715656345,-1.0828235738211576,-1.0797342760766806,-1.0776747442470294,-1.0756152124173781,-1.0735556805877267,-1.0704663828432497,-1.0673770850987725,-1.065317553269121,-1.0632580214394698,-1.0611984896098183,-1.0591389577801669,-1.0570794259505158,-1.0550198941208644,-1.0519305963763874,-1.0488412986319104,-1.046781766802259,-1.0447222349726075,-1.0426627031429563,-1.0395734053984789,-1.036484107654002,-1.0344245758243507,-1.0323650439946994,-1.030305512165048,-1.0282459803353967,-1.0261864485057455,-1.024126916676094,-1.021037618931617,-1.0179483211871398,-1.0158887893574884,-1.0138292575278371,-1.0117697256981857,-1.0097101938685342,-1.0076506620388832,-1.0055911302092317,-1.0025018324647548,-0.9994125347202778,-0.9973530028906263,-0.995293471060975,-0.9932339392313235,-0.9911744074016722,-0.9891148755720207,-0.9870553437423694,-0.9839660459978924,-0.9808767482534154,-0.978817216423764,-0.9767576845941128,-0.9746981527644615,-0.97263862093481,-0.9705790891051587,-0.9685195572755072,-0.96543025953103,-0.962340961786553,-0.9602814299569016,-0.9582218981272504,-0.9561623662975991,-0.9541028344679476,-0.9520433026382965,-0.9499837708086452,-0.9468944730641682,-0.9438051753196909,-0.9417456434900395,-0.9396861116603881,-0.9376265798307367,-0.9355670480010853,-0.9335075161714341,-0.9314479843417828,-0.9283586865973058,-0.9252693888528288,-0.9232098570231774,-0.921150325193526,-0.9190907933638746,-0.9170312615342232,-0.9149717297045717,-0.9129121978749204,-0.9098229001304434,-0.9067336023859665,-0.904674070556315,-0.9026145387266639,-0.9005550068970124,-0.898495475067361,-0.8964359432377096,-0.8943764114080582,-0.891287113663581,-0.888197815919104,-0.8861382840894528,-0.8840787522598015,-0.8820192204301504,-0.878929922685673,-0.8758406249411961,-0.8737810931115447,-0.8717215612818936,-0.8696620294522421,-0.8676024976225908,-0.8655429657929393,-0.863483433963288,-0.860394136218811,-0.857304838474334,-0.8552453066446826,-0.8531857748150312,-0.8511262429853798,-0.8490667111557284,-0.8470071793260773,-0.8449476474964258,-0.8418583497519488,-0.8387690520074716,-0.8367095201778202,-0.8346499883481691,-0.8325904565185177,-0.8305309246888662,-0.8284713928592149,-0.8264118610295634,-0.8233225632850865,-0.8202332655406095,-0.8181737337109581,-0.8161142018813067,-0.8140546700516553,-0.8119951382220039,-0.8099356063923527,-0.8078760745627014,-0.8047867768182241,-0.8016974790737471,-0.7996379472440958,-0.7975784154144446,-0.7955188835847932,-0.7934593517551418,-0.7913998199254904,-0.789340288095839,-0.786250990351362,-0.7831616926068851,-0.7811021607772336,-0.7790426289475822,-0.7769830971179308,-0.7749235652882794,-0.7728640334586283,-0.7708045016289768,-0.7677152038844999,-0.7646259061400227,-0.7625663743103712,-0.7605068424807201,-0.7584473106510687,-0.7553580129065914,-0.7522687151621145,-0.7502091833324631,-0.748149651502812,-0.7460901196731605,-0.7440305878435092,-0.7419710560138577,-0.7399115241842064,-0.7368222264397294,-0.7337329286952524,-0.731673396865601,-0.7296138650359496,-0.7275543332062981,-0.7254948013766468,-0.7234352695469957,-0.7213757377173442,-0.7182864399728672,-0.71519714222839,-0.7131376103987386,-0.7110780785690874,-0.7090185467394361,-0.7069590149097846,-0.7048994830801333,-0.7028399512504818,-0.6997506535060048,-0.6966613557615279,-0.6946018239318765,-0.6925422921022254,-0.6904827602725739,-0.687393462528097,-0.6843041647836198,-0.6822446329539683,-0.6801851011243172,-0.6781255692946658,-0.6760660374650144,-0.674006505635363,-0.6719469738057116,-0.6688576760612346,-0.6657683783167576,-0.6637088464871063,-0.6616493146574548,-0.6595897828278035,-0.6565004850833265,-0.6534111873388495,-0.651351655509198,-0.6492921236795467,-0.6472325918498952,-0.645173060020244,-0.6431135281905925,-0.6410539963609413,-0.6379646986164642,-0.6348754008719871,-0.6328158690423358,-0.6307563372126844,-0.6286968053830332,-0.625607507638556,-0.6225182098940789,-0.6204586780644277,-0.6183991462347762,-0.616339614405125,-0.6142800825754736,-0.6122205507458222,-0.6101610189161708,-0.6070717211716938,-0.6039824234272169,-0.6019228915975654,-0.599863359767914,-0.5978038279382626,-0.5947145301937856,-0.5916252324493086,-0.5895657006196572,-0.5875061687900058,-0.5854466369603544,-0.5833871051307031,-0.5813275733010518,-0.5792680414714004,-0.5761787437269233,-0.5730894459824463,-0.571029914152795,-0.5689703823231436,-0.5669108504934923,-0.5638215527490152,-0.560732255004538,-0.5586727231748868,-0.5566131913452355,-0.5545536595155841,-0.551464361771107,-0.5483750640266299,-0.5463155321969787,-0.5442560003673272,-0.542196468537676,-0.5401369367080245,-0.5380774048783732,-0.5360178730487217,-0.5329285753042448,-0.5298392775597678,-0.5277797457301164,-0.525720213900465,-0.5236606820708136,-0.5205713843263367,-0.5174820865818597,-0.5154225547522082,-0.5133630229225569,-0.5113034910929054,-0.5082141933484284,-0.5051248956039515,-0.5030653637743001,-0.5010058319446486,-0.4989463001149973,-0.49585700237052033,-0.49276770462604347,-0.49070817279639206,-0.4886486409667408,-0.4865891091370894,-0.48349981139261244,-0.4804105136481353,-0.4783509818184839,-0.47629144998883266,-0.47423191815918125,-0.47217238632952985,-0.47011285449987855,-0.46805332267022715,-0.46496402492575006,-0.4618747271812731,-0.4598151953516217,-0.4577556635219704,-0.455696131692319,-0.4526068339478419,-0.44951753620336493,-0.4474580043737135,-0.44539847254406223,-0.4433389407144108,-0.4402496429699337,-0.4371603452254567,-0.4351008133958053,-0.43304128156615407,-0.43098174973650266,-0.4278924519920255,-0.42480315424754855,-0.42274362241789715,-0.4206840905882459,-0.4186245587585945,-0.41553526101411736,-0.4124459632696404,-0.410386431439989,-0.40832689961033775,-0.40626736778068634,-0.4031780700362092,-0.40008877229173223,-0.3980292404620808,-0.3959697086324296,-0.3939101768027782,-0.39082087905830104,-0.38773158131382407,-0.38567204948417266,-0.3836125176545214,-0.38155298582487,-0.3784636880803929,-0.3753743903359159,-0.37228509259143894,-0.36919579484696186,-0.36713626301731045,-0.36507673118765915,-0.36301719935800775,-0.3599279016135308,-0.3568386038690537,-0.3547790720394023,-0.352719540209751,-0.3506600083800996,-0.3475707106356226,-0.34448141289114553,-0.3424218810614941,-0.34036234923184283,-0.3383028174021914,-0.33521351965771445,-0.33212422191323737,-0.33006469008358597,-0.32800515825393467,-0.32594562642428326,-0.3228563286798063,-0.3197670309353292,-0.3177074991056778,-0.3156479672760265,-0.3135884354463751,-0.31049913770189813,-0.30740983995742105,-0.3043205422129441,-0.3012312444684671,-0.2991717126388157,-0.2971121808091644,-0.295052648979513,-0.29196335123503603,-0.2888740534905589,-0.2868145216609075,-0.28475498983125624,-0.28269545800160484,-0.27960616025712787,-0.27651686251265073,-0.27342756476817365,-0.2703382670236967,-0.26827873519404527,-0.266219203364394,-0.26415967153474257,-0.2610703737902655,-0.2579810760457885,-0.2559215442161371,-0.2538620123864858,-0.2518024805568344,-0.24871318281235733,-0.24562388506788035,-0.24253458732340338,-0.23944528957892627,-0.23738575774927487,-0.2353262259196236,-0.2332666940899722,-0.23017739634549522,-0.2270880986010181,-0.223998800856541,-0.22090950311206403,-0.21884997128241263,-0.21679043945276136,-0.21473090762310995,-0.21164160987863284,-0.20855231213415587,-0.20649278030450446,-0.20443324847485317,-0.20237371664520176,-0.19928441890072465,-0.19619512115624768,-0.1931058234117707,-0.1900165256672936,-0.1879569938376422,-0.18589746200799093,-0.18383793017833952,-0.18074863243386255,-0.17765933468938544,-0.17457003694490833,-0.17148073920043136,-0.16942120737077995,-0.16736167554112868,-0.16530214371147728,-0.1622128459670003,-0.15912354822252334,-0.15603425047804623,-0.15294495273356926,-0.15088542090391785,-0.14882588907426658,-0.14676635724461518,-0.14367705950013807,-0.1405877617556611,-0.13749846401118412,-0.13440916626670701,-0.1313198685222299,-0.12823057077775293,-0.12617103894810153,-0.12411150711845026,-0.12205197528879885,-0.11896267754432174,-0.11587337979984477,-0.1127840820553678,-0.10969478431089069,-0.10763525248123929,-0.10557572065158802,-0.10351618882193661,-0.10042689107745964,-0.09733759333298253,-0.09424829558850542,-0.09115899784402844,-0.08806970009955147,-0.08498040235507436,-0.08292087052542295,-0.08086133869577168,-0.07880180686612027,-0.0757125091216433,-0.0726232113771662,-0.06953391363268908,-0.06644461588821211,-0.06335531814373514,-0.06026602039925803,-0.058206488569606626,-0.05614695673995536,-0.05408742491030395,-0.05099812716582691,-0.04790882942134987,-0.04481953167687283,-0.04173023393239579,-0.03864093618791875,-0.03555163844344171,-0.03246234069896467,-0.029373042954487626,-0.02731351112483629,-0.025253979295184883,-0.023194447465533546,-0.020105149721056502,-0.01701585197657946,-0.013926554232102421,-0.010837256487625381,-0.00774795874314834,-0.0046586609986712995,-0.0015693632541942586,0.0015199344902827824,0.00357946631993412,0.005638998149585526,0.007698529979236864,0.010787827723713905,0.013877125468190945,0.016966423212667985,0.020055720957145026,0.02314501870162207,0.02623431644609911,0.02932361419057615,0.03241291193505319,0.03550220967953016,0.03859150742400713,0.04168080516848417,0.04477010291296122,0.04682963474261256,0.04888916657226396,0.0509486984019153,0.05403799614639234,0.05712729389086938,0.06021659163534642,0.06330588937982347,0.06639518712430051,0.06948448486877755,0.07257378261325459,0.07566308035773163,0.07875237810220867,0.08184167584668571,0.08493097359116275,0.08802027133563979,0.09110956908011683,0.09419886682459387,0.09625839865424521,0.09831793048389662,0.10037746231354795,0.10346676005802499,0.10655605780250203,0.10964535554697907,0.11273465329145611,0.11582395103593315,0.1189132487804102,0.12200254652488723,0.1250918442693643,0.12818114201384126,0.13127043975831829,0.13435973750279534,0.13744903524727237,0.14053833299174942,0.14362763073622645,0.1467169284807035,0.14980622622518053,0.15289552396965758,0.1559848217141346,0.15907411945861166,0.1621634172030887,0.16525271494756574,0.16834201269204277,0.17143131043651982,0.17452060818099685,0.1776099059254739,0.18069920366995093,0.18378850141442798,0.18687779915890504,0.18996709690338207,0.19305639464785912,0.19614569239233615,0.1992349901368132,0.20232428788129023,0.2054135856257672,0.20850288337024425,0.21159218111472128,0.21468147885919833,0.21777077660367536,0.2208600743481524,0.22394937209262944,0.2270386698371065,0.23012796758158352,0.23321726532606057,0.2363065630705376,0.23939586081501465,0.24248515855949168,0.24557445630396874,0.24866375404844576,0.2517530517929228,0.25484234953739987,0.2579316472818769,0.2610209450263539,0.264110242770831,0.26719954051530803,0.27028883825978506,0.2733781360042621,0.27646743374873917,0.2795567314932162,0.2826460292376932,0.28573532698217025,0.29191392247112435,0.2950032202156014,0.2980925179600784,0.30118181570455543,0.30427111344903246,0.3073604111935095,0.3104497089379865,0.31353900668246354,0.3166283044269406,0.31971760217141765,0.3228068999158947,0.3258961976603717,0.3289854954048488,0.3320747931493258,0.33516409089380284,0.34134268638275694,0.34443198412723397,0.34752128187171094,0.3506105796161881,0.35369987736066505,0.35678917510514213,0.3598784728496191,0.36296777059409624,0.3660570683385732,0.3691463660830503,0.37223566382752726,0.37841425931648137,0.3815035570609584,0.3845928548054354,0.38768215254991245,0.39077145029438953,0.39386074803886656,0.3969500457833436,0.4000393435278206,0.4031286412722977,0.40930723676125175,0.4123965345057288,0.41548583225020586,0.4185751299946829,0.4216644277391599,0.424753725483637,0.427843023228114,0.43402161871706807,0.43711091646154504,0.4402002142060222,0.44328951195049915,0.44637880969497623,0.4494681074394532,0.45255740518393034,0.45873600067288434,0.46182529841736136,0.46491459616183844,0.46800389390631547,0.4710931916507925,0.4741824893952695,0.4772717871397466,0.48345038262870066,0.4865396803731777,0.48962897811765477,0.4927182758621318,0.4958075736066088,0.5019861690955629,0.50507546684004,0.508164764584517,0.5112540623289941,0.514343360073471,0.5205219555624251,0.5236112533069022,0.5267005510513791,0.5297898487958562,0.5328791465403333,0.5390577420292874,0.5421470397737643,0.5452363375182414,0.5483256352627185,0.5514149330071955,0.5575935284961496,0.5606828262406266,0.5637721239851037,0.5668614217295807,0.5699507194740577,0.5761293149630118,0.5792186127074889,0.582307910451966,0.58848650594092,0.5915758036853971,0.594665101429874,0.5977543991743511,0.6008436969188281,0.6070222924077823,0.6101115901522592,0.6132008878967362,0.6193794833856904,0.6224687811301673,0.6255580788746444,0.6317366743635986,0.6348259721080756,0.6379152698525525,0.6440938653415067,0.6471831630859837,0.6502724608304606,0.6533617585749378,0.6564510563194148,0.6626296518083689,0.6657189495528459,0.6688082472973229,0.674986842786277,0.6780761405307542,0.6811654382752311,0.6873440337641852,0.6904333315086623,0.6935226292531392,0.6997012247420933,0.7058798202310475,0.7089691179755245,0.7120584157200015,0.7182370112089556,0.7213263089534326,0.7244156066979096,0.7305942021868638,0.7336834999313409,0.7367727976758178,0.7429513931647719,0.746040690909249,0.7491299886537259,0.7553085841426801,0.7614871796316341,0.7645764773761111,0.7676657751205882,0.7738443706095423,0.7769336683540192,0.7800229660984964,0.7862015615874505,0.7923801570764044,0.7954694548208815,0.7985587525653586,0.8047373480543126,0.8078266457987897,0.8109159435432668,0.8170945390322207,0.823273134521175,0.826362432265652,0.829451730010129,0.835630325499083,0.8418089209880371,0.844898218732514,0.8479875164769911,0.8541661119659453,0.8603447074548993,0.8634340051993764,0.8665233029438534,0.8727018984328074,0.8788804939217616,0.8850590894107156,0.8881483871551927,0.8912376848996697,0.8974162803886238,0.9035948758775779,0.9066841736220549,0.909773471366532,0.915952066855486,0.9221306623444401,0.9283092578333942,0.9313985555778712,0.9344878533223482,0.9406664488113023,0.9468450443002563,0.9530236397892106,0.9561129375336875,0.9592022352781645,0.9653808307671187,0.9715594262560726,0.9777380217450269,0.9839166172339808,0.9870059149784579,0.990095212722935,0.9962738082118889,1.002452403700843,1.008630999189797,1.0148095946787512,1.0209881901677054,1.0271667856566593,1.0302560834011365,1.0333453811456135,1.0395239766345676,1.0457025721235216,1.0518811676124757,1.0580597631014297,1.0642383585903838,1.070416954079338,1.076595549568292,1.0796848473127691,1.0827741450572461,1.0889527405462003,1.0951313360351542,1.1013099315241082,1.1074885270130623,1.1136671225020165,1.1198457179909704,1.1260243134799246,1.1322029089688785,1.1383815044578327,1.1445600999467869,1.1507386954357408,1.156917290924695,1.1630958864136491,1.169274481902603,1.1754530773915572,1.1816316728805112,1.1878102683694653,1.1939888638584195,1.2001674593473735,1.2063460548363276,1.2125246503252818,1.2187032458142357,1.2248818413031899,1.2310604367921438,1.237239032281098,1.243417627770052,1.249596223259006,1.2557748187479605,1.2619534142369144,1.2681320097258684,1.2743106052148225,1.2804892007037767,1.2866677961927306,1.2990249871706385,1.3052035826595927,1.311382178148547,1.317560773637501,1.323739369126455,1.3299179646154091,1.3360965601043633,1.3484537510822712,1.3546323465712253,1.3608109420601797,1.3669895375491337,1.3731681330380876,1.3793467285270418,1.3917039195049499,1.3978825149939038,1.404061110482858,1.4102397059718124,1.4225968969497202,1.4287754924386744,1.4349540879276284,1.4411326834165825,1.4534898743944904,1.4596684698834448,1.465847065372399,1.4782042563503068,1.484382851839261,1.4905614473282152,1.502918638306123,1.5090972337950774,1.5152758292840316,1.5276330202619395,1.5338116157508936,1.5461688067288017,1.5523474022177557,1.5647045931956642,1.5708831886846182,1.5832403796625263,1.5894189751514805,1.6017761661293883,1.6079547616183427,1.6203119525962508,1.6264905480852048,1.6388477390631127,1.645026334552067,1.657383525529975,1.6697407165078835,1.6759193119968374,1.6882765029747453,1.6944550984636997,1.7068122894416076,1.7191694804195161,1.731526671397424,1.737705266886378,1.7500624578642865,1.7624196488421944,1.7747768398201027,1.7871340307980106,1.7994912217759191,1.805669817264873,1.8180270082427814,1.8303841992206893,1.8427413901985972,1.8550985811765057,1.8674557721544136,1.879812963132322,1.8983487495991844,1.9107059405770923,1.9230631315550006,1.9354203225329085,1.947777513510817,1.966313299977679,1.9786704909555872,1.991027681933495,2.0095634684003576,2.0219206593782655,2.0404564458451278,2.052813636823036,2.071349423289898,2.0898852097567606,2.102242400734669,2.1207781872015308,2.139313973668393,2.1578497601352553,2.176385546602118,2.19492133306898,2.213457119535842,2.2319929060027044,2.2567072879585206,2.2752430744253833,2.293778860892245,2.3184932428480614,2.3432076248038776,2.3679220067596938,2.3926363887155104,2.4173507706713266,2.442065152627143,2.4729581300719135,2.4976725120277297,2.5285654894725,2.55945846691727,2.590351444362041,2.627423017295765,2.66449459022949,2.701566163163214,2.744816331585892,2.788066500008571,2.8374952639202036,2.8869240278318364,2.942531387232423,3.004317342121964,3.072281892500459,3.1464250383679073,3.2391039707022187,3.344140094014438,3.473890599282474,3.646891272973188]),
            'betam1': np.array([0.0,0.00025,0.0005,0.00075,0.001,0.0012000000000000001,0.0014,0.0015999999999999999,0.0018,0.002,0.0022,0.0024000000000000002,0.0026,0.0028,0.003,0.0032,0.0034000000000000002,0.0036,0.0038,0.004,0.0042,0.0044,0.0046,0.0048000000000000004,0.005,0.0052,0.0054,0.0056,0.0058000000000000005,0.006,0.0062,0.0064,0.0066,0.0068000000000000005,0.007,0.0072,0.0074,0.0076,0.0078000000000000005,0.008,0.0082,0.0084,0.0086,0.008799999999999999,0.009,0.00925,0.0095,0.00975,0.01,0.0102,0.0104,0.0106,0.010799999999999999,0.011,0.0112,0.0114,0.0116,0.0118,0.012,0.0122,0.0124,0.0126,0.012799999999999999,0.013,0.0132,0.0134,0.0136,0.0138,0.014,0.01425,0.014499999999999999,0.01475,0.015,0.0152,0.0154,0.0156,0.0158,0.016,0.0162,0.0164,0.0166,0.016800000000000002,0.017,0.01725,0.0175,0.01775,0.018,0.018199999999999997,0.0184,0.0186,0.0188,0.019,0.0192,0.0194,0.0196,0.0198,0.02,0.02025,0.0205,0.02075,0.021,0.0212,0.0214,0.0216,0.0218,0.022,0.02225,0.0225,0.02275,0.023,0.0232,0.0234,0.0236,0.0238,0.024,0.02425,0.0245,0.02475,0.025,0.0252,0.0254,0.0256,0.0258,0.026,0.02625,0.0265,0.02675,0.027,0.0272,0.0274,0.0276,0.027800000000000002,0.028,0.02825,0.0285,0.02875,0.029,0.0292,0.0294,0.0296,0.0298,0.03,0.03025,0.0305,0.03075,0.031,0.0312,0.0314,0.0316,0.0318,0.032,0.03225,0.0325,0.03275,0.033,0.03325,0.0335,0.03375,0.034,0.0342,0.0344,0.034600000000000006,0.034800000000000005,0.035,0.035250000000000004,0.035500000000000004,0.03575,0.036,0.03625,0.0365,0.03675,0.037,0.0372,0.037399999999999996,0.0376,0.0378,0.038,0.03825,0.0385,0.03875,0.039,0.03925,0.0395,0.03975,0.04,0.04025,0.0405,0.04075,0.041,0.04125,0.0415,0.04175,0.042,0.0422,0.0424,0.0426,0.0428,0.043,0.04325,0.0435,0.04375,0.044,0.04425,0.0445,0.04475,0.045,0.04525,0.0455,0.04575,0.046,0.04625,0.0465,0.04675,0.047,0.04725,0.0475,0.04775,0.048,0.0482,0.0484,0.048600000000000004,0.0488,0.049,0.04925,0.0495,0.04975,0.05,0.05025,0.0505,0.050749999999999997,0.051,0.05125,0.0515,0.05175,0.052,0.05225,0.0525,0.05275,0.053,0.05325,0.0535,0.05375,0.054,0.05425,0.0545,0.05475,0.055,0.05525,0.0555,0.05575,0.056,0.05625,0.0565,0.05675,0.057,0.05725,0.0575,0.05775,0.058,0.05825,0.058499999999999996,0.05875,0.059,0.05933333333333333,0.059666666666666666,0.06,0.06025,0.0605,0.06075,0.061,0.06125,0.0615,0.06175,0.062,0.06225,0.0625,0.06275,0.063,0.06325,0.0635,0.06375,0.064,0.06425,0.0645,0.06475,0.065,0.06525,0.0655,0.06575,0.066,0.06633333333333334,0.06666666666666667,0.067,0.06725,0.0675,0.06775,0.068,0.06825,0.0685,0.06875,0.069,0.06925,0.0695,0.06975,0.07,0.07033333333333333,0.07066666666666667,0.071,0.07125,0.0715,0.07175,0.072,0.07225,0.0725,0.07275,0.073,0.07325,0.0735,0.07375,0.074,0.07433333333333333,0.07466666666666666,0.075,0.07525,0.0755,0.07575,0.076,0.07633333333333334,0.07666666666666666,0.077,0.07725,0.0775,0.07775,0.078,0.07825,0.0785,0.07875,0.079,0.07933333333333334,0.07966666666666666,0.08,0.08025,0.0805,0.08075,0.081,0.08133333333333334,0.08166666666666667,0.082,0.08225,0.0825,0.08275,0.083,0.08333333333333334,0.08366666666666667,0.084,0.08425,0.0845,0.08475,0.085,0.08533333333333333,0.08566666666666667,0.086,0.08625,0.0865,0.08675,0.087,0.08733333333333333,0.08766666666666666,0.088,0.08825,0.0885,0.08875,0.089,0.08933333333333333,0.08966666666666666,0.09,0.09025,0.0905,0.09075,0.091,0.09133333333333334,0.09166666666666666,0.092,0.09225,0.0925,0.09275,0.093,0.09333333333333334,0.09366666666666666,0.094,0.09433333333333334,0.09466666666666666,0.095,0.09525,0.0955,0.09575,0.096,0.09633333333333334,0.09666666666666666,0.097,0.09733333333333334,0.09766666666666667,0.098,0.09825,0.0985,0.09875,0.099,0.09933333333333334,0.09966666666666667,0.1,0.10033333333333334,0.10066666666666667,0.101,0.10133333333333333,0.10166666666666667,0.102,0.10225,0.1025,0.10275,0.103,0.10333333333333333,0.10366666666666666,0.104,0.10433333333333333,0.10466666666666666,0.105,0.10533333333333333,0.10566666666666666,0.106,0.10633333333333334,0.10666666666666666,0.107,0.10725,0.1075,0.10775,0.108,0.10833333333333334,0.10866666666666666,0.109,0.10933333333333334,0.10966666666666666,0.11,0.11033333333333334,0.11066666666666666,0.111,0.11133333333333334,0.11166666666666666,0.112,0.11233333333333334,0.11266666666666666,0.113,0.11333333333333334,0.11366666666666667,0.114,0.11433333333333334,0.11466666666666667,0.115,0.11533333333333334,0.11566666666666667,0.116,0.11625,0.1165,0.11675,0.117,0.11733333333333333,0.11766666666666667,0.118,0.11833333333333333,0.11866666666666666,0.119,0.11933333333333333,0.11966666666666666,0.12,0.12033333333333333,0.12066666666666666,0.121,0.12133333333333333,0.12166666666666666,0.122,0.12233333333333334,0.12266666666666666,0.123,0.1235,0.124,0.12433333333333334,0.12466666666666666,0.125,0.12533333333333332,0.12566666666666668,0.126,0.12633333333333333,0.12666666666666668,0.127,0.12733333333333333,0.12766666666666668,0.128,0.12833333333333333,0.12866666666666668,0.129,0.12933333333333333,0.12966666666666668,0.13,0.13033333333333333,0.13066666666666668,0.131,0.13133333333333333,0.13166666666666668,0.132,0.1325,0.133,0.13333333333333333,0.13366666666666668,0.134,0.13433333333333333,0.13466666666666668,0.135,0.13533333333333333,0.13566666666666669,0.136,0.13633333333333333,0.1366666666666667,0.137,0.1375,0.138,0.13833333333333334,0.1386666666666667,0.139,0.13933333333333334,0.1396666666666667,0.14,0.14033333333333334,0.14066666666666666,0.141,0.1415,0.142,0.1423333333333333,0.14266666666666666,0.143,0.1433333333333333,0.14366666666666666,0.144,0.1445,0.145,0.14533333333333331,0.14566666666666667,0.146,0.14633333333333332,0.14666666666666667,0.147,0.1475,0.148,0.14833333333333332,0.14866666666666667,0.149,0.14933333333333332,0.14966666666666667,0.15,0.1505,0.151,0.15133333333333332,0.15166666666666667,0.152,0.1525,0.153,0.15333333333333332,0.15366666666666667,0.154,0.1545,0.155,0.15533333333333332,0.15566666666666668,0.156,0.15633333333333332,0.15666666666666668,0.157,0.1575,0.158,0.15833333333333333,0.15866666666666668,0.159,0.1595,0.16,0.16033333333333333,0.16066666666666668,0.161,0.1615,0.162,0.16233333333333333,0.16266666666666668,0.163,0.1635,0.164,0.1645,0.165,0.16533333333333333,0.16566666666666668,0.166,0.1665,0.167,0.16733333333333333,0.16766666666666669,0.168,0.1685,0.169,0.1695,0.17,0.17033333333333334,0.1706666666666667,0.171,0.17149999999999999,0.172,0.1725,0.173,0.1733333333333333,0.17366666666666666,0.174,0.1745,0.175,0.1755,0.176,0.17633333333333331,0.17666666666666667,0.177,0.1775,0.178,0.1785,0.179,0.17933333333333332,0.17966666666666667,0.18,0.1805,0.181,0.1815,0.182,0.1825,0.183,0.18333333333333332,0.18366666666666667,0.184,0.1845,0.185,0.1855,0.186,0.1865,0.187,0.1875,0.188,0.1885,0.189,0.18933333333333333,0.18966666666666668,0.19,0.1905,0.191,0.1915,0.192,0.1925,0.193,0.1935,0.194,0.1945,0.195,0.1955,0.196,0.1965,0.197,0.1975,0.198,0.19833333333333333,0.19866666666666669,0.199,0.1995,0.2,0.2005,0.201,0.2015,0.202,0.2025,0.203,0.20350000000000001,0.204,0.2045,0.205,0.2055,0.206,0.2065,0.207,0.2075,0.208,0.2085,0.209,0.2095,0.21,0.2105,0.211,0.212,0.2125,0.213,0.2135,0.214,0.2145,0.215,0.2155,0.216,0.2165,0.217,0.2175,0.218,0.2185,0.219,0.2195,0.22,0.221,0.2215,0.222,0.2225,0.223,0.2235,0.224,0.2245,0.225,0.2255,0.226,0.227,0.2275,0.228,0.2285,0.229,0.2295,0.23,0.231,0.2315,0.232,0.2325,0.233,0.2335,0.234,0.235,0.2355,0.236,0.2365,0.237,0.238,0.2385,0.239,0.2395,0.24,0.241,0.2415,0.242,0.2425,0.243,0.244,0.2445,0.245,0.2455,0.246,0.247,0.2475,0.248,0.249,0.2495,0.25,0.2505,0.251,0.252,0.2525,0.253,0.254,0.2545,0.255,0.256,0.2565,0.257,0.258,0.2585,0.259,0.26,0.2605,0.261,0.262,0.2625,0.263,0.264,0.2645,0.265,0.266,0.2665,0.267,0.268,0.2685,0.269,0.27,0.271,0.2715,0.272,0.273,0.2735,0.274,0.275,0.276,0.2765,0.277,0.278,0.279,0.2795,0.28,0.281,0.282,0.2825,0.283,0.284,0.285,0.2855,0.286,0.287,0.288,0.2885,0.289,0.29,0.291,0.292,0.2925,0.293,0.294,0.295,0.296,0.2965,0.297,0.298,0.299,0.3,0.301,0.3015,0.302,0.303,0.304,0.305,0.306,0.307,0.3075,0.308,0.309,0.31,0.311,0.312,0.313,0.314,0.3145,0.315,0.316,0.317,0.318,0.319,0.32,0.321,0.322,0.323,0.324,0.325,0.326,0.327,0.328,0.329,0.33,0.331,0.332,0.333,0.334,0.335,0.336,0.337,0.338,0.339,0.34,0.341,0.342,0.343,0.344,0.345,0.346,0.347,0.349,0.35,0.351,0.352,0.353,0.354,0.355,0.357,0.358,0.359,0.36,0.361,0.363,0.364,0.365,0.366,0.367,0.369,0.37,0.371,0.373,0.374,0.375,0.376,0.378,0.379,0.381,0.382,0.383,0.385,0.386,0.387,0.389,0.39,0.392,0.393,0.395,0.396,0.398,0.399,0.401,0.402,0.404,0.406,0.407,0.409,0.411,0.412,0.414,0.416,0.417,0.419,0.421,0.423,0.424,0.426,0.428,0.43,0.432,0.434,0.436,0.438,0.44,0.442,0.444,0.446,0.448,0.45,0.453,0.455,0.457,0.46,0.462,0.464,0.467,0.469,0.472,0.474,0.477,0.48,0.483,0.485,0.488,0.491,0.494,0.497,0.501,0.504,0.507,0.511,0.514,0.518,0.522,0.525,0.529,0.534,0.538,0.542,0.547,0.552,0.557,0.562,0.568,0.574,0.58,0.587,0.594,0.602,0.61,0.619,0.629,0.64,0.653,0.668,0.687,0.711,0.749,0.999]),
            'betam2': np.array([0.251,0.288,0.313,0.331,0.346,0.359,0.371,0.381,0.39,0.398,0.406,0.413,0.419,0.426,0.432,0.437,0.442,0.448,0.452,0.457,0.462,0.466,0.47,0.474,0.478,0.482,0.485,0.489,0.492,0.496,0.499,0.502,0.505,0.508,0.511,0.514,0.517,0.52,0.522,0.525,0.528,0.53,0.533,0.535,0.538,0.54,0.542,0.545,0.547,0.549,0.551,0.553,0.555,0.558,0.56,0.562,0.564,0.566,0.567,0.569,0.571,0.573,0.575,0.577,0.579,0.58,0.582,0.584,0.586,0.587,0.589,0.591,0.592,0.594,0.595,0.597,0.599,0.6,0.602,0.603,0.605,0.606,0.608,0.609,0.61,0.612,0.613,0.615,0.616,0.617,0.619,0.62,0.622,0.623,0.624,0.626,0.627,0.628,0.629,0.631,0.632,0.633,0.634,0.636,0.637,0.638,0.639,0.64,0.642,0.643,0.644,0.645,0.646,0.647,0.649,0.65,0.651,0.652,0.653,0.654,0.655,0.656,0.657,0.658,0.659,0.66,0.662,0.663,0.664,0.665,0.666,0.667,0.668,0.669,0.67,0.671,0.672,0.673,0.674,0.675,0.676,0.6765000000000001,0.677,0.678,0.679,0.68,0.681,0.682,0.683,0.684,0.685,0.686,0.687,0.688,0.6884999999999999,0.689,0.69,0.691,0.692,0.693,0.694,0.695,0.6955,0.696,0.697,0.698,0.699,0.7,0.7004999999999999,0.701,0.702,0.703,0.704,0.705,0.7055,0.706,0.707,0.708,0.709,0.7095,0.71,0.711,0.712,0.7124999999999999,0.713,0.714,0.715,0.716,0.7164999999999999,0.717,0.718,0.719,0.7195,0.72,0.721,0.7215,0.722,0.723,0.724,0.7244999999999999,0.725,0.726,0.727,0.7275,0.728,0.729,0.7295,0.73,0.731,0.732,0.7324999999999999,0.733,0.734,0.7344999999999999,0.735,0.736,0.7364999999999999,0.737,0.738,0.7384999999999999,0.739,0.74,0.7404999999999999,0.741,0.742,0.7424999999999999,0.743,0.744,0.7444999999999999,0.745,0.746,0.7464999999999999,0.747,0.748,0.7484999999999999,0.749,0.7495,0.75,0.751,0.7515000000000001,0.752,0.753,0.7535000000000001,0.754,0.7545,0.755,0.756,0.7565,0.757,0.7575000000000001,0.758,0.759,0.7595000000000001,0.76,0.7605,0.761,0.762,0.7625,0.763,0.7635000000000001,0.764,0.765,0.7655000000000001,0.766,0.7665,0.767,0.768,0.7685,0.769,0.7695000000000001,0.77,0.7705,0.771,0.7715000000000001,0.772,0.773,0.7735000000000001,0.774,0.7745,0.775,0.7755000000000001,0.776,0.7765,0.777,0.778,0.7785,0.779,0.7795000000000001,0.78,0.7805,0.781,0.7815000000000001,0.782,0.7825,0.783,0.784,0.7845,0.785,0.7855000000000001,0.786,0.7865,0.787,0.7875000000000001,0.788,0.7885,0.789,0.7895000000000001,0.79,0.7905,0.791,0.7915000000000001,0.792,0.7925,0.793,0.7935000000000001,0.794,0.7945,0.795,0.7955000000000001,0.796,0.7965,0.797,0.7975000000000001,0.798,0.7985,0.799,0.7995000000000001,0.8,0.8005,0.801,0.8015000000000001,0.802,0.8025,0.803,0.8035000000000001,0.804,0.8045,0.805,0.8055000000000001,0.806,0.8063333333333333,0.8066666666666668,0.807,0.8075000000000001,0.808,0.8085,0.809,0.8095000000000001,0.81,0.8105,0.811,0.8115000000000001,0.812,0.8125,0.813,0.8133333333333332,0.8136666666666666,0.814,0.8145,0.815,0.8154999999999999,0.816,0.8165,0.817,0.8173333333333332,0.8176666666666667,0.818,0.8185,0.819,0.8194999999999999,0.82,0.8205,0.821,0.8213333333333332,0.8216666666666667,0.822,0.8225,0.823,0.8234999999999999,0.824,0.8245,0.825,0.8253333333333333,0.8256666666666667,0.826,0.8265,0.827,0.8274999999999999,0.828,0.8283333333333333,0.8286666666666667,0.829,0.8294999999999999,0.83,0.8303333333333333,0.8306666666666667,0.831,0.8314999999999999,0.832,0.8325,0.833,0.8333333333333333,0.8336666666666667,0.834,0.8345,0.835,0.8353333333333333,0.8356666666666667,0.836,0.8365,0.837,0.8373333333333333,0.8376666666666667,0.838,0.8385,0.839,0.8393333333333333,0.8396666666666667,0.84,0.8405,0.841,0.8413333333333333,0.8416666666666667,0.842,0.8425,0.843,0.8433333333333333,0.8436666666666667,0.844,0.8445,0.845,0.8453333333333333,0.8456666666666667,0.846,0.8465,0.847,0.8473333333333333,0.8476666666666667,0.848,0.8485,0.849,0.8493333333333333,0.8496666666666667,0.85,0.8503333333333333,0.8506666666666667,0.851,0.8514999999999999,0.852,0.8523333333333333,0.8526666666666667,0.853,0.8533333333333333,0.8536666666666667,0.854,0.8545,0.855,0.8553333333333333,0.8556666666666667,0.856,0.8563333333333333,0.8566666666666667,0.857,0.8574999999999999,0.858,0.8583333333333333,0.8586666666666667,0.859,0.8593333333333333,0.8596666666666667,0.86,0.8605,0.861,0.8613333333333333,0.8616666666666667,0.862,0.8623333333333333,0.8626666666666667,0.863,0.8633333333333333,0.8636666666666667,0.864,0.8643333333333333,0.8646666666666667,0.865,0.8654999999999999,0.866,0.8663333333333333,0.8666666666666667,0.867,0.8673333333333333,0.8676666666666667,0.868,0.8683333333333333,0.8686666666666667,0.869,0.8693333333333333,0.8696666666666667,0.87,0.8703333333333333,0.8706666666666667,0.871,0.8714999999999999,0.872,0.8723333333333333,0.8726666666666667,0.873,0.8733333333333333,0.8736666666666667,0.874,0.8743333333333333,0.8746666666666667,0.875,0.8753333333333333,0.8756666666666667,0.876,0.8763333333333333,0.8766666666666667,0.877,0.8773333333333333,0.8776666666666667,0.878,0.8783333333333333,0.8786666666666667,0.879,0.8793333333333333,0.8796666666666667,0.88,0.8803333333333333,0.8806666666666667,0.881,0.8813333333333333,0.8816666666666667,0.882,0.8823333333333333,0.8826666666666667,0.883,0.8833333333333333,0.8836666666666667,0.884,0.8843333333333333,0.8846666666666667,0.885,0.8853333333333333,0.8856666666666667,0.886,0.8863333333333333,0.8866666666666667,0.887,0.8873333333333333,0.8876666666666667,0.888,0.88825,0.8885000000000001,0.88875,0.889,0.8893333333333333,0.8896666666666667,0.89,0.8903333333333333,0.8906666666666667,0.891,0.8913333333333333,0.8916666666666667,0.892,0.8923333333333333,0.8926666666666667,0.893,0.8933333333333333,0.8936666666666667,0.894,0.89425,0.8945000000000001,0.89475,0.895,0.8953333333333333,0.8956666666666667,0.896,0.8963333333333333,0.8966666666666667,0.897,0.8973333333333333,0.8976666666666667,0.898,0.89825,0.8985000000000001,0.89875,0.899,0.8993333333333333,0.8996666666666667,0.9,0.9003333333333333,0.9006666666666667,0.901,0.9013333333333333,0.9016666666666667,0.902,0.90225,0.9025000000000001,0.90275,0.903,0.9033333333333333,0.9036666666666667,0.904,0.9043333333333333,0.9046666666666667,0.905,0.90525,0.9055,0.90575,0.906,0.9063333333333333,0.9066666666666667,0.907,0.90725,0.9075,0.9077500000000001,0.908,0.9083333333333333,0.9086666666666667,0.909,0.9093333333333333,0.9096666666666667,0.91,0.91025,0.9105000000000001,0.9107500000000001,0.911,0.9113333333333333,0.9116666666666667,0.912,0.91225,0.9125000000000001,0.9127500000000001,0.913,0.9133333333333333,0.9136666666666667,0.914,0.91425,0.9145000000000001,0.9147500000000001,0.915,0.9153333333333333,0.9156666666666667,0.916,0.91625,0.9165000000000001,0.9167500000000001,0.917,0.9173333333333333,0.9176666666666667,0.918,0.91825,0.9185000000000001,0.9187500000000001,0.919,0.9193333333333333,0.9196666666666667,0.92,0.92025,0.9205000000000001,0.9207500000000001,0.921,0.92125,0.9215,0.9217500000000001,0.922,0.9223333333333333,0.9226666666666667,0.923,0.92325,0.9235,0.9237500000000001,0.924,0.92425,0.9245000000000001,0.9247500000000001,0.925,0.9253333333333333,0.9256666666666667,0.926,0.92625,0.9265000000000001,0.9267500000000001,0.927,0.92725,0.9275,0.9277500000000001,0.928,0.9283333333333333,0.9286666666666668,0.929,0.92925,0.9295,0.9297500000000001,0.93,0.93025,0.9305000000000001,0.9307500000000001,0.931,0.93125,0.9315,0.9317500000000001,0.932,0.9323333333333333,0.9326666666666668,0.933,0.93325,0.9335,0.9337500000000001,0.934,0.93425,0.9345000000000001,0.9347500000000001,0.935,0.93525,0.9355,0.9357500000000001,0.936,0.93625,0.9365000000000001,0.9367500000000001,0.937,0.93725,0.9375,0.93775,0.938,0.9383333333333332,0.9386666666666666,0.939,0.9392499999999999,0.9395,0.93975,0.94,0.9402499999999999,0.9404999999999999,0.94075,0.941,0.9412499999999999,0.9415,0.94175,0.942,0.9422499999999999,0.9424999999999999,0.94275,0.943,0.9432499999999999,0.9435,0.94375,0.944,0.9442499999999999,0.9444999999999999,0.94475,0.945,0.9452499999999999,0.9455,0.94575,0.946,0.9462499999999999,0.9464999999999999,0.94675,0.947,0.9472499999999999,0.9475,0.94775,0.948,0.9482499999999999,0.9484999999999999,0.94875,0.949,0.9492499999999999,0.9495,0.94975,0.95,0.9502499999999999,0.9504999999999999,0.95075,0.951,0.9512499999999999,0.9515,0.95175,0.952,0.9522499999999999,0.9524999999999999,0.95275,0.953,0.9531999999999999,0.9533999999999999,0.9536,0.9538,0.954,0.9542499999999999,0.9544999999999999,0.95475,0.955,0.9552499999999999,0.9555,0.95575,0.956,0.9562499999999999,0.9564999999999999,0.95675,0.957,0.9572499999999999,0.9575,0.95775,0.958,0.9581999999999999,0.9583999999999999,0.9586,0.9588,0.959,0.9592499999999999,0.9595,0.95975,0.96,0.9602499999999999,0.9604999999999999,0.96075,0.961,0.9612499999999999,0.9615,0.96175,0.962,0.9621999999999999,0.9623999999999999,0.9626,0.9628,0.963,0.9632499999999999,0.9635,0.96375,0.964,0.9642499999999999,0.9644999999999999,0.96475,0.965,0.9652,0.9653999999999999,0.9656,0.9658,0.966,0.9662499999999999,0.9664999999999999,0.96675,0.967,0.9672499999999999,0.9675,0.96775,0.968,0.9682,0.9683999999999999,0.9686,0.9688,0.969,0.96925,0.9695,0.96975,0.97,0.9702,0.9703999999999999,0.9706,0.9708,0.971,0.97125,0.9715,0.97175,0.972,0.9722,0.9723999999999999,0.9726,0.9728,0.973,0.97325,0.9735,0.97375,0.974,0.9742,0.9743999999999999,0.9746,0.9748,0.975,0.97525,0.9755,0.97575,0.976,0.9762,0.9763999999999999,0.9766,0.9768,0.977,0.97725,0.9775,0.97775,0.978,0.9782,0.9783999999999999,0.9786,0.9788,0.979,0.97925,0.9795,0.97975,0.98,0.9802,0.9803999999999999,0.9806,0.9808,0.981,0.9812,0.9813999999999999,0.9816,0.9818,0.982,0.98225,0.9824999999999999,0.98275,0.983,0.9832,0.9833999999999999,0.9836,0.9838,0.984,0.9842,0.9843999999999999,0.9846,0.9848,0.985,0.98525,0.9855,0.98575,0.986,0.9862,0.9863999999999999,0.9866,0.9868,0.987,0.9872,0.9873999999999999,0.9876,0.9878,0.988,0.9882,0.9884,0.9886,0.9888,0.989,0.98925,0.9895,0.98975,0.99,0.9902,0.9904,0.9906,0.9908,0.991,0.9912,0.9914,0.9916,0.9918,0.992,0.9922,0.9924,0.9926,0.9928,0.993,0.9932,0.9934,0.9936,0.9938,0.994,0.9942,0.9944,0.9946,0.9948,0.995,0.9952,0.9954,0.9956,0.9958,0.996,0.9962,0.9964,0.9966,0.9968,0.997,0.9972,0.9974,0.9976,0.9978,0.998,0.9982,0.9984,0.9986,0.9988,0.999,0.999,0.999,0.999,0.999])
        }

        # List of the maximal distances to the significance niveau 'KS_Alpha', the samplesize 'numMinAppearance' and the single
        # distributions in the initial KS-tests
        self.crit_dist_ini = {
            0.05: {
                20: {
                    'uni': 0.291328932926, 'nor': 0.193089576397, 'beta1': 0.288470457906, 'beta2': 0.186764430369,
                    'beta4': 0.21131117329
                },
                50: {
                    'uni': 0.187857939084, 'nor': 0.124976281159, 'beta1': 0.187579279621, 'beta2': 0.120739023025,
                    'beta4': 0.1472078114
                },
                100: {
                    'uni': 0.133759516365, 'nor': 0.0890663949534, 'beta1': 0.13405821848, 'beta2': 0.0861800886195,
                    'beta4': 0.11
                },
                150: {
                    'uni': 0.109587712896, 'nor': 0.0731082119117, 'beta1': 0.10960917714, 'beta2': 0.0706864579564,
                    'beta4': 0.0926528616077
                },
                200: {
                    'uni': 0.0950292895371, 'nor': 0.0633952199486, 'beta1': 0.0951133976321, 'beta2': 0.0614202560412,
                    'beta4': 0.0811635018839
                }
            },
            'xxx': {'xxx': {'uni': 0.1, 'nor': 0.1, 'beta1': 0.1, 'beta2': 0.1, 'beta4': 0.1}}
        }

        # List of the maximal distances to the significance niveau 'KS_Alpha', the samplesize 'numMinAppearance' in the initialisation and 
        # the samplesize 'numUpdate' in the update step and the single distributions in the sKS-tests in the update steps
        self.crit_dist_upd = {
            0.05: {
                100: {
                    50: {
                        'uni': 0.190726544783, 'nor': 0.211109731822, 'beta1': 0.188363406074, 'beta2': 0.224903845576,
                        'beta4': 0.210517767028
                    }
                }
            },
            'xxx': {'xxx': {'xxx': {'uni': 0.1, 'nor': 0.1, 'beta1': 0.1, 'beta2': 0.1, 'beta4': 0.1}}}
        }

        if self.options['usedMultinomialTest'] == 'Approx':
            # Stores the number of minimal successes for the BT with samplesize 20, 30, 50, 100, 200, 1000 and a probability of
            # 0.1, 0.05, 0.025
            self.bt_min_succ_data = {
                'num_bt = 1000, alpha = 0.1': [0.00010537719726562501, 0.00053192138671875, 0.0011025695800781247, 0.001745849609375, 0.002434478759765625, 0.0031548461914062496, 0.0038988952636718746, 0.004661621093749999, 0.0054394836425781246, 0.00622998046875, 0.007031219482421876, 0.007841796875000001, 0.008660491943359376, 0.009486450195312503, 0.010318756103515628, 0.011156921386718754, 0.01200039672851563, 0.012848632812500007, 0.013701263427734384, 0.014557983398437509, 0.015418487548828134, 0.01628247070312501, 0.017149749755859388, 0.018020080566406263, 0.01889334106445314, 0.019769226074218764, 0.02064773559570314, 0.021528625488281265, 0.022411773681640636, 0.02329711914062501, 0.024184600830078132, 0.025073974609375008, 0.025965240478515637, 0.026858337402343765, 0.027753143310546888, 0.028649597167968763, 0.029547637939453135, 0.030447204589843763, 0.031348175048828135, 0.03225061035156251, 0.03315444946289064, 0.03405950927734376, 0.03496591186523438, 0.035873535156250004, 0.03678231811523438, 0.037692199707031256, 0.03860324096679688, 0.03951538085937501, 0.04042855834960939, 0.041342712402343766, 0.04225790405273439, 0.043174011230468774, 0.04409109497070315, 0.04500903320312503, 0.04592788696289065, 0.046847595214843774, 0.04776815795898439, 0.04868951416015627, 0.0496116638183594, 0.050534606933593774, 0.05145828247070316, 0.05238275146484379, 0.05330795288085941, 0.054233825683593785, 0.05516036987304691, 0.05608764648437504, 0.05701559448242192, 0.0579441528320313, 0.058873382568359424, 0.05980322265625005, 0.060733673095703176, 0.0616647338867188, 0.06259634399414066, 0.06352856445312505, 0.06446139526367192, 0.06539471435546879, 0.06632864379882816, 0.06726306152343753, 0.06819802856445314, 0.06913348388671878, 0.07006948852539066, 0.07100598144531253, 0.07194296264648442, 0.07288037109375006, 0.07381832885742196, 0.07475677490234384, 0.07569564819335947, 0.07663494873046883, 0.07757473754882821, 0.07851495361328134, 0.0794555969238282, 0.08039666748046884, 0.0813381652832032, 0.08228002929687508, 0.08322238159179696, 0.08416510009765632, 0.08510824584960947, 0.0860517578125001, 0.08699563598632823, 0.08793994140625011, 0.08888455200195325, 0.08982958984375011, 0.0907749938964845, 0.09172076416015637, 0.0926668395996095, 0.09361334228515636, 0.09456015014648447, 0.0955073242187501, 0.09645480346679697, 0.09740264892578135, 0.09835079956054699, 0.09929931640625012, 0.10024807739257824, 0.10119726562500012, 0.10214669799804699, 0.10309643554687511, 0.10404653930664076, 0.10499694824218764, 0.10594760131835951, 0.10689855957031263, 0.10784988403320328, 0.10880145263671892, 0.10975332641601579, 0.11070544433593765, 0.11165786743164077, 0.11261059570312515, 0.11356356811523452, 0.11451684570312515, 0.11547036743164077, 0.11642419433593765, 0.11737826538085952, 0.11833258056640639, 0.11928720092773451, 0.12024206542968766, 0.1211971740722658, 0.12215252685546893, 0.12310818481445332, 0.12406402587890647, 0.12502017211914085, 0.12597650146484402, 0.12693313598632844, 0.1278899536132816, 0.128847076416016, 0.12980438232421915, 0.13076193237304728, 0.13171972656250042, 0.13267776489257854, 0.13363598632812546, 0.13459445190429736, 0.13555316162109426, 0.13651211547851616, 0.1374712524414068, 0.1384306335449224, 0.13939019775390682, 0.14035000610351622, 0.14130999755859436, 0.1422702331542975, 0.14323065185546935, 0.1441913146972662, 0.14515216064453185, 0.14611318969726622, 0.14707446289062565, 0.1480359191894538, 0.14899761962890695, 0.14995944213867257, 0.15092150878906319, 0.1518837585449226, 0.15284625244140698, 0.15380886840820385, 0.1547717285156257, 0.1557347717285163, 0.15669799804687568, 0.15766140747070378, 0.15862500000000063, 0.15958877563476626, 0.16055273437500062, 0.16151693725586003, 0.1624812622070319, 0.16344577026367252, 0.16441046142578192, 0.16537533569336005, 0.1663403930664069, 0.1673056335449225, 0.1682710571289069, 0.16923660278320374, 0.17020239257812564, 0.17116830444336, 0.17213439941406317, 0.17310067749023506, 0.17406707763671947, 0.17503372192382888, 0.17600048828125076, 0.17696737670898516, 0.17793450927734455, 0.17890176391601642, 0.17986920166015702, 0.18083676147461014, 0.18180456542968826, 0.18277243041992264, 0.18374053955078207, 0.18470877075195397, 0.1856771240234384, 0.18664566040039154, 0.18761437988281343, 0.18858322143554784, 0.189552246093751, 0.1905213928222666, 0.191490722656251, 0.19246017456054787, 0.19342980957031353, 0.19439956665039165, 0.19536950683593857, 0.196339569091798, 0.1973097534179699, 0.19828012084961055, 0.19925061035156372, 0.2002212829589856, 0.20119207763672003, 0.20216299438476693, 0.20313409423828255, 0.2041053161621107, 0.20507672119140757, 0.20604818725586072, 0.2070198364257826, 0.2079916687011732, 0.20896356201172006, 0.20993563842773566, 0.21090783691406378, 0.21188021850586064, 0.21285266113281376, 0.21382528686523566, 0.21479803466797004, 0.21577090454101694, 0.21674395751953257, 0.21771707153320446, 0.2186903686523451, 0.21966378784179824, 0.22063732910156386, 0.221610992431642, 0.22258483886718888, 0.22355874633789202, 0.2245328369140639, 0.2255070495605483, 0.22648138427734515, 0.22745584106445454, 0.2284304199218764, 0.2294051208496108, 0.23037994384765764, 0.23135494995117323, 0.23233001708984508, 0.23330520629882945, 0.23428057861328255, 0.23525601196289192, 0.23623162841797002, 0.23720730590820438, 0.23818316650390753, 0.23915908813476694, 0.24013519287109508, 0.2411113586425795, 0.24208764648437636, 0.24306411743164197, 0.24404064941406384, 0.24501730346679823, 0.24599414062500136, 0.24697103881836074, 0.2479480590820326, 0.24892520141601698, 0.24990246582031383, 0.25087985229492316, 0.251857360839845, 0.2528349304199231, 0.25381268310547, 0.25479049682617305, 0.2557684936523449, 0.256746551513673, 0.2577247314453136, 0.25870303344726675, 0.2596814575195324, 0.26065994262695436, 0.26163861083984497, 0.26261734008789184, 0.26359619140625123, 0.26457516479492316, 0.2655542602539076, 0.2665334167480483, 0.2675127563476577, 0.26849215698242335, 0.2694716796875015, 0.2704513244628922, 0.2714310302734392, 0.2724109191894548, 0.2733908691406267, 0.27437094116211114, 0.2753510742187518, 0.2763313293457049, 0.2773117675781268, 0.2782922058105487, 0.2792728271484394, 0.2802535095214863, 0.28123431396484566, 0.28221524047851754, 0.28319628906250194, 0.2841773986816426, 0.2851586303710957, 0.286139923095705, 0.28712139892578314, 0.28810293579101753, 0.28908459472656445, 0.2900663146972675, 0.2910481567382831, 0.2920301208496112, 0.2930121459960956, 0.2939942932128925, 0.2949765625000019, 0.2959589538574239, 0.296941406250002, 0.29792391967773635, 0.2989066162109395, 0.2998893737792989, 0.3008721923828146, 0.30185519409179906, 0.3028382568359398, 0.3038213806152368, 0.3048046264648462, 0.3057879943847681, 0.30677148437500257, 0.3077550354003933, 0.30873864746094026, 0.3097224426269559, 0.3107062377929716, 0.311690216064456, 0.3126742553710967, 0.3136583557128937, 0.31464263916015933, 0.315626922607425, 0.3166113891601594, 0.3175959167480501, 0.31858050537109706, 0.3195652160644564, 0.3205500488281283, 0.3215349426269565, 0.32251995849609716, 0.3235050354003941, 0.32449023437500346, 0.3254754943847691, 0.3264608764648472, 0.3274463806152379, 0.32843194580078483, 0.3294175720214879, 0.3304033813476598, 0.33138919067383166, 0.33237512207031605, 0.333361175537113, 0.33434729003906616, 0.33533352661133187, 0.33631982421875384, 0.3373062438964882, 0.33829272460937887, 0.33927932739258204, 0.3402659912109415, 0.34125277709961344, 0.34223962402344166, 0.3432265930175824, 0.3442136230468794, 0.34520077514648884, 0.3461879882812545, 0.34717532348633273, 0.3481627197265672, 0.34915017700195794, 0.35013781738281735, 0.35112545776367676, 0.3521132202148487, 0.35310110473633316, 0.3540890502929739, 0.35507705688477087, 0.35606518554688027, 0.3570534362793022, 0.3580417480468804, 0.35903012084961483, 0.3600186157226618, 0.36100717163086493, 0.3619957885742243, 0.3629845886230525, 0.36397338867188067, 0.36496231079102137, 0.3659513549804745, 0.3669403991699276, 0.3679296264648495, 0.3689188537597714, 0.3699082641601621, 0.3708976745605528, 0.3718872070312559, 0.3728768615722715, 0.3738665771484434, 0.37485635375977155, 0.37584625244141223, 0.37683621215820917, 0.37782623291016226, 0.3788163757324279, 0.379806640625006, 0.38079690551758416, 0.3817873535156311, 0.382777801513678, 0.38376837158203736, 0.3847590637207092, 0.3857497558593811, 0.38674063110352175, 0.3877315063476624, 0.38872250366211547, 0.38971362304688106, 0.39070474243164666, 0.39169604492188104, 0.3926873474121154, 0.3936787719726623, 0.39467031860352164, 0.39566186523438096, 0.3966535339355528, 0.3976453247070372, 0.3986371765136778, 0.3996290893554747, 0.4006211242675841, 0.4016132202148498, 0.40260537719727174, 0.4035976562500061, 0.4045899963378967, 0.40558245849609986, 0.40657498168945927, 0.40756756591797494, 0.40856027221680313, 0.4095530395507876, 0.4105458679199283, 0.41153881835938144, 0.41253182983399084, 0.4135249023437565, 0.4145180969238347, 0.4155113525390691, 0.4165047302246161, 0.4174981689453192, 0.4184916687011786, 0.4194852905273505, 0.4204789733886787, 0.4214727172851631, 0.42246658325196007, 0.4234605102539132, 0.42445449829102255, 0.42544860839844445, 0.4264427795410226, 0.42743701171875703, 0.428431365966804, 0.4294257812500071, 0.4304203186035227, 0.4314149169921946, 0.43240957641602273, 0.43340429687500714, 0.4343991394043041, 0.43539404296875717, 0.4363890686035228, 0.43738415527344465, 0.4383793029785228, 0.43937457275391345, 0.4403698425293041, 0.44136529541016345, 0.4423607482910228, 0.44335632324219465, 0.4443519592285228, 0.4453477172851634, 0.44634353637696034, 0.4473394165039134, 0.448335418701179, 0.44933148193360084, 0.45032760620117895, 0.4513238525390696, 0.4523201599121165, 0.45331652832031955, 0.45431295776367886, 0.4553095092773507, 0.45630618286133506, 0.45730285644531943, 0.4582996520996163, 0.45929650878906936, 0.4602934875488349, 0.46129052734375675, 0.46228762817383484, 0.46328485107422546, 0.46428213500977233, 0.46527947998047536, 0.46627688598633465, 0.46727441406250647, 0.46827200317383455, 0.46926971435547515, 0.470267486572272, 0.47126531982422515, 0.4722632751464908, 0.47326123046875646, 0.4742593688964908, 0.4752575073242251, 0.47625576782227197, 0.4772540893554751, 0.47825247192383447, 0.47925097656250637, 0.48024954223633454, 0.48124822998047523, 0.4822469787597722, 0.4832457885742253, 0.48424465942383466, 0.48524365234375655, 0.4862427062988347, 0.4872418212890691, 0.48824105834961606, 0.48924035644531916, 0.4902397155761785, 0.4912391967773504, 0.49223873901367854, 0.4932384033203192, 0.4942380676269599, 0.49523785400391296, 0.49623776245117857, 0.4972376708984442, 0.4982377014160223, 0.49923785400391296, 0.5002380065918036, 0.5012382812500068, 0.5022386779785225, 0.5032390747070382, 0.5042395935058663, 0.505240234375007, 0.5062408752441475, 0.5072416381836006, 0.5082425231933662, 0.5092434082031317, 0.5102444152832099, 0.5112454833984442, 0.5122466735839911, 0.5132479248046943, 0.5142492370605537, 0.5152506713867255, 0.5162521667480537, 0.5172537231445381, 0.5182554016113349, 0.5192571411132879, 0.5202589416503972, 0.521260864257819, 0.5222628479003971, 0.5232648925781315, 0.5242670593261783, 0.5252692871093815, 0.5262715759277409, 0.5272739868164127, 0.5282764587402409, 0.5292790527343815, 0.530281646728522, 0.531284362792975, 0.5322872009277405, 0.5332901000976623, 0.5342930603027404, 0.5352960815429747, 0.5362992248535216, 0.5373024291992247, 0.5383057556152403, 0.5393091430664122, 0.5403125915527404, 0.541316162109381, 0.542319793701178, 0.5433234863281312, 0.544327301025397, 0.5453311767578188, 0.546335113525397, 0.5473391723632876, 0.5483432922363344, 0.5493475341796937, 0.5503517761230531, 0.5513562011718812, 0.5523606262207094, 0.55336517333985, 0.5543698425293032, 0.5553745117187564, 0.5563793029785221, 0.5573842163086004, 0.5583891906738349, 0.5593942260742256, 0.5603993225097726, 0.5614045410156322, 0.5624098815918042, 0.563415222167976, 0.5644207458496165, 0.5654262695312572, 0.5664319152832104, 0.5674376220703198, 0.5684434509277417, 0.56944934082032, 0.5704552917480544, 0.5714613647461014, 0.5724674987793047, 0.5734737548828205, 0.5744800720214924, 0.5754864501953205, 0.576492950439461, 0.5774995727539142, 0.5785061950683673, 0.579512939453133, 0.5805198059082112, 0.5815267333984456, 0.5825337219238363, 0.5835408325195396, 0.5845480041503991, 0.5855552368164149, 0.586562591552743, 0.5875700073242273, 0.5885775451660241, 0.5895851440429772, 0.5905928649902429, 0.5916006469726648, 0.5926085510253992, 0.5936165161132899, 0.5946245422363369, 0.5956326904296964, 0.5966408996582121, 0.5976492309570403, 0.5986576232910245, 0.599666076660165, 0.6006746520996181, 0.6016833496093837, 0.6026921081543056, 0.6037009277343838, 0.6047098693847744, 0.6057188720703214, 0.6067279968261808, 0.6077371826171966, 0.6087464904785247, 0.6097558593750089, 0.6107653503418057, 0.6117749023437588, 0.6127845764160244, 0.6137943115234462, 0.6148041076660243, 0.615814025878915, 0.6168240661621182, 0.6178341674804776, 0.6188443298339933, 0.6198546142578214, 0.6208650207519618, 0.6218754882812586, 0.6228860168457117, 0.6238966674804772, 0.6249074401855553, 0.6259182739257897, 0.6269291687011803, 0.6279401855468835, 0.6289513244628991, 0.629962524414071, 0.6309738464355553, 0.6319852294921958, 0.6329966735839926, 0.6340083007812581, 0.6350199279785237, 0.636031738281258, 0.6370436096191486, 0.6380555419921955, 0.6390675964355549, 0.6400797119140705, 0.6410919494628986, 0.6421043090820392, 0.6431167297363359, 0.6441292724609452, 0.6451418762207107, 0.6461546020507888, 0.6471674499511794, 0.6481803588867262, 0.6491933288574293, 0.6502064208984449, 0.651219635009773, 0.6522329711914135, 0.6532463684082103, 0.6542598266601632, 0.6552734069824288, 0.6562871093750068, 0.6573009338378973, 0.6583148193359442, 0.6593288269043035, 0.6603428955078191, 0.6613570861816471, 0.6623713378906314, 0.6633857727050844, 0.6644002075195373, 0.6654148254394591, 0.6664295043945371, 0.6674443054199276, 0.6684591674804744, 0.6694741516113337, 0.6704892578125056, 0.6715044860839899, 0.6725197753906306, 0.6735351867675837, 0.6745506591796931, 0.675566253662115, 0.6765819702148493, 0.6775978088378961, 0.6786137084960991, 0.6796297302246147, 0.6806458740234428, 0.6816621398925834, 0.6826784667968803, 0.6836949157714897, 0.6847114257812553, 0.6857281188964898, 0.6867448730468805, 0.6877617492675837, 0.6887786865234432, 0.6897958068847714, 0.6908129882812556, 0.6918302917480524, 0.6928476562500056, 0.6938652038574274, 0.6948828125000056, 0.6959005432128963, 0.6969183959960995, 0.6979363708496152, 0.6989544067382871, 0.6999726257324276, 0.7009909057617244, 0.7020093078613338, 0.7030278320312556, 0.7040464172363338, 0.7050651855468807, 0.7060840148925839, 0.7071029663085996, 0.7081220397949277, 0.7091412353515684, 0.7101605529785214, 0.711179992675787, 0.7121994934082089, 0.7132191772460995, 0.7142389221191464, 0.7152587890625058, 0.7162787780761777, 0.717298889160162, 0.7183191833496151, 0.7193395385742244, 0.72035995483399, 0.7213805541992243, 0.7224012756347712, 0.7234221191406306, 0.7244430847168024, 0.7254641723632868, 0.7264853210449272, 0.7275066528320365, 0.7285281066894583, 0.7295496826171927, 0.7305713195800833, 0.7315931396484426, 0.7326150817871144, 0.7336371459960987, 0.7346593322753955, 0.7356816406250047, 0.7367040710449265, 0.7377266235351608, 0.7387492980957077, 0.7397721557617233, 0.740795074462895, 0.7418181762695356, 0.7428413391113323, 0.7438646850585978, 0.7448881530761758, 0.7459117431640664, 0.7469355163574257, 0.7479593505859413, 0.7489833679199255, 0.7500074462890659, 0.7510317077636751, 0.7520561523437531, 0.7530806579589874, 0.7541053466796904, 0.755130157470706, 0.756155090332034, 0.7571801452636745, 0.7582053833007837, 0.7592307434082054, 0.7602562255859396, 0.7612818908691427, 0.762307617187502, 0.7633335876464861, 0.7643596191406264, 0.7653858337402356, 0.7664121704101573, 0.7674386901855478, 0.7684653320312508, 0.7694920959472663, 0.7705190429687506, 0.7715461120605475, 0.7725733642578131, 0.7736007385253911, 0.7746282348632817, 0.7756559143066409, 0.776683776855469, 0.7777117614746095, 0.7787398681640626, 0.7797681579589845, 0.7807966308593751, 0.7818252258300783, 0.7828540039062502, 0.7838829040527345, 0.7849119873046876, 0.7859411926269532, 0.7869705810546875, 0.7880001525878907, 0.7890299072265625, 0.7900597839355469, 0.7910897827148436, 0.7921200256347655, 0.7931503906249998, 0.794180938720703, 0.7952116699218748, 0.7962425231933591, 0.7972735595703121, 0.7983047790527339, 0.7993361816406245, 0.8003677673339838, 0.8013994750976556, 0.8024314270019525, 0.8034635009765617, 0.8044957580566398, 0.8055281982421866, 0.8065608215332022, 0.8075936279296864, 0.8086266174316393, 0.8096597900390611, 0.8106932067871079, 0.8117267456054672, 0.8127604675292952, 0.813794372558592, 0.8148285217285137, 0.815862792968748, 0.8168973083496073, 0.8179320068359354, 0.8189668884277322, 0.8200019531249979, 0.8210372619628884, 0.8220726928710914, 0.8231084289550757, 0.8241442871093726, 0.8251803894042945, 0.8262166748046852, 0.8272532043457009, 0.8282899169921852, 0.8293268127441383, 0.8303639526367165, 0.8314012756347634, 0.8324388427734353, 0.8334766540527322, 0.8345146484374978, 0.8355528869628884, 0.8365913085937479, 0.8376299743652321, 0.8386688842773414, 0.8397080383300758, 0.8407473754882789, 0.841786956787107, 0.8428267822265602, 0.8438668518066382, 0.8449071655273414, 0.8459476623535132, 0.8469884643554663, 0.8480295104980443, 0.8490707397460912, 0.8501122741699192, 0.8511540527343723, 0.8521960754394503, 0.8532384033203096, 0.8542809143066378, 0.8553237304687472, 0.8563667907714815, 0.8574101562499971, 0.8584537658691377, 0.8594976196289034, 0.8605417785644504, 0.8615862426757785, 0.8626309509277316, 0.863675964355466, 0.8647212219238255, 0.8657667846679661, 0.866812652587888, 0.8678588256835912, 0.8689053039550755, 0.8699520874023411, 0.8709991149902317, 0.8720465087890599, 0.8730942077636693, 0.8741422119140599, 0.8751905212402318, 0.8762391967773412, 0.8772881774902318, 0.8783374633789036, 0.879387115478513, 0.8804371337890599, 0.881487457275388, 0.8825381469726538, 0.8835892028808568, 0.8846405639648413, 0.8856922912597632, 0.886744445800779, 0.887796905517576, 0.8888497924804667, 0.8899030456542949, 0.8909566650390605, 0.89201071166992, 0.8930651245117168, 0.8941199645996075, 0.8951751708984357, 0.8962308654785137, 0.8972869262695294, 0.8983434143066388, 0.899400329589842, 0.900457733154295, 0.9015155639648419, 0.9025738220214824, 0.903632568359373, 0.9046917419433572, 0.9057514648437478, 0.906811614990232, 0.9078722534179663, 0.9089334411621067, 0.9099951171874973, 0.9110572814941379, 0.9121199951171847, 0.9131832580566378, 0.9142470703124973, 0.9153114318847629, 0.9163763427734348, 0.9174418640136691, 0.9185079345703097, 0.9195746765136691, 0.9206419677734347, 0.9217098693847627, 0.9227784423828097, 0.9238476867675752, 0.9249175415039033, 0.9259881286621064, 0.9270593872070282, 0.9281313781738249, 0.9292041015624966, 0.9302774963378871, 0.9313517456054652, 0.9324267272949184, 0.9335025024414026, 0.9345790710449183, 0.9356565551757777, 0.9367348327636683, 0.9378140258789026, 0.9388941345214806, 0.9399751586914024, 0.941057098388668, 0.9421400756835899, 0.9432240905761681, 0.9443091430664025, 0.9453952331542931, 0.9464824218749962, 0.9475708312988242, 0.9486603393554648, 0.9497511291503867, 0.95084320068359, 0.9519365539550743, 0.9530312499999961, 0.9541274108886679, 0.9552249755859336, 0.9563241271972618, 0.9574248046874961, 0.9585271301269492, 0.9596312255859335, 0.9607370910644492, 0.9618448486328085, 0.9629546203613241, 0.964066406249996, 0.9651803894042928, 0.9662966308593709, 0.9674153137206989, 0.9685365600585895, 0.969660491943355, 0.9707873535156205, 0.9719172058105424, 0.9730503540039018, 0.9741870422363237, 0.9753275146484331, 0.976472015380855, 0.9776209716796831, 0.9787746887206988, 0.9799337158203082, 0.9810985412597611, 0.9822698364257768, 0.9834483337402299, 0.9846350097656206, 0.9858310241699174, 0.987037719726558, 0.9882571716308547, 0.9894917602539016, 0.9907451477050735, 0.9920223388671828, 0.9933315124511671, 0.9946865234374952, 0.9961158752441358, 0.9977000732421827],
                'num_bt = 1000, alpha = 0.05,': [5.1300048828125e-05, 0.00035546875, 0.0008181457519531249, 0.001367431640625, 0.0019721374511718747, 0.002616149902343749, 0.0032897644042968735, 0.003986877441406248, 0.0047030334472656235, 0.005435119628906249, 0.006180877685546875, 0.006938415527343749, 0.007706207275390624, 0.008483215332031249, 0.009268402099609375, 0.010061035156249998, 0.010860321044921874, 0.011665710449218752, 0.012476776123046877, 0.013293029785156254, 0.01411404418945313, 0.014939575195312506, 0.015769256591796878, 0.016602905273437503, 0.017440155029296876, 0.0182808837890625, 0.019124908447265623, 0.01997198486328125, 0.020821990966796877, 0.0216748046875, 0.022530242919921874, 0.02338818359375, 0.024248565673828125, 0.0251112060546875, 0.02597610473632813, 0.02684307861328126, 0.02771206665039063, 0.028583007812500005, 0.029455841064453134, 0.03033050537109376, 0.03120687866210939, 0.03208489990234376, 0.03296456909179689, 0.03384582519531252, 0.0347286071777344, 0.03561279296875002, 0.03649844360351565, 0.03738549804687503, 0.038273895263671906, 0.03916351318359378, 0.04005447387695316, 0.04094659423828129, 0.04183999633789067, 0.04273449707031255, 0.04363015747070318, 0.04452685546875006, 0.04542471313476568, 0.046323608398437556, 0.04722348022460943, 0.048124389648437564, 0.04902621459960944, 0.04992907714843756, 0.0508327941894532, 0.05173748779296882, 0.052643035888671946, 0.053549438476562565, 0.05445669555664069, 0.05536480712890631, 0.05627371215820319, 0.05718347167968756, 0.05809396362304694, 0.05900524902343756, 0.05991732788085944, 0.06083007812500007, 0.06174356079101569, 0.06265783691406254, 0.06357272338867193, 0.06448834228515629, 0.06540463256835943, 0.0663215942382813, 0.06723916625976567, 0.0681574096679688, 0.06907632446289066, 0.06999578857421879, 0.07091592407226566, 0.0718366088867188, 0.07275790405273444, 0.07367980957031256, 0.07460226440429693, 0.07552526855468755, 0.07644888305664069, 0.07737298583984381, 0.07829763793945319, 0.07922283935546881, 0.08014852905273445, 0.08107476806640634, 0.08200155639648449, 0.08292877197265636, 0.08385653686523448, 0.08478479003906261, 0.08571347045898448, 0.08664270019531259, 0.08757235717773446, 0.08850244140625008, 0.08943307495117195, 0.09036407470703131, 0.09129556274414069, 0.09222747802734382, 0.09315982055664071, 0.09409265136718759, 0.09502584838867195, 0.09595947265625007, 0.09689352416992195, 0.09782800292968757, 0.0987628479003907, 0.09969812011718757, 0.1006338195800782, 0.10156982421875008, 0.10250631713867195, 0.10344311523437508, 0.10438034057617196, 0.10531793212890633, 0.10625588989257823, 0.10719415283203138, 0.10813284301757825, 0.10907189941406262, 0.1100113220214845, 0.11095104980468765, 0.11189114379882828, 0.1128316040039064, 0.11377243041992202, 0.11471350097656266, 0.11565499877929702, 0.11659680175781265, 0.11753890991210952, 0.11848138427734389, 0.11942416381835952, 0.1203672485351564, 0.12131063842773454, 0.12225439453125017, 0.12319839477539082, 0.12414276123046897, 0.1250874328613284, 0.12603234863281282, 0.1269776306152347, 0.12792315673828158, 0.12886904907226598, 0.12981518554687538, 0.13076162719726603, 0.13170831298828167, 0.13265536499023484, 0.133602661132813, 0.13455020141601615, 0.13549804687500056, 0.13644619750976617, 0.13739459228515677, 0.13834323120117237, 0.13929223632812548, 0.1402414245605474, 0.14119091796875055, 0.1421406555175787, 0.14309063720703186, 0.14404092407226626, 0.14499145507812566, 0.14594223022461006, 0.14689324951171945, 0.14784451293945383, 0.14879608154296942, 0.1497478332519538, 0.15069989013671942, 0.15165219116211004, 0.15260467529296945, 0.15355746459961006, 0.15451043701171946, 0.15546371459961006, 0.15641717529296945, 0.15737088012695383, 0.1583248291015632, 0.15927902221679757, 0.160233459472657, 0.16118807983398514, 0.1621429443359383, 0.16309805297851643, 0.16405340576171956, 0.16500894165039143, 0.1659647216796883, 0.16692068481445393, 0.16787689208984458, 0.1688333435058602, 0.16978997802734463, 0.1707467956542978, 0.1717039184570322, 0.17266116333007908, 0.17361865234375096, 0.17457638549804783, 0.17553430175781348, 0.17649240112304787, 0.1774507446289073, 0.17840927124023548, 0.17936804199218864, 0.18032699584961054, 0.18128613281250117, 0.18224545288086058, 0.183205017089845, 0.18416476440429813, 0.18512469482422, 0.1860848083496106, 0.1870451660156262, 0.1880057067871106, 0.1889664306640637, 0.18992733764648562, 0.19088842773437625, 0.19184976196289188, 0.19281121826172004, 0.1937729187011732, 0.1947347412109388, 0.19569680786132942, 0.19665905761718883, 0.19762149047851696, 0.19858404541015756, 0.19954684448242316, 0.20050982666015754, 0.20147299194336066, 0.20243627929687624, 0.20339981079101682, 0.20436346435546993, 0.20532736206054802, 0.20629138183593865, 0.20725558471679806, 0.20822003173828246, 0.20918460083007934, 0.21014929199218874, 0.21111422729492313, 0.21207928466797, 0.21304458618164185, 0.21401000976562623, 0.21497561645507934, 0.21594134521484498, 0.21690731811523561, 0.21787341308593877, 0.21883969116211066, 0.21980609130859508, 0.22077267456054822, 0.2217394409179701, 0.2227063903808607, 0.22367346191406384, 0.2246407165527357, 0.2256081542968763, 0.22657571411132943, 0.22754345703125134, 0.22851138305664198, 0.22947943115234515, 0.23044766235351705, 0.23141601562500147, 0.23238455200195463, 0.2333532714843765, 0.23432211303711092, 0.2352910766601578, 0.23626028442382968, 0.23722955322265782, 0.23819906616211095, 0.23916864013672035, 0.24013845825195473, 0.24110833740234539, 0.24207846069336103, 0.24304864501953294, 0.24401901245117358, 0.244989562988283, 0.2459602355957049, 0.24693109130859553, 0.24790206909179868, 0.2488731689453143, 0.24984445190429871, 0.25081585693359565, 0.25178744506836126, 0.2527591552734394, 0.25373098754883006, 0.2547030029296894, 0.25567514038086125, 0.2566474609375019, 0.2576198425292988, 0.25859246826172066, 0.2595651550292988, 0.2605380249023457, 0.261511016845705, 0.2624841918945331, 0.26345742797851746, 0.2644308471679705, 0.2654044494628923, 0.2663781738281267, 0.2673519592285173, 0.26832598876953284, 0.26930007934570466, 0.27027435302734526, 0.2712487487792984, 0.27222326660156404, 0.27319796752929837, 0.27417272949218896, 0.27514767456054834, 0.27612274169922024, 0.27709799194336093, 0.2780733032226579, 0.2790487976074235, 0.28002441406250167, 0.28100015258789235, 0.2819760742187517, 0.2829520568847673, 0.2839282226562517, 0.28490451049804866, 0.285880920410158, 0.28685745239257987, 0.28783410644531426, 0.28881094360351733, 0.28978784179687667, 0.2907649230957048, 0.29174212646484543, 0.2927194519042985, 0.29369689941406407, 0.2946744689941422, 0.2956521606445328, 0.29662997436523586, 0.2976079711914077, 0.2985860290527358, 0.2995642700195327, 0.3005426330566421, 0.301521118164064, 0.3024996643066421, 0.303478393554689, 0.30445724487304837, 0.3054362182617203, 0.30641531372070474, 0.3073945312500017, 0.3083738708496111, 0.30935339355468927, 0.3103329772949237, 0.31131268310547067, 0.31229251098633004, 0.3132725219726582, 0.3142525939941426, 0.3152327880859396, 0.31621310424804894, 0.3171936035156271, 0.3181741638183615, 0.31915484619140844, 0.3201356506347678, 0.3211166381835959, 0.3220976867675803, 0.32307885742187725, 0.3240601501464866, 0.32504156494140846, 0.32602310180664285, 0.32700476074218976, 0.3279865417480491, 0.32896844482422094, 0.3299504699707053, 0.3309326171875022, 0.33191488647461165, 0.33289721679687734, 0.3338797302246117, 0.3348623657226586, 0.33584506225586175, 0.3368278808593774, 0.3378108825683619, 0.3387939453125026, 0.33977713012695576, 0.34076043701172143, 0.3417438659667996, 0.34272741699219034, 0.34371109008789347, 0.34469482421875286, 0.34567874145508104, 0.3466627197265655, 0.34764682006836245, 0.3486311035156281, 0.34961544799805, 0.35059991455078443, 0.3515844421386751, 0.3525691528320345, 0.3535539855957064, 0.35453887939453455, 0.3555238952636752, 0.3565090332031283, 0.35749429321289394, 0.3584796752929721, 0.35946517944336276, 0.3604507446289097, 0.3614364929199253, 0.36242230224609717, 0.36340823364258157, 0.3643942871093785, 0.36538046264648794, 0.36636669921875364, 0.36735311889648803, 0.3683395996093787, 0.36932620239258185, 0.37031292724609755, 0.3712997131347695, 0.37228668212891025, 0.37327371215820726, 0.3742608642578167, 0.37524813842773863, 0.3762355346679731, 0.37722299194336384, 0.37821063232422325, 0.3791983337402389, 0.3801861572265671, 0.38117410278320785, 0.38216210937500483, 0.38315023803711423, 0.3841385498046924, 0.3851268615722706, 0.3861153564453176, 0.38710397338867697, 0.3880926513671926, 0.3890814514160208, 0.3900703735351615, 0.39105935668945846, 0.3920485229492241, 0.393037750244146, 0.3940270996093804, 0.3950165100097711, 0.3960061035156305, 0.3969957580566461, 0.39798553466797426, 0.39897543334961494, 0.3999653930664119, 0.40095547485352123, 0.4019456787109431, 0.4029360046386775, 0.40392645263672444, 0.4049169616699275, 0.4059075927734431, 0.40689834594727126, 0.40788916015625565, 0.4088801574707087, 0.40987121582031805, 0.41086233520508364, 0.411853637695318, 0.41284500122070866, 0.4138364868164117, 0.4148280944824273, 0.41581976318359914, 0.4168115539550835, 0.4178034667968804, 0.4187955017089898, 0.4197875976562555, 0.42077987670898986, 0.4217721557617242, 0.42276461791992737, 0.4237571411132868, 0.4247497863769587, 0.42574255371094316, 0.42673544311524014, 0.4277283935546933, 0.42872146606445893, 0.4297146606445371, 0.43070791625977156, 0.43170129394531853, 0.4326947937011779, 0.43368835449219356, 0.434682098388678, 0.4356759033203187, 0.43666976928711565, 0.4376638183593813, 0.4386579284668032, 0.4396521606445376, 0.4406464538574283, 0.44164093017578765, 0.4426354675293033, 0.44363006591797516, 0.44462484741211583, 0.44561968994141277, 0.4466146545410221, 0.4476096801757877, 0.44860482788086586, 0.4496000976562565, 0.4505954895019596, 0.45159094238281894, 0.4525865173339908, 0.4535822143554752, 0.4545780334472721, 0.45557391357422516, 0.45656991577149075, 0.4575659790039126, 0.45856222534180324, 0.45955853271485014, 0.4605549011230532, 0.46155145263672503, 0.46254806518555314, 0.46354479980469376, 0.46454159545899065, 0.4655385742187562, 0.4665355529785218, 0.46753271484375614, 0.46852993774414675, 0.4695272827148498, 0.47052474975586533, 0.4715223388671934, 0.47251998901367775, 0.4735177612304746, 0.47451559448242775, 0.4755135498046934, 0.47651162719727147, 0.47750982666016206, 0.4785080871582089, 0.4795064697265683, 0.4805049743652402, 0.48150354003906837, 0.4825022888183653, 0.4835010375976623, 0.4844999694824279, 0.4854989624023498, 0.4864980773925842, 0.48749731445313116, 0.48849661254883425, 0.48949603271484987, 0.490495574951178, 0.4914951782226624, 0.4924949645996155, 0.4934947509765686, 0.49449472045899046, 0.4954947509765686, 0.49649490356445924, 0.4974951782226623, 0.49849551391602165, 0.49949603271484977, 0.5004965515136779, 0.5014972534179748, 0.5024980163574279, 0.5034989013671934, 0.5044999084472716, 0.5055009765625059, 0.5065021667480528, 0.5075034790039122, 0.5085048522949279, 0.5095064086914122, 0.5105080261230527, 0.5115097045898495, 0.512511566162115, 0.5135134887695368, 0.5145154724121149, 0.5155176391601618, 0.5165198669433649, 0.5175222167968806, 0.5185246887207087, 0.519527221679693, 0.5205298767089898, 0.521532653808599, 0.5225355529785208, 0.5235385131835989, 0.5245415954589895, 0.5255447998046926, 0.526548065185552, 0.5275514526367239, 0.5285549621582083, 0.5295585937500052, 0.5305622863769585, 0.5315661010742242, 0.5325700378418023, 0.533574096679693, 0.5345782165527398, 0.5355824584960992, 0.5365868225097711, 0.5375913085937555, 0.5385958557128961, 0.5396005249023493, 0.540605316162115, 0.541610168457037, 0.5426152038574278, 0.5436203002929748, 0.5446255187988344, 0.5456307983398502, 0.5466361999511784, 0.5476417236328189, 0.5486473693847721, 0.5496531372070378, 0.5506589660644597, 0.5516649169921942, 0.5526709899902412, 0.5536771850586008, 0.5546834411621165, 0.5556898193359447, 0.5566963195800853, 0.5577029418945384, 0.5587096252441478, 0.559716491699226, 0.5607234191894604, 0.5617304077148512, 0.5627375793457107, 0.5637448120117264, 0.5647522277832108, 0.5657597045898514, 0.5667672424316482, 0.5677749633789139, 0.5687827453613358, 0.5697906494140702, 0.5707986755371172, 0.5718068237304766, 0.5728150329589924, 0.5738234252929767, 0.5748318786621173, 0.5758404541015704, 0.576849151611336, 0.5778579101562579, 0.5788668518066485, 0.5798758544921955, 0.5808849792480549, 0.5818942260742268, 0.5829035339355548, 0.5839130249023515, 0.5849225769043046, 0.5859322509765702, 0.5869420471191483, 0.587951965332039, 0.5889620056152421, 0.5899721679687578, 0.5909823913574297, 0.5919927368164138, 0.5930032043457106, 0.59401379394532, 0.5950245056152418, 0.5960353393554761, 0.5970462341308668, 0.5980573120117262, 0.5990684509277419, 0.60007971191407, 0.6010910949707106, 0.6021026000976636, 0.6031142272949291, 0.604125915527351, 0.6051377868652416, 0.6061497192382884, 0.6071618347168041, 0.6081740112304759, 0.6091863098144602, 0.610198730468757, 0.6112112731933662, 0.612223937988288, 0.6132366638183661, 0.6142495727539129, 0.6152626037597723, 0.6162756958007879, 0.6172889709472721, 0.6183023071289125, 0.6193157653808655, 0.6203294067382873, 0.6213431091308653, 0.6223569335937559, 0.623370880126959, 0.6243849487304746, 0.6253991394043026, 0.6264134521484431, 0.6274278869628961, 0.6284424438476616, 0.6294571228027396, 0.6304719238281301, 0.6314867858886769, 0.6325018310546925, 0.6335169982910206, 0.6345322875976612, 0.6355476989746144, 0.6365631713867238, 0.6375788269043019, 0.6385946044921925, 0.6396105041503956, 0.6406265258789111, 0.6416426086425829, 0.6426588745117235, 0.6436752624511767, 0.6446917724609423, 0.6457084045410205, 0.6467251586914112, 0.6477420349121145, 0.6487590942382864, 0.6497762145996144, 0.6507934570312549, 0.6518108825683643, 0.6528283691406299, 0.6538459777832081, 0.654863769531255, 0.6558816833496145, 0.6568997192382864, 0.6579178161621144, 0.6589361572265674, 0.6599545593261767, 0.6609730834960986, 0.661991729736333, 0.6630105590820362, 0.6640294494628957, 0.6650485229492238, 0.6660677185058644, 0.6670870361328175, 0.6681064758300831, 0.6691260986328175, 0.6701457824707081, 0.6711656494140675, 0.6721856384277394, 0.6732057495117237, 0.6742259826660205, 0.6752463989257861, 0.6762669372558642, 0.6772875366210985, 0.6783083801269579, 0.6793292846679736, 0.6803503112793017, 0.6813715209960985, 0.6823928527832078, 0.6834143676757859, 0.6844359436035202, 0.6854577026367233, 0.686479583740239, 0.6875016479492232, 0.6885237731933637, 0.6895460815429729, 0.690568572998051, 0.6915911254882853, 0.6926138610839884, 0.693636718750004, 0.6946597595214882, 0.6956829223632849, 0.6967062072753941, 0.6977296142578159, 0.6987532043457064, 0.6997769775390658, 0.7008008117675814, 0.7018248291015655, 0.7028490295410185, 0.7038733520507839, 0.7048977966308619, 0.7059224243164087, 0.706947174072268, 0.7079720458984398, 0.7089971008300803, 0.7100223388671895, 0.7110476989746112, 0.7120731811523454, 0.7130988464355484, 0.714124633789064, 0.7151506042480481, 0.7161766967773447, 0.7172029724121102, 0.7182293701171881, 0.7192559509277349, 0.7202827148437504, 0.7213096008300784, 0.722336608886719, 0.7233638000488284, 0.7243911743164064, 0.725418670654297, 0.7264463500976562, 0.7274742126464843, 0.7285021972656248, 0.7295303649902342, 0.730558654785156, 0.7315871276855467, 0.7326157836914061, 0.733644561767578, 0.7346735229492186, 0.7357026672363279, 0.736731994628906, 0.7377614440917967, 0.7387910766601561, 0.7398208923339842, 0.7408508300781248, 0.7418809509277341, 0.7429112548828122, 0.743941741943359, 0.7449724121093747, 0.7460032043457028, 0.7470341796874996, 0.7480653381347652, 0.7490966796874995, 0.7501282043457026, 0.7511599121093744, 0.752191802978515, 0.7532238159179679, 0.754256072998046, 0.7552884521484365, 0.7563210144042959, 0.7573538208007801, 0.7583867492675768, 0.7594198608398423, 0.7604532165527328, 0.7614866943359359, 0.7625203552246076, 0.7635542602539044, 0.7645882873535136, 0.7656225585937478, 0.7666569519042946, 0.7676915893554664, 0.7687264099121071, 0.7697614135742165, 0.7707966613769507, 0.7718320312499974, 0.7728676452636692, 0.7739034423828098, 0.7749394226074192, 0.7759755859374974, 0.7770119934082006, 0.7780485839843725, 0.7790853576660132, 0.7801223754882788, 0.7811595153808569, 0.7821969604492164, 0.7832345275878883, 0.7842723999023414, 0.785310394287107, 0.7863486328124977, 0.7873870544433571, 0.7884257202148414, 0.7894646301269507, 0.7905037231445288, 0.7915429992675757, 0.7925825195312475, 0.7936222839355443, 0.7946622314453099, 0.7957024230957005, 0.7967428588867161, 0.7977834777832004, 0.7988243408203096, 0.7998654479980439, 0.800906738281247, 0.8019482727050751, 0.8029901123046844, 0.8040320739746062, 0.8050743408203093, 0.8061168518066374, 0.8071595458984343, 0.8082025451660124, 0.8092457275390593, 0.8102892150878874, 0.8113328857421843, 0.8123768615722625, 0.8134210205078095, 0.8144654846191377, 0.8155101928710907, 0.8165551452636689, 0.8176003417968721, 0.8186458435058565, 0.8196915283203096, 0.820737518310544, 0.8217838134765597, 0.822830291748044, 0.8238770751953096, 0.8249241638183565, 0.8259714965820284, 0.8270190734863253, 0.8280669555664034, 0.8291151428222628, 0.8301635742187471, 0.8312123107910127, 0.8322612915039033, 0.8333106384277313, 0.8343602294921845, 0.8354100646972625, 0.8364602661132782, 0.8375107727050751, 0.838561523437497, 0.8396125793457002, 0.8406640014648409, 0.8417156677246066, 0.8427677001953099, 0.8438200378417943, 0.84487268066406, 0.845925628662107, 0.8469788818359352, 0.8480325012207007, 0.8490864257812477, 0.850140716552732, 0.8511953124999977, 0.8522502746582009, 0.8533055419921852, 0.8543611755371071, 0.8554171752929666, 0.8564734802246071, 0.8575302124023415, 0.8585872497558572, 0.8596446533203103, 0.8607024230957009, 0.8617606201171851, 0.8628191223144507, 0.8638780517578101, 0.8649373474121068, 0.8659970092773411, 0.8670570983886692, 0.8681175537109348, 0.8691784362792941, 0.8702396850585908, 0.8713013610839814, 0.8723634643554657, 0.8734259948730438, 0.8744889526367157, 0.8755523376464812, 0.8766161499023407, 0.8776803894042938, 0.8787450561523408, 0.8798102111816376, 0.8808758544921845, 0.8819419250488251, 0.8830084838867157, 0.8840754699707, 0.8851430053710906, 0.8862109680175748, 0.8872794799804654, 0.8883484802246059, 0.8894179687499965, 0.8904880065917932, 0.89155853271484, 0.8926296081542929, 0.8937012329101522, 0.8947733459472614, 0.8958460693359331, 0.8969194030761675, 0.8979932250976518, 0.8990676574706985, 0.9001427001953078, 0.9012183532714797, 0.9022945556640579, 0.9033714294433547, 0.9044489135742141, 0.9055270690917921, 0.9066058349609326, 0.9076853332519482, 0.9087654418945262, 0.9098462829589792, 0.910927795410151, 0.9120100402831978, 0.9130929565429634, 0.9141766662597602, 0.9152611694335884, 0.9163464050292917, 0.9174323730468698, 0.9185191955566353, 0.9196068725585883, 0.9206953430175725, 0.9217846679687444, 0.9228748474121037, 0.9239659423828069, 0.9250579528808539, 0.9261508789062446, 0.927244720458979, 0.9283395996093696, 0.9294354553222602, 0.9305323486328071, 0.9316302795410102, 0.9327292480468697, 0.933829376220698, 0.9349306030273384, 0.9360329895019478, 0.9371365966796822, 0.9382414245605416, 0.9393475341796821, 0.9404549255371039, 0.9415635986328069, 0.9426737365722601, 0.943785278320307, 0.9448982849121038, 0.946012817382807, 0.9471288757324162, 0.9482465820312442, 0.9493659973144474, 0.9504871215820254, 0.9516100769042911, 0.9527348632812441, 0.9538616638183534, 0.954990478515619, 0.9561213684081972, 0.9572545166015566, 0.958389923095697, 0.9595277709960878, 0.9606681213378846, 0.9618111572265564, 0.9629569396972596, 0.9641056518554628, 0.9652574768066347, 0.966412597656244, 0.9675711364746035, 0.9687333984374941, 0.9698995056152283, 0.9710698852539001, 0.9722447204589783, 0.9734243774414001, 0.9746092224121033, 0.9757997436523377, 0.9769964294433534, 0.9781998901367127, 0.9794107360839782, 0.9806298217773376, 0.9818581237792906, 0.9830968017578062, 0.9843474426269468, 0.9856117553710874, 0.9868923034667906, 0.988192199707025, 0.9895158996581969, 0.9908700561523373, 0.9922647399902279, 0.9937177124023372, 0.9952649841308528, 0.9970087280273371],
                'num_bt = 1000, alpha = 0.025': [2.5299072265625002e-05, 0.00024230957031250004, 0.0006191101074218749, 0.0010908813476562499, 0.0016253967285156249, 0.0022049560546874994, 0.002818878173828124, 0.0034599609374999984, 0.004123382568359373, 0.004805480957031248, 0.005503570556640623, 0.006215515136718748, 0.006939605712890622, 0.007674499511718747, 0.008419036865234372, 0.009172302246093746, 0.00993350219726562, 0.010701965332031247, 0.011477020263671874, 0.01225823974609375, 0.013045196533203126, 0.013837402343750003, 0.014634552001953127, 0.015436401367187505, 0.01624252319335938, 0.01705279541015626, 0.017866912841796888, 0.018684692382812514, 0.01950595092773439, 0.020330505371093766, 0.021158172607421893, 0.02198883056640627, 0.022822357177734398, 0.023658630371093774, 0.0244975280761719, 0.025338928222656272, 0.0261827087402344, 0.02702880859375003, 0.027877166748046904, 0.028727600097656278, 0.029580169677734407, 0.03043469238281253, 0.03129116821289066, 0.03214947509765629, 0.03300961303710941, 0.033871520996093786, 0.03473507690429691, 0.03560028076171879, 0.03646707153320316, 0.03733538818359378, 0.038205230712890656, 0.039076538085937536, 0.03994924926757815, 0.04082336425781253, 0.0416988220214844, 0.04257556152343753, 0.0434535827636719, 0.04433288574218753, 0.04521334838867191, 0.046095031738281285, 0.04697787475585941, 0.04786187744140629, 0.048746917724609415, 0.04963311767578129, 0.05052029418945316, 0.051408569335937536, 0.052297821044921915, 0.05318811035156253, 0.05407931518554691, 0.054971496582031286, 0.055864654541015656, 0.05675866699218753, 0.057653594970703166, 0.05854943847656254, 0.05944613647460942, 0.06034368896484379, 0.06124203491210941, 0.06214123535156253, 0.06304122924804689, 0.06394195556640625, 0.06484353637695311, 0.06574584960937499, 0.06664895629882814, 0.067552734375, 0.06845730590820315, 0.06936254882812501, 0.07026846313476565, 0.07117510986328127, 0.0720824890136719, 0.07299047851562504, 0.07389913940429693, 0.07480847167968757, 0.0757184143066407, 0.07662896728515634, 0.0775401916503907, 0.07845202636718757, 0.07936447143554692, 0.0802775268554688, 0.08119113159179692, 0.08210534667968755, 0.08302011108398444, 0.08393548583984381, 0.08485134887695317, 0.08576782226562504, 0.08668484497070317, 0.08760235595703128, 0.08852041625976564, 0.08943902587890629, 0.09035812377929692, 0.0912777709960938, 0.09219790649414067, 0.09311853027343756, 0.09403964233398443, 0.09496130371093756, 0.09588339233398444, 0.0968059692382813, 0.09772897338867192, 0.0986525268554688, 0.09957650756835942, 0.1005009155273438, 0.10142581176757817, 0.1023511352539063, 0.10327688598632817, 0.10420312500000006, 0.10512979125976571, 0.10605682373046885, 0.10698434448242197, 0.10791223144531262, 0.10884054565429699, 0.10976928710937511, 0.11069845581054699, 0.11162799072265636, 0.11255795288085949, 0.11348828125000013, 0.1144190368652345, 0.11535015869140638, 0.11628170776367203, 0.1172135620117189, 0.11814584350585955, 0.11907849121093769, 0.12001150512695333, 0.12094488525390645, 0.1218786315917971, 0.12281274414062524, 0.12374722290039086, 0.12468206787109398, 0.1256172180175784, 0.1265527343750003, 0.12748861694335972, 0.12842480468750034, 0.12936135864257847, 0.13029827880859407, 0.13123544311523466, 0.13217303466796904, 0.13311093139648467, 0.13404913330078155, 0.1349876403808597, 0.1359265136718753, 0.13686569213867217, 0.1378051757812503, 0.13874496459960967, 0.1396851196289065, 0.1406255187988284, 0.1415662841796878, 0.1425072937011722, 0.14344866943359408, 0.14439028930664094, 0.14533227539062532, 0.1462745056152347, 0.14721704101562533, 0.14815982055664095, 0.1491029663085941, 0.15004635620117224, 0.15099005126953163, 0.15193405151367223, 0.15287829589843788, 0.15382284545898478, 0.15476763916015668, 0.15571273803710983, 0.15665808105468798, 0.1576037292480474, 0.158549682617188, 0.1594958190917974, 0.16044226074218804, 0.16138900756835994, 0.16233599853515684, 0.16328323364257874, 0.16423071289062563, 0.16517849731445378, 0.16612652587890692, 0.16707479858398505, 0.16802331542968818, 0.1689720764160163, 0.16992114257812568, 0.17087045288086006, 0.17181994628906322, 0.17276974487304764, 0.17371978759765705, 0.17467007446289146, 0.1756205444335946, 0.176571319580079, 0.17752233886718838, 0.17847360229492276, 0.17942504882812588, 0.180376739501954, 0.18132873535156335, 0.18228091430664145, 0.1832333374023446, 0.18418594360351648, 0.1851388549804696, 0.18609194946289148, 0.18704528808593834, 0.1879988708496102, 0.1889526367187508, 0.18990664672851643, 0.19086090087890706, 0.19181533813476648, 0.1927700195312509, 0.1937249450683603, 0.19468005371093844, 0.1956353454589853, 0.19659094238281344, 0.1975467224121103, 0.19850268554687595, 0.1994588928222666, 0.20041528320312602, 0.20137191772461044, 0.2023287353515636, 0.20328579711914174, 0.20424304199218862, 0.20520046997070424, 0.20615814208984484, 0.20711599731445424, 0.20807409667968862, 0.2090323791503918, 0.2099908447265637, 0.21094949340820435, 0.21190838623046998, 0.2128674621582044, 0.21382678222656382, 0.21478628540039196, 0.21574591064453258, 0.21670584106445445, 0.21766589355468885, 0.21862612915039198, 0.2195866088867201, 0.22054727172851696, 0.2215081176757826, 0.22246914672851698, 0.2234304199218764, 0.2243918151855483, 0.22535345458984518, 0.2263152770996108, 0.22727722167968895, 0.22823941040039208, 0.22920178222656395, 0.23016433715820456, 0.23112707519531395, 0.23208999633789207, 0.23305310058593892, 0.2340163879394545, 0.23497985839843888, 0.23594351196289198, 0.23690734863281387, 0.2378713684082045, 0.2388355712890639, 0.23979995727539205, 0.24076452636718892, 0.24172921752929832, 0.24269415283203272, 0.24365921020507958, 0.24462451171875144, 0.24558993530273582, 0.24655554199218893, 0.24752133178711083, 0.24848730468750146, 0.24945346069336088, 0.2504197387695327, 0.25138626098632966, 0.252352905273439, 0.25331973266601715, 0.2542866821289078, 0.2552538757324234, 0.25622119140625155, 0.25718869018554846, 0.25815637207031406, 0.25912417602539217, 0.26009222412109523, 0.2610603942871108, 0.2620286865234389, 0.26299722290039207, 0.26396588134765775, 0.2649347229003921, 0.265903686523439, 0.2668728942871109, 0.2678422241210954, 0.26881167602539235, 0.269781311035158, 0.27075112915039246, 0.2717211303710956, 0.2726912536621112, 0.27366156005859565, 0.2746319885253926, 0.27560260009765825, 0.27657339477539267, 0.2775443115234396, 0.27851541137695524, 0.2794866333007834, 0.2804580383300803, 0.28142956542968967, 0.2824012756347678, 0.2833731689453147, 0.28434518432617406, 0.2853173828125022, 0.28628970336914283, 0.28726220703125216, 0.288234832763674, 0.28920764160156465, 0.29018063354492396, 0.29115368652343954, 0.29212698364258016, 0.2931004028320332, 0.29407394409179877, 0.2950476684570331, 0.29602151489258, 0.29699554443359555, 0.2979696960449236, 0.2989440307617205, 0.2999184875488299, 0.3008930664062518, 0.3018678283691424, 0.30284277343750177, 0.3038177795410174, 0.3047930297851581, 0.30576834106445505, 0.3067438354492207, 0.3077195129394551, 0.30869531250000204, 0.3096712341308614, 0.31064733886718954, 0.3116235656738302, 0.3125999145507833, 0.31357644653320516, 0.31455310058593955, 0.3155299377441426, 0.3165068969726582, 0.31748397827148633, 0.31846124267578324, 0.3194385681152363, 0.3204161376953144, 0.3213937683105488, 0.3223715820312518, 0.32334957885742366, 0.32432763671875176, 0.32530587768554864, 0.32628424072265805, 0.32726278686523613, 0.32824145507812674, 0.3292202453613299, 0.33019915771484554, 0.33117825317383, 0.33215747070312696, 0.33313681030273634, 0.3341163330078145, 0.3350959777832052, 0.3360757446289083, 0.33705563354492396, 0.3380357055664084, 0.33901589965820533, 0.3399962158203147, 0.34097671508789285, 0.34195727539062726, 0.34293801879883035, 0.34391888427734596, 0.34489993286133036, 0.345881042480471, 0.34686233520508036, 0.3478437500000022, 0.3488253479003929, 0.3498070068359398, 0.3507888488769554, 0.3517708129882835, 0.35275289916992414, 0.3537351074218773, 0.35471749877929926, 0.3557000122070336, 0.3566826477050805, 0.35766540527343993, 0.35864828491211187, 0.3596313476562526, 0.36061453247070574, 0.3615978393554714, 0.3625812683105496, 0.3635648193359403, 0.36454849243164344, 0.36553234863281536, 0.3665163269042998, 0.3675004272460968, 0.36848464965820615, 0.36946899414062806, 0.3704534606933625, 0.3714381103515656, 0.37242288208008123, 0.3734077148437531, 0.3743927307128938, 0.37537792968750316, 0.3763631896972688, 0.37734857177734693, 0.37833413696289386, 0.37931976318359695, 0.3803055725097688, 0.3812915039062532, 0.38227755737305014, 0.3832637329101596, 0.3842500915527377, 0.3852365112304721, 0.38622311401367526, 0.3872097778320347, 0.3881966247558629, 0.38918359375000366, 0.3901706848144568, 0.3911578979492225, 0.3921452331543007, 0.39313269042969146, 0.39412033081055087, 0.39510803222656654, 0.396095916748051, 0.397083923339848, 0.3980719909668011, 0.39906024169922305, 0.4000486145019575, 0.4010371093750045, 0.40202572631836386, 0.4030144653320358, 0.4040033874511765, 0.40499237060547344, 0.4059815368652391, 0.406970764160161, 0.40796017456055167, 0.4089496459960986, 0.40993930053711425, 0.4109290771484424, 0.4119189758300831, 0.41290899658203617, 0.4138991394043018, 0.4148894042968799, 0.4158797912597706, 0.4168703002929737, 0.4178609313964893, 0.4188516845703174, 0.4198426208496143, 0.4208336181640674, 0.42182479858398925, 0.42281604003906736, 0.42380746459961427, 0.4247989501953173, 0.42579061889648917, 0.42678240966797354, 0.42777432250977043, 0.4287662963867236, 0.42975845336914553, 0.4307507324218799, 0.43174313354492677, 0.4327356567382862, 0.4337283020019581, 0.43472106933594257, 0.43571395874023955, 0.43670697021484894, 0.4377001647949271, 0.43869342041016157, 0.43968679809570854, 0.4406802978515679, 0.4416739807128961, 0.44266772460938053, 0.44366165161133364, 0.444655639648443, 0.4456498107910212, 0.4466440429687556, 0.4476384582519587, 0.44863293457031805, 0.4496275939941462, 0.4506223144531306, 0.4516172180175837, 0.4526122436523493, 0.4536073303222712, 0.45460260009766185, 0.4555979919433649, 0.4565935058593805, 0.45758914184570865, 0.4585848999023493, 0.4595807189941462, 0.4605767211914118, 0.4615728454589899, 0.46256909179688055, 0.4635654602050836, 0.4645619506835992, 0.4655585632324273, 0.4665552978515679, 0.4675522155761772, 0.4685491943359428, 0.46954629516602087, 0.4705435180664115, 0.4715408630371145, 0.47253833007813006, 0.4735359802246144, 0.474533691406255, 0.47553152465820814, 0.47652954101563005, 0.4775276184082081, 0.4785258178710987, 0.4795242004394581, 0.48052264404297373, 0.48152127075195816, 0.48251995849609886, 0.4835188293457082, 0.48451776123047385, 0.48551687622070827, 0.4865161132812552, 0.4875154113769583, 0.4885148925781302, 0.4895144958496146, 0.49051416015625526, 0.4915140075683646, 0.4925139770507865, 0.4935140686035209, 0.4945142822265678, 0.49551455688477086, 0.4965150146484427, 0.4975155944824271, 0.498516296386724, 0.49951712036133333, 0.5005180664062553, 0.5015191955566459, 0.5025203857421928, 0.5035216979980522, 0.5045231323242241, 0.5055246887207084, 0.5065264282226615, 0.5075282287597708, 0.5085302124023489, 0.5095322570800832, 0.5105344238281301, 0.5115367736816457, 0.5125392456054738, 0.5135417785644582, 0.5145444946289112, 0.5155473327636767, 0.5165502319335985, 0.5175533142089891, 0.5185565185546922, 0.5195598449707078, 0.520563293457036, 0.5215668640136767, 0.5225705566406299, 0.5235744323730518, 0.5245783691406299, 0.5255824279785205, 0.5265866699218799, 0.5275909729003955, 0.5285954589843799, 0.5296000061035205, 0.53060473632813, 0.531609588623052, 0.5326145019531302, 0.5336195983886772, 0.5346248168945368, 0.5356301574707087, 0.536635620117193, 0.5376412658691462, 0.5386469726562556, 0.5396528015136776, 0.5406588134765683, 0.5416648864746153, 0.5426711425781311, 0.5436775207519593, 0.5446839599609435, 0.5456905822753967, 0.5466973266601624, 0.5477042541503968, 0.5487112426757875, 0.5497183532714908, 0.5507256469726627, 0.5517330017089908, 0.5527405395507875, 0.5537481994628969, 0.5547559204101625, 0.555763824462897, 0.5567719116211002, 0.5577800598144597, 0.5587883300781316, 0.559796783447272, 0.5608052978515689, 0.5618139953613345, 0.5628228149414126, 0.5638317565918033, 0.5648408203125065, 0.5658500671386784, 0.5668593750000064, 0.5678688659668031, 0.5688784179687562, 0.569888153076178, 0.5708980102539124, 0.5719080505371156, 0.572918151855475, 0.5739284362793031, 0.5749387817382873, 0.5759493103027403, 0.5769599609375059, 0.5779707946777403, 0.5789816894531309, 0.5799927673339903, 0.581003906250006, 0.5820152282714902, 0.583026672363287, 0.5840382995605525, 0.5850499877929743, 0.586061859130865, 0.5870738525390681, 0.5880859680175837, 0.5890982055664118, 0.5901106262207086, 0.5911231689453179, 0.5921358337402397, 0.593148620605474, 0.5941615905761771, 0.5951746215820365, 0.5961878356933645, 0.5972011718750051, 0.5982146911621143, 0.5992282714843798, 0.6002420349121141, 0.601255920410161, 0.6022699890136766, 0.6032841186523483, 0.6042984313964889, 0.6053128662109418, 0.6063274841308636, 0.6073422241210978, 0.6083570861816446, 0.609372070312504, 0.6103872375488321, 0.6114024658203164, 0.6124179382324259, 0.6134334716796915, 0.6144491882324258, 0.6154650268554726, 0.6164809875488318, 0.6174971313476599, 0.6185133972168005, 0.6195297851562537, 0.6205463562011756, 0.62156304931641, 0.622579864501957, 0.6235968627929728, 0.624613983154301, 0.6256312866210977, 0.6266486511230508, 0.627666259765629, 0.6286839294433634, 0.6297017822265666, 0.6307197570800823, 0.6317379150390666, 0.6327561950683634, 0.6337745971679728, 0.6347931823730509, 0.6358118896484416, 0.636830780029301, 0.6378497924804729, 0.6388689880371136, 0.6398882446289104, 0.6409077453613322, 0.6419273681640666, 0.6429471130371135, 0.6439670410156292, 0.6449870910644573, 0.6460072631835979, 0.6470276184082072, 0.6480481567382853, 0.6490688171386759, 0.6500895996093791, 0.6511105651855509, 0.6521317138671915, 0.6531529846191445, 0.65417437744141, 0.6551959533691444, 0.6562177124023475, 0.6572395935058631, 0.6582615966796912, 0.6592838439941443, 0.6603061523437536, 0.6613287048339879, 0.6623513183593784, 0.6633741760253941, 0.6643971557617221, 0.6654202575683626, 0.6664435424804719, 0.6674670104980499, 0.6684906005859405, 0.6695143737792998, 0.6705383300781278, 0.6715624084472683, 0.6725866699218775, 0.6736110534667993, 0.6746356201171898, 0.6756603698730491, 0.6766853027343771, 0.6777103576660176, 0.6787355957031268, 0.6797609558105485, 0.680786499023439, 0.6818122253417983, 0.6828381347656263, 0.6838641662597668, 0.6848903808593759, 0.6859167785644539, 0.6869432983398444, 0.6879700622558599, 0.6889969482421879, 0.6900239562988285, 0.6910512084960941, 0.6920785827636722, 0.6931062011718753, 0.6941339416503908, 0.6951618652343751, 0.6961899108886719, 0.6972182006835937, 0.6982466125488281, 0.6992752075195313, 0.7003039855957032, 0.7013329467773438, 0.7023620910644531, 0.7033914184570312, 0.7044208679199219, 0.7054505615234375, 0.7064804382324218, 0.7075104370117186, 0.7085406188964841, 0.7095710449218747, 0.7106015930175779, 0.7116323242187497, 0.7126632995605465, 0.7136943969726558, 0.7147256774902339, 0.7157571411132807, 0.7167888488769525, 0.7178206787109368, 0.718852752685546, 0.7198849487304678, 0.7209173889160146, 0.7219500122070303, 0.7229828186035144, 0.7240158081054674, 0.7250489807128891, 0.7260823364257797, 0.727115875244139, 0.7281496582031232, 0.7291836242675761, 0.7302177734374978, 0.7312521057128883, 0.7322866210937476, 0.733321380615232, 0.7343563232421851, 0.735391448974607, 0.7364268188476538, 0.7374623107910131, 0.7384980468749974, 0.7395340270996068, 0.740570190429685, 0.7416065368652319, 0.7426430664062477, 0.7436798400878882, 0.7447167968749976, 0.745753997802732, 0.7467913818359352, 0.7478290100097633, 0.7488668212890602, 0.7499048156738258, 0.7509430541992165, 0.7519815368652322, 0.7530202026367164, 0.7540591125488257, 0.7550982055664038, 0.756137542724607, 0.7571770629882788, 0.7582168273925757, 0.7592568359374975, 0.7602970275878881, 0.7613374633789037, 0.7623781433105442, 0.7634190063476535, 0.7644601135253878, 0.7655014648437471, 0.7665430603027313, 0.7675848388671843, 0.7686269226074186, 0.7696691894531217, 0.7707117004394498, 0.7717543945312467, 0.7727973937988248, 0.773840637207028, 0.7748840637206998, 0.775927795410153, 0.7769717712402312, 0.7780159301757782, 0.7790603942871064, 0.7801050415039031, 0.7811499938964813, 0.7821951904296846, 0.7832406311035127, 0.7842863159179657, 0.7853322448730439, 0.7863784790039033, 0.7874248962402315, 0.7884716186523409, 0.7895186462402316, 0.790565856933591, 0.7916133728027316, 0.7926611328124972, 0.7937091979980441, 0.7947575073242159, 0.7958060607910128, 0.7968549194335909, 0.7979040832519503, 0.7989534912109345, 0.8000032043457, 0.8010531616210906, 0.8021033630371063, 0.8031539306640595, 0.8042047424316376, 0.8052558593749971, 0.8063072814941378, 0.8073589477539035, 0.8084109191894505, 0.8094631958007787, 0.8105157775878881, 0.8115686645507788, 0.8126218566894508, 0.8136753540039038, 0.8147291564941382, 0.815783264160154, 0.8168376770019509, 0.817892395019529, 0.8189474182128885, 0.8200028076171854, 0.8210585021972635, 0.822114501953123, 0.8231708679199198, 0.8242275390624979, 0.8252845153808573, 0.8263418579101541, 0.8273995666503885, 0.8284575805664042, 0.8295158996582009, 0.8305746459960915, 0.8316336975097633, 0.8326930541992165, 0.8337528381347633, 0.8348129882812475, 0.835873443603513, 0.8369342651367161, 0.8379955139160128, 0.8390570678710908, 0.8401190490722626, 0.8411813964843721, 0.8422441101074188, 0.8433071899414032, 0.8443706970214814, 0.8454345703124971, 0.8464988098144502, 0.8475634765624972, 0.8486285705566378, 0.8496940917968722, 0.850759979248044, 0.8518262939453097, 0.8528930358886692, 0.8539602050781222, 0.8550277404785128, 0.8560957641601533, 0.8571642150878876, 0.8582331542968719, 0.8593024597167936, 0.8603722534179654, 0.8614425354003873, 0.8625132446289029, 0.8635844421386684, 0.8646560668945277, 0.8657282409667931, 0.8668008422851524, 0.8678739318847616, 0.8689475097656209, 0.8700216369628865, 0.871096252441402, 0.8721713562011676, 0.8732470092773394, 0.8743231506347614, 0.8753998413085895, 0.876477081298824, 0.8775548706054644, 0.878633148193355, 0.879712036132808, 0.8807915344238236, 0.8818715209960891, 0.8829521789550733, 0.8840333862304638, 0.8851151428222607, 0.8861975708007762, 0.8872806091308544, 0.888364257812495, 0.8894485168456981, 0.89053344726562, 0.8916189880371043, 0.8927052612304637, 0.8937921447753855, 0.8948797607421822, 0.8959679870605416, 0.8970570068359321, 0.8981466979980416, 0.899237121582026, 0.9003282775878855, 0.9014202270507762, 0.9025129089355418, 0.9036063842773386, 0.9047005920410105, 0.90579565429687, 0.9068915710449169, 0.907988281249995, 0.9090858459472607, 0.9101842651367139, 0.9112835388183546, 0.9123837890624952, 0.9134848937988234, 0.9145869750976514, 0.9156899719238232, 0.9167939453124949, 0.917898956298823, 0.9190049438476511, 0.9201119689941354, 0.9212200317382758, 0.9223292541503852, 0.9234395141601509, 0.9245509338378853, 0.9256635131835885, 0.9267772521972604, 0.9278922729492135, 0.9290085144042916, 0.9301259765624946, 0.9312448425292913, 0.9323649902343693, 0.933486541748041, 0.9346094970703066, 0.9357339172363223, 0.936859863281244, 0.9379873962402282, 0.9391164550781187, 0.940247161865228, 0.9413795776367123, 0.942513763427728, 0.9436497192382748, 0.9447875671386655, 0.9459273071288999, 0.9470690612792906, 0.9482128906249937, 0.9493588562011657, 0.9505070800781187, 0.9516576232910093, 0.9528105468749936, 0.9539660339355404, 0.9551240844726497, 0.9562849426269465, 0.9574486083984307, 0.9586152648925711, 0.9597850952148367, 0.960958282470696, 0.9621348876953054, 0.9633151550292897, 0.9644993896484303, 0.9656876525878834, 0.9668803100585867, 0.968077667236321, 0.9692799682617116, 0.9704875793456958, 0.9717009887695238, 0.9729205017089769, 0.9741467285156175, 0.9753802795410081, 0.9766218261718677, 0.9778722229003832, 0.9791323242187425, 0.9804033508300707, 0.9816867675781177, 0.982984222412102, 0.9842979736328051, 0.9856308288574146, 0.9869865722656176, 0.9883705139160083, 0.989790344238274, 0.9912579650878833, 0.9927941894531177, 0.9944410705566334, 0.996317932128899],
                'num_bt = 200, alpha = 0.1': [0.0005266952514648437, 0.0026622009277343754, 0.005522804260253907, 0.008751449584960939, 0.012211112976074221, 0.015833129882812498, 0.01957775115966797, 0.023419113159179696, 0.02733966827392579, 0.031326751708984385, 0.03537067413330079, 0.03946403503417971, 0.04360103607177738, 0.047776947021484405, 0.05198780059814457, 0.05623039245605472, 0.060501899719238306, 0.06480010986328127, 0.06912288665771488, 0.07346855163574223, 0.07783550262451176, 0.08222236633300783, 0.08662792205810552, 0.09105125427246098, 0.09549121856689458, 0.09994697570800787, 0.10441783905029303, 0.10890296936035163, 0.11340183258056649, 0.11791374206542979, 0.12243816375732434, 0.12697463989257826, 0.13152271270751967, 0.1360819244384767, 0.14065181732177745, 0.14523216247558604, 0.14982250213623055, 0.15442260742187514, 0.15903209686279313, 0.1636506652832033, 0.168278160095215, 0.17291435241699235, 0.17755886077880872, 0.18221160888671892, 0.1868722915649416, 0.19154083251953144, 0.19621692657470724, 0.20090049743652366, 0.20559139251709008, 0.21028930664062526, 0.21499423980712914, 0.2197060394287112, 0.2244245529174807, 0.2291496276855471, 0.23388118743896508, 0.2386191558837893, 0.24336330413818386, 0.2481136322021487, 0.2528699874877932, 0.25763236999511746, 0.26240062713623075, 0.26717460632324247, 0.27195438385009796, 0.27673973083496123, 0.2815306472778324, 0.2863271331787113, 0.2911289596557621, 0.2959362792968754, 0.30074878692626994, 0.30556663513183635, 0.31038967132568407, 0.3152178192138677, 0.32005115509033255, 0.32488945007324277, 0.3297328567504889, 0.33458114624023505, 0.33943439483642646, 0.3442926025390632, 0.34915561676025453, 0.35402343750000065, 0.35889614105224676, 0.36377349853515695, 0.36865566253662174, 0.37354255676269593, 0.37843410491943424, 0.38333030700683657, 0.3882311630249029, 0.39313659667968803, 0.39804668426513723, 0.40296134948730516, 0.4078805923461919, 0.41280441284179736, 0.4177328109741217, 0.42266563415527403, 0.4276031112670905, 0.4325450134277351, 0.4374914169311531, 0.4424423980712899, 0.44739788055420004, 0.45235778808593835, 0.45732227325439534, 0.4622911834716805, 0.46726467132568444, 0.47224258422851645, 0.4772250747680672, 0.48221199035644613, 0.48720348358154386, 0.492199478149415, 0.49720005035400483, 0.5022051239013681, 0.5072147750854501, 0.5122290039062509, 0.5172478103637705, 0.5222712707519543, 0.5272993087768567, 0.5323320007324233, 0.5373693466186538, 0.5424113464355484, 0.5474580764770525, 0.5525096130371112, 0.5575658798217793, 0.5626268768310567, 0.567692756652834, 0.5727635192871114, 0.5778391647338887, 0.5829196929931661, 0.5880052566528342, 0.5930957794189475, 0.5981914138793967, 0.6032921600341818, 0.6083980178833028, 0.6135090637207052, 0.6186254501342794, 0.6237471008300801, 0.6288740921020528, 0.634006576538088, 0.6391444778442403, 0.6442880249023457, 0.6494372177124044, 0.6545920562744161, 0.6597527694702168, 0.6649192810058613, 0.6700918197631853, 0.6752703857421893, 0.6804551315307634, 0.6856461334228532, 0.690843467712404, 0.6960472869873062, 0.7012576675415054, 0.7064747619628922, 0.711698722839357, 0.7169297027587906, 0.7221677780151383, 0.7274131011962908, 0.7326659011840839, 0.7379263305664081, 0.7431945419311543, 0.7484706878662131, 0.7537550735473655, 0.7590478515625023, 0.7643492507934593, 0.7696595764160179, 0.7749789810180687, 0.7803078460693382, 0.7856464004516623, 0.7909950256347678, 0.7963540267944358, 0.8017237854003927, 0.80710460662842, 0.8124971008300801, 0.8179015731811543, 0.823318634033205, 0.8287487411499042, 0.8341925048828143, 0.8396506118774432, 0.845123825073244, 0.8506128311157246, 0.8561184692382833, 0.8616418838500997, 0.8671839904785177, 0.8727460861206076, 0.8783294677734395, 0.8839356613159199, 0.8895665740966816, 0.8952240371704121, 0.9009105682373066, 0.9066288375854512, 0.9123821258544944, 0.9181743240356468, 0.9240102386474631, 0.9298956680297872, 0.9358380889892599, 0.9418471908569359, 0.9479356384277366, 0.9541212844848657, 0.9604301452636743, 0.9669025039672876, 0.9736086273193385, 0.9806913375854518, 0.9885530853271509],
                'num_bt = 200, alpha = 0.05': [0.00025646209716796877, 0.0017797088623046878, 0.004100608825683594, 0.0068597412109375, 0.009901237487792966, 0.013143997192382809, 0.016539649963378908, 0.0200567626953125, 0.023673591613769536, 0.027374267578125014, 0.031146888732910168, 0.03498214721679687, 0.03887271881103515, 0.04281265258789061, 0.046796989440917945, 0.0508216857910156, 0.054883308410644496, 0.05897872924804685, 0.06310550689697261, 0.06726142883300776, 0.07144443511962884, 0.0756529235839843, 0.07988521575927726, 0.08414009094238271, 0.08841632843017569, 0.09271270751953116, 0.09702823638916008, 0.101362075805664, 0.10571338653564448, 0.11008140563964841, 0.11446544647216796, 0.11886489868164063, 0.1232790756225586, 0.12770744323730468, 0.13214962005615233, 0.13660499572753904, 0.14107326507568357, 0.14555389404296878, 0.15004657745361333, 0.154551010131836, 0.15906673431396487, 0.16359352111816405, 0.16813098907470705, 0.17267898559570313, 0.1772372055053711, 0.1818053436279297, 0.18638324737548825, 0.19097068786621088, 0.19556743621826167, 0.20017326354980466, 0.2047880172729492, 0.20941154479980467, 0.21404361724853516, 0.2186841583251953, 0.2233330154418945, 0.22798995971679686, 0.23265491485595705, 0.23732772827148438, 0.2420083236694336, 0.24669654846191408, 0.25139225006103516, 0.25609542846679695, 0.2608059310913086, 0.26552360534667974, 0.2702483749389649, 0.27498023986816417, 0.27971904754638677, 0.28446472167968756, 0.28921718597412116, 0.29397636413574224, 0.29874225616455086, 0.30351470947265635, 0.3082937240600586, 0.3130792236328125, 0.3178710556030273, 0.3226693725585936, 0.3274739456176757, 0.3322847747802734, 0.33710178375244143, 0.341925048828125, 0.3467544174194337, 0.3515898895263674, 0.356431465148926, 0.3612790679931643, 0.36613262176513695, 0.37099212646484403, 0.37585765838623075, 0.3807290649414065, 0.38560634613037126, 0.3904895782470705, 0.3953786087036135, 0.4002734375000002, 0.40517414093017595, 0.4100806427001955, 0.4149929428100588, 0.41991104125976586, 0.42483486175537133, 0.4297644805908206, 0.4346998977661136, 0.43964103698730506, 0.44458789825439493, 0.4495405578613286, 0.45449901580810603, 0.4594631958007818, 0.4644331741333013, 0.4694088745117193, 0.4743904495239264, 0.4793777465820319, 0.48437084197998115, 0.4893698120117194, 0.4943745803833015, 0.49938522338867264, 0.5044017410278328, 0.5094241333007821, 0.5144524765014657, 0.5194866943359384, 0.5245269393920908, 0.5295732116699228, 0.5346254348754893, 0.5396837615966807, 0.5447482681274425, 0.549818801879884, 0.5548955917358409, 0.5599785614013684, 0.5650677871704115, 0.5701633453369155, 0.5752653121948257, 0.5803736877441421, 0.5854884719848648, 0.5906098937988296, 0.595737800598146, 0.6008724212646499, 0.6060138320922865, 0.6111619567871107, 0.6163170242309584, 0.6214789581298841, 0.626647987365724, 0.6318241882324231, 0.6370075607299817, 0.6421982574462901, 0.6473963546752941, 0.652602005004884, 0.6578152847290049, 0.6630363464355478, 0.6682652664184578, 0.6735021209716805, 0.678747215270997, 0.6840005493164072, 0.6892622756958018, 0.6945326232910167, 0.6998117446899426, 0.7050997924804701, 0.7103969955444349, 0.7157034301757828, 0.7210194778442398, 0.7263452148437517, 0.7316809463500995, 0.7370269012451192, 0.7423833084106466, 0.7477504730224629, 0.7531287002563496, 0.7585182952880878, 0.7639195632934588, 0.7693328857421893, 0.7747586441040055, 0.7801972198486344, 0.785649147033693, 0.7911147308349626, 0.796594657897951, 0.8020893096923847, 0.8075993728637716, 0.813125457763674, 0.8186683273315452, 0.824228668212893, 0.8298072433471704, 0.8354051208496118, 0.8410232925415064, 0.8466627502441431, 0.8523247909545921, 0.858010711669924, 0.8637222671508811, 0.8694609832763693, 0.875228843688967, 0.8810282135009788, 0.8868616104125999, 0.8927320098876976, 0.8986429977417016, 0.9045986175537135, 0.9106038284301785, 0.9166648864746121, 0.922789039611819, 0.9289858245849636, 0.9352674484252956, 0.9416502380371119, 0.9481566238403347, 0.9548195648193389, 0.961690254211429, 0.9688574218750032, 0.9765015029907258, 0.9851329803466828],
                'num_bt = 200, alpha = 0.025': [0.00012660980224609377, 0.0012133789062500006, 0.0031041336059570313, 0.00547554016113281, 0.00816616058349609, 0.011087417602539059, 0.014185523986816401, 0.017424774169921872, 0.020780448913574223, 0.024234161376953132, 0.027772254943847663, 0.031383972167968746, 0.03506069183349609, 0.03879554748535156, 0.042582817077636705, 0.046417617797851536, 0.0502959060668945, 0.05421424865722652, 0.058169593811035106, 0.06215934753417964, 0.06618122100830073, 0.07023315429687496, 0.07431339263916009, 0.0784202575683593, 0.08255237579345695, 0.08670837402343741, 0.09088710784912102, 0.09508750915527336, 0.09930858612060539, 0.10354949951171868, 0.10780941009521477, 0.11208747863769523, 0.11638309478759756, 0.12069564819335926, 0.12502437591552723, 0.12936889648437494, 0.13372867584228512, 0.13810310363769526, 0.14249187469482413, 0.14689445495605458, 0.1513105392456054, 0.15573974609374996, 0.1601816940307617, 0.16463607788085938, 0.1691025161743164, 0.17358085632324222, 0.1780707168579102, 0.1825718688964844, 0.18708415985107427, 0.19160713195800783, 0.1961407852172852, 0.20068489074707038, 0.20523906707763678, 0.20980331420898446, 0.21437740325927743, 0.21896118164062506, 0.2235544204711915, 0.2281569671630861, 0.23276882171630878, 0.2373896789550783, 0.2420194625854494, 0.2466580200195314, 0.25130535125732434, 0.25596115112304696, 0.26062549591064466, 0.26529823303222666, 0.26997913360595704, 0.27466827392578125, 0.27936550140380856, 0.28407066345214843, 0.28878376007080075, 0.2935047149658203, 0.2982334518432618, 0.3029698181152345, 0.3077138137817384, 0.31246543884277356, 0.3172245407104493, 0.3219910430908204, 0.32676502227783205, 0.3315462493896485, 0.3363348007202148, 0.3411306762695312, 0.3459336471557617, 0.35074386596679696, 0.35556118011474624, 0.3603855895996096, 0.36521709442138695, 0.37005554199218776, 0.3749010848999026, 0.3797535705566409, 0.3846130752563479, 0.3894794464111331, 0.3943527603149417, 0.3992329406738284, 0.4041200637817386, 0.4090139770507816, 0.4139148330688479, 0.4188224792480471, 0.42373706817626977, 0.4286584472656253, 0.433586692810059, 0.43852172851562543, 0.44346363067627004, 0.4484123992919927, 0.45336803436279355, 0.45833053588867245, 0.46329982757568416, 0.4682761383056646, 0.4732592391967779, 0.47824928283691465, 0.4832463455200201, 0.4882502746582037, 0.49326122283935603, 0.4982791900634771, 0.5033041000366216, 0.5083361816406258, 0.5133752822875985, 0.5184215545654305, 0.523474998474122, 0.5285356903076182, 0.5336035537719737, 0.5386787414550791, 0.5437613296508799, 0.5488512420654308, 0.5539486312866222, 0.5590534973144541, 0.5641659927368174, 0.5692860412597667, 0.5744137954711925, 0.5795494079589856, 0.584692726135255, 0.5898440551757824, 0.5950033950805675, 0.6001707458496106, 0.605346260070802, 0.6105300903320323, 0.6157223129272471, 0.6209229278564463, 0.6261321640014659, 0.6313500976562509, 0.6365768814086923, 0.6418125152587899, 0.6470573043823251, 0.6523112487792979, 0.657574577331544, 0.6628474426269542, 0.6681299209594738, 0.6734222412109387, 0.6787246322631848, 0.6840371704101575, 0.6893601608276381, 0.6946936798095718, 0.7000381088256851, 0.7053936004638688, 0.7107603836059586, 0.7161387634277359, 0.7215289688110367, 0.7269313049316422, 0.7323460769653336, 0.7377736663818375, 0.7432143020629898, 0.7486685180664077, 0.7541365432739273, 0.7596189117431658, 0.7651160049438495, 0.770628433227541, 0.7761565017700216, 0.7817009735107443, 0.7872623825073264, 0.7928412628173851, 0.7984385299682641, 0.8040547180175805, 0.8096908187866236, 0.8153476715087917, 0.8210262680053737, 0.8267276763916043, 0.8324530410766631, 0.8382038116455108, 0.843981285095218, 0.8497872161865265, 0.8556233596801788, 0.8614917755126983, 0.8673948287963897, 0.8733351135253937, 0.8793157577514681, 0.8853402709960971, 0.8914127731323276, 0.8975381469726595, 0.9037223434448278, 0.909972457885746, 0.9162973403930701, 0.922708053588871, 0.9292190170288124, 0.9358493804931678, 0.9426256179809609, 0.949586410522465, 0.9567917251586955, 0.9643453216552775, 0.9724580764770547, 0.981724624633793],
                'num_bt = 100, alpha = 0.1': [0.0010530471801757815, 0.005330657958984376, 0.011070747375488285, 0.01755897521972656, 0.024520378112792965, 0.03181716918945312, 0.039369010925292956, 0.0471240997314453, 0.0550467300415039, 0.06311126708984374, 0.07129817962646484, 0.07959266662597655, 0.08798267364501955, 0.0964585876464844, 0.10501262664794928, 0.11363807678222662, 0.12232944488525396, 0.13108200073242193, 0.13989154815673835, 0.14875457763671884, 0.15766803741455088, 0.16662918090820322, 0.1756356430053712, 0.18468521118164077, 0.19377597808837904, 0.20290626525878921, 0.21207454681396504, 0.22127944946289085, 0.23051967620849634, 0.23979415893554712, 0.24910182952880888, 0.25844184875488313, 0.2678132247924808, 0.2772153472900394, 0.28664737701416043, 0.29610877990722684, 0.30559902191162136, 0.31511749267578154, 0.32466373443603547, 0.3342373657226566, 0.3438380813598637, 0.3534654235839848, 0.363119163513184, 0.37279899597168015, 0.3825047683715824, 0.39223625183105515, 0.4019932937622075, 0.4117758178710942, 0.4215836715698247, 0.4314168548583989, 0.4412752151489262, 0.45115890502929734, 0.4610678482055669, 0.47100219726562553, 0.48096195220947324, 0.4909472656250006, 0.5009583663940438, 0.5109952545166023, 0.5210583877563484, 0.5311478424072273, 0.5412639999389655, 0.5514071655273443, 0.5615777206420904, 0.5717761230468756, 0.5820027542114266, 0.5922581481933602, 0.6025429153442392, 0.612857666015626, 0.6232031631469737, 0.6335800170898447, 0.6439892196655284, 0.654431610107423, 0.6649082565307629, 0.6754202270507825, 0.6859688186645521, 0.6965554809570325, 0.7071815872192395, 0.7178489685058607, 0.7285595321655287, 0.739315338134767, 0.7501188278198256, 0.7609728240966811, 0.7718803024292007, 0.7828448486328139, 0.7938705825805679, 0.8049623107910171, 0.8161255264282241, 0.827366867065431, 0.8386942672729505, 0.8501174163818372, 0.8616481399536144, 0.8733016204833997, 0.8850971603393565, 0.8970608520507823, 0.9092285537719738, 0.9216524505615247, 0.9344142532348645, 0.9476547241210949, 0.9616604995727549, 0.9772372436523449],
                'num_bt = 100, alpha = 0.05': [0.0005128097534179688, 0.0035651397705078114, 0.008225822448730467, 0.01377662658691406, 0.019905586242675778, 0.026449737548828123, 0.03331188201904297, 0.040428848266601564, 0.0477566146850586, 0.055263214111328125, 0.06292453765869141, 0.07072181701660157, 0.07864017486572264, 0.0866675567626953, 0.09479404449462892, 0.10301116943359379, 0.11131214141845708, 0.1196907806396485, 0.12814197540283206, 0.13666130065917975, 0.14524478912353522, 0.15388900756835944, 0.16259090423583994, 0.17134765625000012, 0.18015705108642593, 0.18901679992675796, 0.19792491912841811, 0.2068797302246095, 0.21587963104248062, 0.22492324829101581, 0.23400913238525406, 0.24313629150390642, 0.2523035049438478, 0.26150985717773456, 0.2707544326782229, 0.2800365447998049, 0.2893553543090823, 0.29871025085449254, 0.30810070037841836, 0.31752601623535204, 0.32698581695556694, 0.33647972106933655, 0.34600734710693426, 0.3555682373046881, 0.36516231536865296, 0.37478912353515687, 0.3844486618041999, 0.39414070129394607, 0.4038650131225594, 0.41362174987793054, 0.42341068267822346, 0.4332318878173837, 0.443085365295411, 0.4529711914062508, 0.46288959503173915, 0.4728406524658212, 0.48282451629638756, 0.4928414916992196, 0.5028918075561533, 0.5129758453369149, 0.5230939102172858, 0.5332465362548835, 0.5434341049194344, 0.5536571502685554, 0.5639163589477547, 0.5742122650146493, 0.5845457077026375, 0.5949174499511725, 0.605328330993653, 0.6157794189453132, 0.6262716293334969, 0.6368063354492195, 0.6473846817016609, 0.6580081939697273, 0.6686784744262704, 0.6793972015380867, 0.6901663589477547, 0.7009882354736336, 0.7118651199340829, 0.7227997589111337, 0.7337952804565437, 0.7448551177978522, 0.7559832382202156, 0.767184143066407, 0.778463096618653, 0.7898260498046881, 0.8012801742553717, 0.812833862304688, 0.8244971847534186, 0.836282348632813, 0.8482045364379889, 0.8602828979492192, 0.8725419998168951, 0.8850147247314459, 0.8977466201782232, 0.9108037567138676, 0.9242892074584965, 0.9383808135986333, 0.9534402084350593, 0.9704869842529305],
                'num_bt = 100, alpha = 0.025': [0.00025318145751953127, 0.0024313354492187496, 0.00622997283935547, 0.011004486083984376, 0.016431846618652345, 0.022334899902343747, 0.02860530853271484, 0.03517158508300782, 0.04198360443115235, 0.04900466918945313, 0.056207008361816406, 0.06356887817382811, 0.07107303619384765, 0.07870536804199217, 0.0864543533325195, 0.09431030273437495, 0.10226490020751948, 0.11031120300292963, 0.11844318389892572, 0.12665557861328114, 0.13494373321533193, 0.14330360412597648, 0.15173160552978507, 0.1602246093749999, 0.16877971649169915, 0.1773944091796874, 0.18606639862060537, 0.19479362487792956, 0.20357418060302723, 0.21240638732910144, 0.22128879547119132, 0.23021987915039055, 0.23919857025146474, 0.24822349548339834, 0.25729381561279285, 0.26640838623046864, 0.2755665969848631, 0.2847674560546874, 0.2940104293823241, 0.3032947540283201, 0.31261997222900373, 0.32198554992675765, 0.33139102935791, 0.3408360290527342, 0.350320243835449, 0.35984336853027327, 0.369405174255371, 0.3790055084228515, 0.38864414215087884, 0.3983211517333983, 0.4080363082885741, 0.4177897644042967, 0.42758152008056627, 0.43741157531738273, 0.44728015899658197, 0.45718749999999997, 0.46713375091552733, 0.4771192169189453, 0.48714420318603513, 0.49720916748046873, 0.5073144912719727, 0.517460708618164, 0.5276483535766601, 0.5378781127929686, 0.5481506729125976, 0.5584667205810545, 0.5688272476196286, 0.5792331695556638, 0.589685478210449, 0.600185317993164, 0.6107340621948241, 0.6213330078124999, 0.631983757019043, 0.6426879119873048, 0.6534475326538087, 0.6642645263671876, 0.6751412582397462, 0.6860803222656253, 0.6970846176147463, 0.7081573486328125, 0.7193020248413087, 0.7305229187011719, 0.7418246078491211, 0.7532124328613279, 0.7646924972534177, 0.7762720489501949, 0.7879593276977535, 0.7997643280029292, 0.8116988754272456, 0.8237773895263665, 0.8360177230834953, 0.8484423828124994, 0.8610802841186516, 0.8739700317382804, 0.8871651077270499, 0.9007428741455068, 0.9148239517211905, 0.9296160888671865, 0.9455405807495105, 0.9637833404541005],
                'num_bt = 50, alpha = 0.1': [0.002104988098144531, 0.010686798095703127, 0.022243995666503903, 0.03534767150878906, 0.04944561004638671, 0.06426040649414061, 0.07962970733642577, 0.09544906616210938, 0.11164653778076172, 0.12817016601562498, 0.14498111724853516, 0.1620494842529297, 0.1793517684936524, 0.19686920166015628, 0.21458644866943363, 0.23249114990234374, 0.25057315826416016, 0.2688238525390625, 0.28723644256591796, 0.30580520629882824, 0.32452541351318376, 0.34339347839355494, 0.36240657806396515, 0.38156257629394563, 0.4008601760864261, 0.42029869079589877, 0.439878196716309, 0.45959922790527385, 0.4794631576538091, 0.4994721984863286, 0.5196290206909184, 0.5399374389648441, 0.5604021072387699, 0.5810285949707035, 0.601823997497559, 0.6227967071533207, 0.6439570236206058, 0.6653173065185549, 0.6868929672241213, 0.7087026977539064, 0.7307703018188476, 0.7531256103515627, 0.7758077621459962, 0.7988690185546876, 0.8223818588256835, 0.8464518737792968, 0.8712435531616209, 0.897040786743164, 0.9244193649291994, 0.9549925994873047],
                'num_bt = 50, alpha = 0.05': [0.0010253524780273436, 0.007153701782226562, 0.016551856994628904, 0.027787704467773428, 0.040236625671386715, 0.053571395874023424, 0.06759670257568356, 0.08218505859375, 0.09724811553955079, 0.11272163391113282, 0.1285573959350586, 0.14471817016601565, 0.1611745834350586, 0.1779032135009766, 0.19488491058349616, 0.2121041107177735, 0.22954799652099614, 0.24720588684082034, 0.2650691604614259, 0.28313056945800796, 0.3013843917846682, 0.3198258972167971, 0.33845157623291044, 0.3572587585449221, 0.376245918273926, 0.395412063598633, 0.4147572708129885, 0.4342823791503908, 0.45398914337158225, 0.4738802337646486, 0.4939592361450197, 0.5142308807373048, 0.5347008895874026, 0.5553767395019535, 0.5762670516967778, 0.5973825836181648, 0.6187364578247077, 0.6403443145751957, 0.6622255325317388, 0.6844039154052739, 0.7069094467163091, 0.7297798919677738, 0.7530647659301761, 0.7768299865722659, 0.8011670303344729, 0.826208877563477, 0.852162818908692, 0.8793858337402352, 0.9086018753051766, 0.9418449401855475],
                'num_bt = 50, alpha = 0.025': [0.0005062484741210939, 0.004881439208984375, 0.012548561096191409, 0.022227935791015625, 0.03327510833740233, 0.045335311889648414, 0.058191719055175756, 0.07170074462890623, 0.08576206207275389, 0.10030220031738282, 0.11526584625244143, 0.1306098937988281, 0.1463006210327148, 0.1623106384277343, 0.17861782073974602, 0.1952041625976562, 0.21205471038818355, 0.22915710449218749, 0.24650104522705074, 0.26407836914062494, 0.28188220977783196, 0.29990722656249996, 0.31814914703369135, 0.3366050720214844, 0.3552730178833008, 0.37415191650390633, 0.3932419967651368, 0.4125440979003908, 0.4320604324340822, 0.4517940521240237, 0.47174915313720733, 0.4919313812255862, 0.5123475265502933, 0.5330061340332035, 0.5539176559448247, 0.5750946807861332, 0.5965523147583014, 0.6183092498779303, 0.6403881454467779, 0.6628169250488287, 0.685630607604981, 0.7088736724853519, 0.7326040267944338, 0.7568986511230471, 0.7818646621704104, 0.8076572418212895, 0.8345180892944339, 0.8628623962402346, 0.8935304641723636, 0.9288782501220707],
                'num_bt = 30, alpha = 0.1': [0.003505865732828776, 0.0178689956665039, 0.03730777104695638, 0.05944360097249348, 0.08335453669230143, 0.10857747395833334, 0.13484245936075845, 0.16197719573974612, 0.18986501693725588, 0.21842352549235028, 0.24759359359741212, 0.2773321787516274, 0.3076083819071449, 0.33840077718098927, 0.3696960131327308, 0.40148760477701795, 0.4337754885355629, 0.4665662765502927, 0.4998735745747882, 0.5337188084920246, 0.5681330680847166, 0.6031595865885414, 0.6388580004374184, 0.6753109614054361, 0.7126363436381019, 0.7510082880655921, 0.7907005627950029, 0.8321870803833004, 0.8764300346374508, 0.926118723551432],
                'num_bt = 30, alpha = 0.05': [0.0017083168029785158, 0.011975797017415368, 0.02781553268432617, 0.04685484568277994, 0.06805556615193684, 0.09087403615315756, 0.11498689651489258, 0.14018510182698568, 0.1663259824117025, 0.19330844879150394, 0.22105944951375328, 0.2495258967081706, 0.2786695798238119, 0.30846405029296875, 0.3388926506042481, 0.3699475606282553, 0.4016289710998535, 0.4339452743530273, 0.46691370010375977, 0.5005613327026367, 0.5349272727966307, 0.5700660705566404, 0.6060525576273598, 0.6429908752441403, 0.6810288429260251, 0.7203848520914709, 0.7614021619160968, 0.8046739578247067, 0.851403903961181, 0.9049661636352534],
                'num_bt = 30, alpha = 0.025': [0.0008435885111490885, 0.008178138732910154, 0.021117115020751948, 0.03755346934000651, 0.056421693166097, 0.07713553110758462, 0.09933786392211913, 0.12279478708902995, 0.1473451932271322, 0.1728741963704427, 0.19929863611857096, 0.22655766805013022, 0.2546075503031413, 0.283418083190918, 0.3129702568054199, 0.3432552337646484, 0.3742734591166178, 0.4060349146525065, 0.4385598182678224, 0.4718799591064454, 0.5060409863789878, 0.5411063512166342, 0.5771634737650556, 0.6143334706624354, 0.6527883211771653, 0.6927816390991218, 0.7347115516662605, 0.7792645772298182, 0.827830537160238, 0.8842966715494796],
                'num_bt = 20, alpha = 0.1': [0.005254220962524414, 0.026914119720458988, 0.05641789436340332, 0.0902134895324707, 0.12692608833312985, 0.16587238311767571, 0.20666403770446767, 0.24906482696533194, 0.29292883872985825, 0.33817090988159165, 0.3847514629364012, 0.4326707839965818, 0.4819692134857176, 0.5327330589294432, 0.5851095676422118, 0.6393381118774413, 0.6958132266998289, 0.7552347183227537, 0.8190390110015868, 0.8912508964538572],
                'num_bt = 20, alpha = 0.05': [0.002561426162719727, 0.01806516647338867, 0.04216942787170409, 0.07135391235351564, 0.1040808200836182, 0.13955373764038093, 0.17731089591979982, 0.21706857681274416, 0.25865063667297367, 0.30195388793945327, 0.3469314098358156, 0.39358491897583026, 0.4419655323028567, 0.49218158721923855, 0.5444176197052006, 0.5989718437194829, 0.6563361644744876, 0.7173814773559575, 0.7838938236236577, 0.8608916282653813],
                'num_bt = 20, alpha = 0.025': [0.0012650966644287111, 0.012348556518554692, 0.032070970535278326, 0.05733404159545899, 0.08657145500183107, 0.11893157958984377, 0.1539091587066651, 0.19119005203247075, 0.2305778980255127, 0.27195787429809565, 0.31527810096740716, 0.36054258346557605, 0.4078114986419677, 0.4572108268737792, 0.5089540958404539, 0.5633859634399412, 0.6210731983184814, 0.6830172538757324, 0.7512671947479248, 0.8315665245056152]
                }

        # Loads the persistency
        PersistencyUtil.add_persistable_component(self)
        self.persistence_file_name = AMinerConfig.build_persistence_file_name(aminer_config, self.__class__.__name__, persistence_id)
        persistence_data = PersistencyUtil.load_json(self.persistence_file_name)

        # Imports the persistency if self.event_type_detector.options['loadPersistenceData'] is True
        if (persistence_data is not None) and self.event_type_detector.options['loadPersistenceData']:
            self.load_persistence_data(persistence_data)

    def receive_atom(self, log_atom):
        """Receive an parsed atom and the information about the parser match. Initialises Variables for new eventTypes
        @param log_atom the parsed log atom
        @return True if this handler was really able to handle and process the match."""

        event_index = self.event_type_detector.current_index

        # Initialises a new eventType in the lists if necessary
        if len(self.length) < event_index + 1 or self.var_type[event_index] == []:
            for _ in range(event_index + 1 - len(self.length)):
                self.length.append(0)
                self.variable_path_num.append([])
                self.var_type.append([])
                self.possible_var_type.append([])
                self.distr_val.append([])
                self.bt_results.append([])

            # Number of variables
            self.length[event_index] = len(self.event_type_detector.variable_key_list[event_index])
            # List of the found vartypes
            self.var_type[event_index] = [[] for i in range(self.length[event_index])]
            # Stores the possible VarTypes of the variables
            self.possible_var_type[event_index] = [[] for i in range(self.length[event_index])]
            # Stores the values the distribution, which are needed for the sKS
            self.distr_val[event_index] = [[] for i in range(self.length[event_index])]
            # List of the successes of the binomialtest for the rejection in the sKS or variables of discrete type
            self.bt_results[event_index] = [[] for i in range(self.length[event_index])]

            # Adds the variable indices to the variable_path_num-list if the path_list is not empty
            if self.path_list is not None:
                for var_index in range(self.length[event_index]):
                    if self.event_type_detector.variable_key_list[event_index][var_index] in self.path_list:
                        self.variable_path_num[event_index].append(var_index)
            if self.num_events < event_index + 1:
                self.num_events = event_index + 1

        # Processes the current log-line by testing and updating
        self.process_ll(event_index, log_atom)
        return True

    def get_time_trigger_class(self):
        """Get the trigger class this component can be registered for. This detector only needs persisteny triggers in real time."""
        return AnalysisContext.TIME_TRIGGER_CLASS_REALTIME

    def do_timer(self, trigger_time):
        """Checks if current ruleset should be persisted"""
        if self.next_persist_time is None:
            return 600

        delta = self.next_persist_time - trigger_time
        if delta < 0:
            self.do_persist()
            delta = 600
        return delta

    def do_persist(self):
        """Immediately write persistence data to storage."""  # No support for empirical distributions !!!
        if self.print_statistics:
            print('numTrackedVars: %s' % len([i for i in self.event_type_detector.check_variables[0] if i]))
            print('numChangedVarTypes: %s' % len(self.changed_var_types))
            print('numFailedIndicators: %s' % len(self.failed_indicators_total))

            # print(self.changed_var_types)
            print('failed indicators:')
            print(self.failed_indicators_total)

            print('failed inidcatorValues:')
            print(self.failed_indicators_values)

            print('failed indicatorPaths:')
            print(self.failed_indicators_paths)

            print('indicatorToVar')
            print(self.failed_indicators)
            # Prints eventIndices, which caused indicators to fail
            if len(self.failed_indicators) > 0:
                print([self.failed_indicators[0][i] for i in range(len(self.failed_indicators[0])) if len(self.failed_indicators[0][i]) > 0])

            print('indicatorsNumPerEvent')
            # Prints eventIndices, which caused indicators to fail
            if len(self.failed_indicators) > 0:
                print([[i, len(self.failed_indicators[0][i])]
                      for i in range(len(self.failed_indicators[0])) if len(self.failed_indicators[0][i]) > 0])

        # This part creates the indicator plot
        if self.show_indi_plot:
            val1 = self.failed_indicators_values
            val2 = self.failed_indicators_total
            x_dist = self.options['numUpdate'] * self.options['numCheckVarTypeVT']
            x = []
            y = []

            x.append(0)
            y.append(0)
            for j, v2 in enumerate(val2):
                v1 = val1[j]
                x.append(v2 - x_dist)
                y.append(0)

                x.append(v2 - x_dist)
                y.append(v1)

                x.append(v2)
                y.append(v1)

                x.append(v2)
                y.append(0)
            x.append(self.event_type_detector.total_records)
            y.append(0)

            plt.plot(x, y)
            plt.xlabel('Number of lines')
            plt.ylabel('confidence')
            plt.title('Progression of the confidence value')
            plt.savefig('/tmp/VTDoutput', dpi=1200)

        if not self.event_type_detector.options['loadPersistenceData']:
            return

        tmp_list = [self.var_type, self.possible_var_type, self.var_type_history_list,
                    self.var_type_history_list_reference, self.failed_indicators, [[self.distr_val[event_index][var_index] if (
                        len(self.distr_val[event_index][var_index]) > 0 and self.var_type[event_index][var_index][0] == 'emp') else [] for
                            var_index in range(len(self.distr_val[event_index]))] for event_index in range(len(self.distr_val))]]
        PersistencyUtil.store_json(self.persistence_file_name, tmp_list)
        self.next_persist_time = None

    def load_persistence_data(self, persistence_data):
        """Extracts the persistency data and appends various lists to create a consistent state"""
        # Import the lists of the persistency
        self.var_type = persistence_data[0]
        self.possible_var_type = persistence_data[1]
        self.var_type_history_list = persistence_data[2]
        self.var_type_history_list_reference = persistence_data[3]
        self.failed_indicators = persistence_data[4]
        self.distr_val = persistence_data[5]
        self.num_events = len(self.var_type)

        # Create the initial lists which derive from the persistency
        # Number of variables of the single events
        self.length = [len(self.event_type_detector.variable_key_list[event_index]) for event_index in range(self.num_events)]
        self.variable_path_num = [[]] * self.num_events
        # List of the successes of the binomialtest for the rejection in the sKS or variables of discrete type
        self.bt_results = [[[] for var_index in range(self.length[event_index])] for event_index in range(self.num_events)]

        # Updates the lists for each eventType individually
        for event_index in range(self.num_events):
            # Adds the variable indices to the variable_path_num-list if the path_list is not empty
            if self.path_list is not None:
                for var_index in range(self.length[event_index]):
                    if self.event_type_detector.variable_key_list[event_index][var_index] in self.path_list:
                        self.variable_path_num[event_index].append(var_index)

            # Initialises the lists for the discrete distribution, or continuous distribution
            for var_index in range(len(self.var_type[event_index])):
                if len(self.var_type[event_index][var_index]) > 0:

                    if self.var_type[event_index][var_index][0] in self.distr_list:
                        self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                        if self.var_type[event_index][var_index][0] != 'emp':
                            self.s_ks_get_quantiles(event_index, var_index, log_atom)
                    elif self.var_type[event_index][var_index][0] == 'd':
                        self.d_init_bt(event_index, var_index)

    def process_ll(self, event_index, log_atom):
        """Processes the LogLine. Extracts and appends the values of the logline to the values-list."""
        # Return if no variable is tracked in the VTD
        if len(self.event_type_detector.variable_key_list[event_index]) == 0 or (
                self.path_list is not None and self.variable_path_num[event_index] == []):
            return

        # Initial detection of varTypes
        if self.event_type_detector.num_eventlines[event_index] == self.options['numMinAppearance'] and self.var_type[event_index][0] == []:
            # Test all variables
            if self.path_list is None:
                for var_index in range(self.length[event_index]):
                    tmp_var_type = self.detect_var_type(event_index, var_index)

                    # VarType is empiric distribution
                    if tmp_var_type[0] == 'emp':
                        self.var_type[event_index][var_index] = tmp_var_type
                        self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                        self.s_ks_get_quantiles(event_index, var_index, log_atom)

                    # VarType is a continuous distribution
                    elif tmp_var_type[0] in self.distr_list:
                        self.var_type[event_index][var_index] = tmp_var_type[:-1]
                        self.possible_var_type[event_index][var_index] = tmp_var_type[-1]
                        self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                        self.s_ks_get_quantiles(event_index, var_index, log_atom)

                    else:
                        self.var_type[event_index][var_index] = tmp_var_type

                    # Initialises the binomialtest for the discrete type
                    if tmp_var_type[0] == 'd':
                        self.d_init_bt(event_index, var_index)
                    # mark the variables, which could be static parts of the parser model
                    elif tmp_var_type[0] == 'stat':
                        self.var_type[event_index][var_index][2] = True

            # Test only the variables with paths in the path_list
            else:
                for var_index in self.variable_path_num[event_index]:
                    tmp_var_type = self.detect_var_type(event_index, var_index)

                    # VarType is empiric distribution
                    if tmp_var_type[0] == 'emp':
                        self.var_type[event_index][var_index] = tmp_var_type
                        self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                        self.s_ks_get_quantiles(event_index, var_index, log_atom)

                    # VarType is a continuous distribution
                    elif tmp_var_type[0] in self.distr_list:
                        self.var_type[event_index][var_index] = tmp_var_type[:-1]
                        self.possible_var_type[event_index][var_index] = tmp_var_type[-1]
                        self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                        self.s_ks_get_quantiles(event_index, var_index, log_atom)

                    else:
                        self.var_type[event_index][var_index] = tmp_var_type

                    # Initialises the binomialtest for the discrete type
                    if tmp_var_type[0] == 'd':
                        self.d_init_bt(event_index, var_index)
                    # mark the variables, which could be static parts of the parser model
                    elif tmp_var_type[0] == 'stat':
                        self.var_type[event_index][var_index][2] = True

            self.init_var_type_history_list(event_index)
            self.print_initial_var_type(event_index, log_atom)

        # Update varTypes
        elif self.event_type_detector.num_eventlines[event_index] > self.options['numMinAppearance'] and (
                self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) % self.options[
                'numUpdate'] == 0:

            # Checks if the updates of the varTypes should be stopped
            if self.options['update_var_type'] and (not isinstance(self.options['numStopUpdate'], bool)) and (
                    self.event_type_detector.total_records >= self.options['numStopUpdate']):
                self.options['update_var_type'] = False

            # Update the variableTypes
            if self.path_list is None:
                for var_index in range(self.length[event_index]):
                    # Skips the variable if checkVariable is False
                    if not self.event_type_detector.check_variables[event_index][var_index]:
                        continue

                    # update varTypes
                    self.update_var_type(event_index, var_index, log_atom)

                    # Skips the variable if checkVariable is False
                    if not self.event_type_detector.check_variables[event_index][var_index]:
                        continue

                    # This section updates the historyList of the variableTypes
                    try:
                        # Index of the variableType in the list  # [others, static, [discrete, number of appended steps], asc, desc,
                        # unique, normal, uniform, beta, special]
                        type_index = self.var_type_history_list_order.index(self.var_type[event_index][var_index][0])
                    except:
                        type_index = -1

                    for tmp_type_index in range(len(self.var_type_history_list[event_index][var_index])):
                        if tmp_type_index == type_index:
                            if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][type_index][0], list):
                                self.var_type_history_list[event_index][var_index][type_index][0].append(1)
                                for i in range(1, len(self.var_type_history_list[event_index][var_index][type_index])):
                                    self.var_type_history_list[event_index][var_index][type_index][i].append(0)
                            else:
                                self.var_type_history_list[event_index][var_index][type_index].append(1)
                        else:
                            if len(self.var_type_history_list[event_index][var_index][tmp_type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][tmp_type_index][0], list):
                                for i in range(len(self.var_type_history_list[event_index][var_index][tmp_type_index])):
                                    self.var_type_history_list[event_index][var_index][tmp_type_index][i].append(0)
                            else:
                                self.var_type_history_list[event_index][var_index][tmp_type_index].append(0)

                    if type_index == -1:
                        if self.var_type[event_index][var_index][0] == 'uni':
                            self.var_type_history_list[event_index][var_index][6][0][-1] = (
                                self.var_type[event_index][var_index][1] + self.var_type[event_index][var_index][2]) / 2
                            self.var_type_history_list[event_index][var_index][6][1][-1] = (
                                self.var_type[event_index][var_index][2] - self.var_type[event_index][var_index][1]) / np.sqrt(12)
                        else:
                            self.var_type_history_list[event_index][var_index][6][0][-1] = self.var_type[event_index][var_index][1]
                            self.var_type_history_list[event_index][var_index][6][1][-1] = self.var_type[event_index][var_index][2]

            # Only test variables with paths in the path_list
            else:
                for var_index in self.variable_path_num[event_index]:
                    if not self.event_type_detector.check_variables[event_index][var_index]:  # Skips the variable if checkVariable is False
                        continue

                    # update varTypes
                    self.update_var_type(event_index, var_index, log_atom)

                    # This section updates the historyList of the variableTypes
                    try:
                        # Index of the variableType in the list  # [others, static, [discrete, number of appended steps], asc, desc,
                        # unique, normal, uniform, beta, special]
                        type_index = self.var_type_history_list_order.index(self.var_type[event_index][var_index][0])
                    except:
                        type_index = -1

                    for tmp_type_index in range(len(self.var_type_history_list[event_index][var_index])):
                        if tmp_type_index == type_index:
                            if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][type_index][0], list):
                                self.var_type_history_list[event_index][var_index][type_index][0].append(1)
                                for i in range(1, len(self.var_type_history_list[event_index][var_index][type_index])):
                                    self.var_type_history_list[event_index][var_index][type_index][i].append(0)
                            else:
                                self.var_type_history_list[event_index][var_index][type_index].append(1)
                        else:
                            if len(self.var_type_history_list[event_index][var_index][tmp_type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][tmp_type_index][0], list):
                                for i in range(len(self.var_type_history_list[event_index][var_index][tmp_type_index])):
                                    self.var_type_history_list[event_index][var_index][tmp_type_index][i].append(0)
                            else:
                                self.var_type_history_list[event_index][var_index][tmp_type_index].append(0)

                    if type_index == -1:
                        if self.var_type[event_index][var_index][0] == 'uni':
                            self.var_type_history_list[event_index][var_index][6][0][-1] = (
                                self.var_type[event_index][var_index][1] + self.var_type[event_index][var_index][2]) / 2
                            self.var_type_history_list[event_index][var_index][6][1][-1] = (
                                self.var_type[event_index][var_index][2] - self.var_type[event_index][var_index][1]) / np.sqrt(12)
                        else:
                            self.var_type_history_list[event_index][var_index][6][0][-1] = self.var_type[event_index][var_index][1]
                            self.var_type_history_list[event_index][var_index][6][1][-1] = self.var_type[event_index][var_index][2]

            # Reduce the number of variables, which are tracked
            if (not (isinstance(self.options['numUpdatesTillVarRed'], bool)) and (
                    self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options['numUpdate'] ==
                    self.options['numUpdatesTillVarRed'] - 1):

                for var_index in range(len(self.var_type_history_list[event_index])):
                    # Skips the variable because it is already not being checked
                    if not self.event_type_detector.check_variables[event_index][var_index]:
                        continue

                    tmp_max = 1
                    exceeded_thresh = False
                    for type_index in range(1, len(self.var_type_history_list[event_index][var_index])):
                        # Continuous Distribution
                        if type_index == 6:
                            num_app = len([1 for x in self.var_type_history_list[event_index][var_index][type_index][1] if x != 0])
                            if num_app / self.options['numUpdatesTillVarRed'] >= self.options['varRedThres']:
                                exceeded_thresh = True
                                break
                            tmp_max = max(tmp_max, num_app)
                        # Distributions which are not continuous
                        else:
                            if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][type_index][0], list):
                                num_app = sum(self.var_type_history_list[event_index][var_index][type_index][0])
                                if num_app / self.options['numUpdatesTillVarRed'] >= self.options['varRedThres']:
                                    exceeded_thresh = True
                                    break
                                tmp_max = max(tmp_max, num_app)
                            else:
                                num_app = sum(self.var_type_history_list[event_index][var_index][type_index])
                                if num_app / self.options['numUpdatesTillVarRed'] >= self.options['varRedThres']:
                                    exceeded_thresh = True
                                    break
                                tmp_max = max(tmp_max, num_app)

                    # Remove the variable if it did not exceed the threshold
                    if not exceeded_thresh:
                        self.event_type_detector.check_variables[event_index][var_index] = False
                        self.event_type_detector.values[event_index][var_index] = []
                        self.var_type[event_index][var_index] = []
                        self.var_type_history_list[event_index][var_index] = []
                        if len(self.var_type_history_list_reference) > event_index and len(
                                self.var_type_history_list_reference[event_index]) > var_index:
                            self.var_type_history_list_reference[event_index][var_index] = []
                        self.print(
                          event_index, 'Stopped tracking the variable with Path:\n%s\nbecause of irregular variable types.' %
                          self.event_type_detector.variable_key_list[event_index][var_index], log_atom,
                          confidence=1 / (1 + np.exp(-4 / tmp_max)) / 0.9820137900379085)  # Scaled sigmoidfunction

            # Saves the initial reference state of the var_type_history_list for evaluation of the log-data
            if ((isinstance(self.options['numUpdatesTillVarRed'], bool) and self.options['numUpdatesTillVarRed'] is False) or (
                    self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options['numUpdate'] >=
                self.options['numUpdatesTillVarRed'] - 1) and (not isinstance(self.options['numVarTypeHistRef'], bool)) and (
                    (len(self.var_type_history_list_reference) < event_index + 1) or
                    self.var_type_history_list_reference[event_index] == []) and (
                    (self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options['numUpdate'] >=
                    self.options['numVarTypeHistRef'] - 1):

                if len(self.var_type_history_list_reference) < event_index + 1:
                    for i in range(event_index + 1 - len(self.var_type_history_list_reference)):
                        self.var_type_history_list_reference.append([])

                for var_index in range(len(self.var_type_history_list[event_index])):
                    self.var_type_history_list_reference[event_index].append([])
                    for type_index in range(len(self.var_type_history_list[event_index][var_index])):
                        if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                self.var_type_history_list[event_index][var_index][type_index][0], list):
                            if type_index == 6:
                                self.var_type_history_list_reference[event_index][var_index].append([sum(
                                    self.var_type_history_list[event_index][var_index][type_index][0][
                                        -self.options['numVarTypeHistRef']:]) /
                                    max(len([1 for x in self.var_type_history_list[event_index][var_index][type_index][0][
                                        -self.options['numVarTypeHistRef']:] if x != 0]), 1), sum(
                                            self.var_type_history_list[event_index][var_index][type_index][1][
                                                -self.options['numVarTypeHistRef']:]) /
                                    max(len([1 for x in self.var_type_history_list[event_index][var_index][type_index][1][
                                        -self.options['numVarTypeHistRef']:] if x != 0]), 1)])
                            else:
                                self.var_type_history_list_reference[event_index][var_index].append(
                                    [sum(x[-self.options['numVarTypeHistRef']:]) for x in
                                        self.var_type_history_list[event_index][var_index][type_index]])
                        else:
                            self.var_type_history_list_reference[event_index][var_index].append(
                                sum(self.var_type_history_list[event_index][var_index][type_index][-self.options['numVarTypeHistRef']:]))

            # Checks the indicator for the varTypes of the Event and generates an output, if it fails
            else:
                if ((isinstance(self.options['numUpdatesTillVarRed'], bool) and self.options['numUpdatesTillVarRed'] is False) or (
                        self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) /
                    self.options['numUpdate'] >= self.options['numUpdatesTillVarRed'] - 1) and (
                        not isinstance(self.options['numCheckVarTypeVT'], bool)) and (
                            not isinstance(self.options['numVarTypeHistRef'], bool)) and len(
                                self.var_type_history_list_reference) >= event_index + 1 and \
                        self.var_type_history_list_reference[event_index] != [] and (
                            ((self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options[
                                'numUpdate'] - self.options['numVarTypeHistRef']) % self.options['numCheckVarTypeVT']) == 0:

                    # Shorten the varTypeHis-list
                    if len(self.var_type_history_list[event_index]) > 0 and len(self.var_type_history_list[event_index][0]) > 0 and len(
                        self.var_type_history_list[event_index][0][0]) > max(
                            self.options['numCheckVarTypeVT'], self.options['numVarTypeHistRef']):
                        for var_index in range(len(self.var_type_history_list[event_index])):
                            for type_index in range(len(self.var_type_history_list[event_index][var_index])):
                                # Differentiation of the entries, which are lists (e.g. discrete)
                                try:
                                    for i in range(len(self.var_type_history_list[event_index][var_index][type_index])):
                                        self.var_type_history_list[event_index][var_index][type_index][i] = \
                                            self.var_type_history_list[event_index][var_index][type_index][i][
                                            -max(self.options['numCheckVarTypeVT'], self.options['numVarTypeHistRef']):]
                                except:
                                    self.var_type_history_list[event_index][var_index][type_index] = \
                                        self.var_type_history_list[event_index][var_index][type_index][
                                        -max(self.options['numCheckVarTypeVT'], self.options['numVarTypeHistRef']):]

                    indicator_list = self.get_indicator(event_index)

                    indicator = max(0, max(indicator_list))
                    if indicator >= self.options['indicatorThres']:

                        # Update the list of the failed indicators, which is used for the weights of the indicator
                        # print('initIndicatorList: %s'%indicator_list)
                        if len(self.failed_indicators) < event_index + 1:  # Extend the lists if necessary
                            tmp_len = len(self.failed_indicators)
                            for i in range(event_index + 1 - tmp_len):
                                self.failed_indicators.append([[] for _ in range(len(self.var_type[tmp_len + i]))])
                        # print(self.failed_indicators[event_index])

                        indices_failed_tests = []  # indices of the variables, which would have failed the indicator
                        for var_index in range(len(self.var_type[event_index])):
                            if indicator_list[var_index] >= self.options['indicatorThres']:
                                indices_failed_tests.append(var_index)
                                self.failed_indicators[event_index][var_index].append(self.event_type_detector.num_eventlines[event_index])

                        # Multiply the single values of the indicator with their corresponding weights
                        # Number of the log line which corresponds to the first indicator, which is taken into account
                        first_line_num = self.event_type_detector.num_eventlines[event_index] - self.options['numUpdate'] * self.options[
                            'numCheckVarTypeVT'] * self.options['maxNumTrIndFIndWeights']
                        # Number of the log line which corresponds to the last indicator, which is taken into account
                        last_line_num = self.event_type_detector.num_eventlines[event_index] - self.options['numUpdate'] * self.options[
                            'numCheckVarTypeVT'] * self.options['minNumTrIndFIndWeights']

                        for var_index in indices_failed_tests:
                            lower_ind = False  # Index of the lower bound of the considered values of the failed_indicator list
                            upper_ind = False  # Index of the upper bound of the considered values of the failed_indicator list

                            for i in range(len(self.failed_indicators[event_index][var_index])):
                                if self.failed_indicators[event_index][var_index][i] >= first_line_num:
                                    lower_ind = i
                                    break

                            if isinstance(lower_ind, bool):
                                lower_ind = len(self.failed_indicators[event_index][var_index])
                                upper_ind = len(self.failed_indicators[event_index][var_index])
                            else:
                                for i in range(lower_ind, len(self.failed_indicators[event_index][var_index])):
                                    if self.failed_indicators[event_index][var_index][i] > last_line_num:
                                        upper_ind = i
                                        break
                                if isinstance(upper_ind, bool):
                                    upper_ind = len(self.failed_indicators[event_index][var_index])

                            # Calculating the weight for the indicator
                            indicator_weight = 1 / (1 + upper_ind - lower_ind)
                            indicator_list[var_index] = indicator_list[var_index] * indicator_weight

                            # Reducing the list of the failed indicators
                            self.failed_indicators[event_index][var_index] = self.failed_indicators[event_index][var_index][lower_ind:]

                        # calculate and print the confidence of the failed indicator
                        indicator = sum(indicator_list[var_index] for var_index in indices_failed_tests)
                        # print('endIndicatorList: %s'%indicator_list)
                        if self.print_statistics or self.show_indi_plot:
                            self.failed_indicators_total.append(self.event_type_detector.total_records)
                            self.failed_indicators_values.append(np.arctan(2 * indicator) / 1.5707963267948966)
                            self.failed_indicators_paths.append(self.event_type_detector.longest_path[event_index])

                        tmp_string = ''
                        if self.var_type_history_list:
                            tmp_string += 'Indicator of a change in system behaviour: %s. Paths to the corresponding variables: %s' % (
                                np.arctan(2 * indicator) / 1.5707963267948966, [
                                    self.event_type_detector.variable_key_list[event_index][var_index]
                                    for var_index in indices_failed_tests]) + '\n'

                        self.print(event_index, tmp_string, log_atom, np.arctan(2 * indicator) / 1.5707963267948966, indicator=True)

                # Update the var_type_history_list_reference
                if self.options['update_var_type'] and (not isinstance(self.options['numVarTypeHistRef'], bool)) and (
                    not isinstance(self.options['numUpdateVarTypeHistRef'], bool)) and len(
                        self.var_type_history_list_reference) >= event_index + 1 and \
                        self.var_type_history_list_reference[event_index] != [] and (((
                            self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options[
                                'numUpdate'] - self.options['numVarTypeHistRef']) % self.options['numUpdateVarTypeHistRef'] == 0):

                    for var_index in range(len(self.var_type_history_list[event_index])):
                        self.var_type_history_list_reference[event_index][var_index] = []
                        for type_index in range(len(self.var_type_history_list[event_index][var_index])):
                            if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                    self.var_type_history_list[event_index][var_index][type_index][0], list):
                                if type_index == 6:
                                    self.var_type_history_list_reference[event_index][var_index].append([sum(
                                        self.var_type_history_list[event_index][var_index][type_index][0][
                                            -self.options['numVarTypeHistRef']:]) /
                                        max(len([1 for x in self.var_type_history_list[event_index][var_index][type_index][0][
                                            -self.options['numVarTypeHistRef']:] if x != 0]), 1),
                                        sum(self.var_type_history_list[event_index][var_index][type_index][1][
                                            -self.options['numVarTypeHistRef']:]) /
                                        max(len([1 for x in self.var_type_history_list[event_index][var_index][type_index][1][
                                            -self.options['numVarTypeHistRef']:] if x != 0]), 1)])
                                else:
                                    self.var_type_history_list_reference[event_index][var_index].append(
                                        [sum(x[-self.options['numVarTypeHistRef']:]) for x in
                                            self.var_type_history_list[event_index][var_index][type_index]])
                            else:
                                self.var_type_history_list_reference[event_index][var_index].append(sum(
                                    self.var_type_history_list[event_index][var_index][type_index][-self.options['numVarTypeHistRef']:]))

    def detect_var_type(self, event_index, var_index):
        """Gives back the assumed variableType of the variable with the in self.event_type_detector stored values"""
        # Values which are being tested
        values = self.event_type_detector.values[event_index][var_index][-self.options['numMinAppearance']:]
        # Unique values
        values_set = set(values)
        tmp1 = self.options['numMinAppearance']
        # Number of unique values
        tmp2 = len(values_set)

        if tmp2 == 1:
            return ['stat', list(values_set), False]

        # List of floats or False
        tmp = convert_to_floats(values)
        tmp_int = False
        if tmp:
            tmp_int = consists_of_ints(tmp)

        # Values are integer numbers
        if tmp:
            v_tmp = values[0]
            asc = True
            desc = True
            # Test for ascending
            for v in values[1:]:
                if v_tmp > v:
                    asc = False
                    break
                v_tmp = v

            v_tmp = values[0]
            # Test for descending
            for v in values[1:]:
                if v_tmp < v:
                    desc = False
                    break
                v_tmp = v
            if asc:
                if tmp_int:
                    return ['asc', 'int']
                return ['asc', 'float']
            if desc:
                if tmp_int:
                    return ['desc', 'int']
                return ['desc', 'float']

        # Checking if no integers should be tested and if the values are integers
        if not self.options['testInt'] and tmp_int:
            tmp = False

        if tmp and (tmp2 > self.options['divThres'] * tmp1):
            # test for a continuous distribution. If none fits, the function will return ['d']
            tmp3 = self.detect_continuous_shape(tmp)
        else:
            # discrete
            tmp3 = ['d']

        # Test for discrete, unique and others
        if tmp3 == ['d']:
            if tmp1 == tmp2 and (not tmp or tmp_int):
                return ['unq', values]  # unique
            if tmp2 >= tmp1 * (1 - self.options['simThres']):
                # values do not follow a specific pattern, the second entry is the number of update runs without a new type.
                return ['others', 0]
            # Initialise the discrete type
            values_set = list(values_set)
            values_app = [0 for _ in range(tmp2)]
            for value in values:
                values_app[values_set.index(value)] += 1

            values_app = [x / len(values) for x in values_app]
            # discrete
            return ['d', values_set, values_app, len(values)]
        return tmp3

    def detect_continuous_shape(self, values):
        """Detects if the sample follows one of the checked continuous distribution and returns the found type in a fitting format, or ['d']
        if none fit"""
        # List of the p-values of the distributions
        significance = []
        # List of the tested distributions
        distribution = []

        # Converts the floats/integer to an array for faster manipulations and tests
        values = np.array(values)

        # Test for uniform distribution
        Min = min(values)
        Max = max(values)
        if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[self.options['KS_Alpha']]:
            significance.append(self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['uni'] / 
                                kstest(values, 'uniform', args=(Min, Max - Min))[0])
            distribution.append(['uni', Min, Max])
        else:
            significance.append(kstest(values, 'uniform', args=(Min, Max - Min))[1])
            distribution.append(['uni', Min, Max])

        # Test for normal distribution
        # Getting the expected value and sigma
        [EV, sigma] = norm.fit(values)
        # the lower and upper indices for the cutting off of the tails
        lower_ind = 0
        upper_ind = len(self.distribution_data['nor']) - 1
        # Standardised minimum. Used for getting the indices for cutting of tails
        tmp_min = (Min - EV) / sigma
        # Standardised maximum
        tmp_max = (Max - EV) / sigma

        # KS-test of the standardised values and the distribution
        if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[self.options['KS_Alpha']]:
            significance.append(self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['nor'] / 
                                kstest((values - EV) / sigma,'norm')[0])
            distribution.append(['nor', EV, sigma, Min, Max])
        else:
            significance.append(kstest((values - EV) / sigma,'norm')[1])
            distribution.append(['nor', EV, sigma, Min, Max])

        # Test for beta distribution
        EV_tmp = (Min + Max) / 2
        sigma_tmp = (Max - Min) / 2.869067247151828

        if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[self.options['KS_Alpha']]:
            significance.append(self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['beta1'] / 
                                kstest((values-Min)/(Max-Min),'beta', args=(0.5, 0.5))[0])
            distribution.append(['beta', EV_tmp, sigma_tmp, Min, Max, 1])
        else:
            significance.append(kstest((values-Min)/(Max-Min),'beta', args=(0.5, 0.5))[1])
            distribution.append(['beta', EV_tmp, sigma_tmp, Min, Max, 1])

        # KS-test of the standardised values and the distribution
        if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[
                self.options['KS_Alpha']]:
            # Beta 2
            significance.append(
                            self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['beta2'] / 
                            kstest((values-EV)/sigma*pow(5*2/(5+2+1),1/2)/(5+2)+5/(5+2),'beta', args=(5, 2))[0])
            distribution.append(['beta', EV, sigma, Min, Max, 2])

            # Beta 3
            significance.append(
                            self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['beta2'] / 
                            kstest((values-EV)/sigma*pow(5*2/(5+2+1),1/2)/(5+2)+2/(5+2),'beta', args=(2, 5))[0])
            distribution.append(['beta', EV, sigma, Min, Max, 3])

            # Beta 4
            significance.append(
                            self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['beta4'] / 
                            kstest((values-EV)/sigma*pow(1*5/(1+5+1),1/2)/(1+5)+1/(1+5),'beta', args=(1, 5))[0])
            distribution.append(['beta', EV, sigma, Min, Max, 4])

            # Beta 5
            significance.append(
                            self.options['KS_Alpha'] * self.crit_dist_ini[self.options['KS_Alpha']][self.options['numMinAppearance']]['beta4'] / 
                            kstest((values-EV)/sigma*pow(1*5/(1+5+1),1/2)/(1+5)+5/(1+5),'beta', args=(5, 1))[0])
            distribution.append(['beta', EV, sigma, Min, Max, 5])
        else:
            # Beta 2
            significance.append(kstest((values-EV)/sigma*pow(5*2/(5+2+1),1/2)/(5+2)+5/(5+2),'beta', args=(5, 2))[1])
            distribution.append(['beta', EV, sigma, Min, Max, 2])

            # Beta 3
            significance.append(kstest((values-EV)/sigma*pow(5*2/(5+2+1),1/2)/(5+2)+2/(5+2),'beta', args=(2, 5))[1])
            distribution.append(['beta', EV, sigma, Min, Max, 3])

            # Beta 4
            significance.append(kstest((values-EV)/sigma*pow(1*5/(1+5+1),1/2)/(1+5)+1/(1+5),'beta', args=(1, 5))[1])
            distribution.append(['beta', EV, sigma, Min, Max, 4])

            # Beta 5
            significance.append(kstest((values-EV)/sigma*pow(1*5/(1+5+1),1/2)/(1+5)+5/(1+5),'beta', args=(5, 1))[1])
            distribution.append(['beta', EV, sigma, Min, Max, 5])

        # Maximal distance for the self generated or mixed distributions
        max_dist = pow(-np.log(self.options['KS_Alpha']) * 3 / self.options['numMinAppearance'] / 4, 1 / 2)
        dist_penalty = 1.4  # Penalty for the adapted EV and SD

        # Test for the mixed beta distribution
        # EV/Sigma of Beta 4: EV=1/(1+5)   Sigma=pow(1*5/(1+5+1),1/5)/(1+5)
        # sigma in [sigmaBetam1,sigmaBetam2]
        if 1 / 6 < (EV - Min) / (Max - Min) < 5 / 6:
            # Interpolate the expected distribution functions threw the sigma in the interval
            proportion = ((EV - Min) / (Max - Min) - 5 / 6) / (-4 / 6)
            tmp_index = [int(round(i / proportion)) for i in range(int(round(1000 * proportion)))]

            if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[self.options['KS_Alpha']]:
                significance.append(ks_2samp(
                    [self.distribution_data['betam1'][i] for i in tmp_index] + [
                        self.distribution_data['betam2'][i] for i in range(1000) if i not in tmp_index],
                    (values - Min) / (Max - Min))[0] / max_dist * dist_penalty)
                distribution.append(['betam', Min, Max - Min, Min, Max, proportion])
            else:
                significance.append(ks_2samp(
                    [self.distribution_data['betam1'][i] for i in tmp_index] + [
                        self.distribution_data['betam2'][i] for i in range(1000) if i not in tmp_index],
                    (values - Min) / (Max - Min))[1])
                distribution.append(['betam', Min, Max - Min, Min, Max, proportion])

        # Test for alternative distribution
        

        # KS-test of the standardised values and the distribution
        if self.options['KS_Alpha'] in self.crit_dist_ini and self.options['numMinAppearance'] in self.crit_dist_ini[self.options['KS_Alpha']]:
            significance.append(
                ks_2samp(self.distribution_data['spec'], (values - EV) / sigma)[0] / max_dist * dist_penalty)
            distribution.append(['spec', EV, sigma, Min, Max, 0])

            significance.append(
              ks_2samp(self.distribution_data['spec'], -(values - EV) / sigma)[0] / max_dist * dist_penalty)
            distribution.append(['spec', EV, sigma, Min, Max, 1])
        else:
            significance.append(ks_2samp(self.distribution_data['spec'], (values - EV) / sigma)[1])
            distribution.append(['spec', EV, sigma, Min, Max, 0])

            significance.append(ks_2samp(self.distribution_data['spec'], -(values - EV) / sigma)[1])
            distribution.append(['spec', EV, sigma, Min, Max, 1])

        # Checks if one of the above tested continuous distribution fits
        if max(significance) >= self.options['KS_Alpha']:
            sort_indices = np.argsort(significance)
            sort_list = []
            for i in range(len(sort_indices) - 2, -1, -1):
                if significance[sort_indices[i]] >= self.options['KS_Alpha']:
                    sort_list.append(distribution[sort_indices[i]])
            return distribution[sort_indices[-1]] + [sort_list]

        if self.use_empiric_distr:
            return ['emp', EV, sigma]
        # discrete if no distribution fits
        return ['d']

    def update_var_type(self, event_index, var_index, log_atom):
        """Tests if the new numUpdate values fit the detected var_type and updates the var_type if the test fails"""

        # Getting the new values and saving the old distribution for printing-purposes if the test fails
        new_values = self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:]
        VT_old = self.var_type[event_index][var_index]

        # Test and update for continuous distribution
        if self.var_type[event_index][var_index][0] in self.distr_list:
            if not consists_of_floats(new_values):
                # A value is not a float or integer, so the new assigned type is others
                # values do not follow a specific pattern
                self.var_type[event_index][var_index] = ['others', 0]
                self.distr_val[event_index][var_index] = []
                self.bt_results[event_index][var_index] = []
                self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom, 1.0)
                return

            # Used to test the current distribution with the BT and to discard the alternative distributions if they fail the sKS-test once
            first_distr = True
            s_ks_result = self.s_ks_test(event_index, var_index, first_distr)
            # Calculate the confidence as the stretched sigmaouid function of the maximal distance of the step fct
            confidence = 1 / (1 + np.exp(-2 * s_ks_result[1])) * 1.1353352832366128
            while not s_ks_result[0]:  # If the test fails a new shape is searched for in the alternative distributions
                self.bt_results[event_index][var_index] = self.bt_results[event_index][var_index][1:] + [0]  # Update the results of the BT
                first_distr = False

                # Checks if the BT is applicable and if it holds
                if (self.options['sKS_BT_TestAltDistr'] or first_distr) and (
                        sum(self.bt_results[event_index][var_index]) >= self.s_ksbt_min_success):
                    return

                if not self.options['update_var_type']:  # Do not update variableType
                    self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                    self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                    self.var_type_history_list[event_index][var_index][0][-1] = 1
                    return

                if len(self.possible_var_type[event_index][var_index]) != 0:  # There is at least one alternative distribution
                    # Initialises the distributionvalues and bucketnumbers
                    self.var_type[event_index][var_index] = self.possible_var_type[event_index][var_index][0]
                    self.possible_var_type[event_index][var_index] = self.possible_var_type[event_index][var_index][1:]
                    self.s_ks_get_quantiles(event_index, var_index, log_atom)
                    self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                    s_ks_result = self.s_ks_test(event_index, var_index, first_distr)

                # There is no alternative distribution. The var_type is set to others
                else:
                    # values do not follow a specific pattern
                    self.var_type[event_index][var_index] = ['others', 0]
                    self.distr_val[event_index][var_index] = []
                    self.bt_results[event_index][var_index] = []
                    self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom, confidence)
                    return

            # Checks if the s_ks_test was successful and remarks the success
            if first_distr:
                self.bt_results[event_index][var_index] = self.bt_results[event_index][var_index][1:] + [1]

            # Print a message if the vartype has changed
            if VT_old != self.var_type[event_index][var_index]:
                self.print_changed_var_type(event_index, VT_old, self.var_type[event_index][var_index], var_index, log_atom, confidence)
            return

        # Test and update for ascending values
        if self.var_type[event_index][var_index][0] == 'asc':
            # Searches for a not ascending sequence in the values
            for j in range(-self.options['numUpdate'], 0):
                if self.event_type_detector.values[event_index][var_index][j - 1] >\
                        self.event_type_detector.values[event_index][var_index][j]:
                    # Do not update variableType
                    if not self.options['update_var_type']:
                        self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                        self.var_type_history_list[event_index][var_index][0][-1] = 1
                        return

                    self.var_type[event_index][var_index] = ['others', 0]  # values do not follow a specific pattern
                    self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                    return

        if self.var_type[event_index][var_index][0] == 'desc':  # Test and update for descending values
            for j in range(-self.options['numUpdate'], 0):  # Searches for a not ascending sequence in the values
                if self.event_type_detector.values[event_index][var_index][j - 1] <\
                        self.event_type_detector.values[event_index][var_index][j]:
                    if not self.options['update_var_type']:  # Do not update variableType
                        self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                        self.var_type_history_list[event_index][var_index][0][-1] = 1
                        return
                    self.var_type[event_index][var_index] = ['others', 0]  # values do not follow a specific pattern
                    self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                    return

        if self.var_type[event_index][var_index][0] == 'd':  # Test and update for values of the discrete type
            # Checks if new values have appeared
            if len(set(new_values + self.var_type[event_index][var_index][1])) > len(self.var_type[event_index][var_index][1]):
                # New values have appeared
                # Test if vartype others
                if len(set(new_values + self.var_type[event_index][var_index][1])) >= (
                        self.options['numUpdate'] + self.var_type[event_index][var_index][3]) * (1 - self.options['simThres']):
                    # Do not update variableType
                    if not self.options['update_var_type']:
                        self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                        self.var_type_history_list[event_index][var_index][0][-1] = 1
                        return
                    self.var_type[event_index][var_index] = ['others', 0]  # values do not follow a specific pattern
                    self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                    return

                # Extends the possible-values-list

                # Do not update variableType
                if not self.options['update_var_type']:
                    self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                    self.var_type_history_list[event_index][var_index][2][1][-1] = 1
                    return

                # Create the new value-set and expands the occurrence-list for the new values
                new_values_set = list(set(self.event_type_detector.values[event_index][var_index][-self.options['numMinAppearance']:]))
                for val in new_values_set:
                    if val not in self.var_type[event_index][var_index][1]:
                        self.var_type[event_index][var_index][1].append(val)
                        self.var_type[event_index][var_index][2].append(0)

                # update the occurrences
                # List for the appearances of the new values
                values_app = list([0] * len(self.var_type[event_index][var_index][1]))
                for i in range(-self.options['numMinAppearance'], 0):
                    values_app[self.var_type[event_index][var_index][1].index(
                        self.event_type_detector.values[event_index][var_index][i])] += 1

                tmp_number = self.var_type[event_index][var_index][3] / (
                        self.options['numUpdate'] + self.var_type[event_index][var_index][3])
                # Updates the appearance-list in the var_type of the discrete variable
                for j in range(len(self.var_type[event_index][var_index][2])):
                    self.var_type[event_index][var_index][2][j] = \
                        self.var_type[event_index][var_index][2][j] * tmp_number + values_app[j] / (
                            self.options['numUpdate'] + self.var_type[event_index][var_index][3])

                self.var_type[event_index][var_index][3] = self.options['numUpdate'] + self.var_type[event_index][var_index][3]

                self.d_init_bt(event_index, var_index)
                self.print_changed_var_type(event_index, VT_old, self.var_type[event_index][var_index], var_index, log_atom)
                self.var_type_history_list[event_index][var_index][2][1][-1] = 1
                return

            # No new values have appeared, so the normal test for discrete variables is used
            self.d_test(event_index, var_index)

            # Check if the values should be considdered others or if the BT failed
            if (len(set(new_values + self.var_type[event_index][var_index][1])) >= (
                    self.options['numUpdate'] + self.var_type[event_index][var_index][3]) * (1 - self.options['simThres'])) or (sum(
                        self.bt_results[event_index][var_index][0]) < self.d_bt_min_success):

                # Do not update variableType
                if not self.options['update_var_type']:
                    self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                    self.bt_results[event_index][var_index][0] = [1] * self.options['d_BT_Num']
                    self.var_type_history_list[event_index][var_index][0][-1] = 1
                    return

                # values do not follow a specific pattern
                self.var_type[event_index][var_index] = ['others', 0]
                self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                return

            # Update the probabilities of the discrete values
            if self.options['update_var_type'] and self.bt_results[event_index][var_index][0][-1]:
                # List for the number of appearance of the values
                values_app = [0 for x in range(len(self.var_type[event_index][var_index][1]))]
                for val in new_values:
                    values_app[self.var_type[event_index][var_index][1].index(val)] += 1

                tmp_number = self.var_type[event_index][var_index][3] / (
                    self.options['numUpdate'] + self.var_type[event_index][var_index][3])
                # Updates the appearance-list in the var_type of the discrete variable
                for j in range(len(self.var_type[event_index][var_index][2])):
                    self.var_type[event_index][var_index][2][j] = \
                        self.var_type[event_index][var_index][2][j] * tmp_number + values_app[j] / (
                            self.options['numUpdate'] + self.var_type[event_index][var_index][3])

                self.var_type[event_index][var_index][3] = self.options['numUpdate'] + self.var_type[event_index][var_index][3]

                # Check if the BT has to be updated
                if ((self.var_type[event_index][var_index][3] - self.options['numMinAppearance']) % self.options['numPauseDiscrete']) == 0:
                    self.d_init_bt(event_index, var_index)
                return

        # Test and update for static variables
        if self.var_type[event_index][var_index][0] == 'stat':
            # Check if still static
            if new_values == self.options['numUpdate'] * [self.event_type_detector.values[event_index][var_index][0]]:
                if self.var_type[event_index][var_index][2] and self.options['numStatToStopTracking'] is True and \
                        self.event_type_detector.num_eventlines[event_index] >= self.options['numStatToStopTracking']:
                    self.event_type_detector.check_variables[event_index][var_index] = False
                    self.event_type_detector.values[event_index][var_index] = []
                    self.var_type[event_index][var_index] = []
                    self.var_type_history_list[event_index][var_index] = []
                    if len(self.var_type_history_list_reference) > event_index and len(self.var_type_history_list_reference[event_index]) >\
                            var_index:
                        self.var_type_history_list_reference[event_index][var_index] = []

                    self.print(event_index, 'Stopped tracking the variable with Path:\n%s\nbecause of its static values.' %
                                            self.event_type_detector.variable_key_list[event_index][var_index], log_atom,
                               confidence=1 - 1 / self.options['numStatToStopTracking'])
                return

            # Do not update variableType
            if not self.options['update_var_type']:
                self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                self.var_type_history_list[event_index][var_index][0][-1] = 1
                return

            # Check if new values appear to be of type others
            if len(set(new_values)) >= self.options['numUpdate'] * (1 - self.options['simThres']) and self.options['numUpdate'] >= 3:
                self.var_type[event_index][var_index] = ['others', 0]  # values do not follow a specific pattern
                self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                return
            # Change the var_type from static to discrete

            # list of the values
            values_set = list(set(self.event_type_detector.values[event_index][var_index][-self.options['numMinAppearance']:]))
            values_app = [0 for _ in range(len(values_set))]  # List to store the appearance of the values

            for j in range(-self.options['numMinAppearance'], 0):
                values_app[values_set.index(self.event_type_detector.values[event_index][var_index][j])] += 1
            values_app = [x / self.options['numMinAppearance'] for x in values_app]

            # values follow a discrete pattern
            self.var_type[event_index][var_index] = ['d', values_set, values_app, self.options['numMinAppearance']]
            self.d_init_bt(event_index, var_index)
            self.print_changed_var_type(event_index, VT_old, self.var_type[event_index][var_index], var_index, log_atom)
            return

        # Test and update for unique values
        if self.var_type[event_index][var_index][0] == 'unq':
            # Checks if the new values are not unique
            if len(set(self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:])) != self.options['numUpdate']:
                if not self.options['update_var_type']:  # Do not update variableType
                    self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                    self.var_type_history_list[event_index][var_index][0][-1] = 1
                    return

                self.var_type[event_index][var_index] = ['others', 0]
                self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                return

            # Check if one of the new values has appeared in the last self.options['numUpdateUnq'] values
            for j in self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:]:
                if j in self.event_type_detector.values[event_index][var_index][
                        -self.options['numUpdateUnq'] - self.options['numUpdate']:-self.options['numUpdate']]:
                    # Do not update variableType
                    if not self.options['update_var_type']:
                        self.print_reject_var_type(event_index, self.var_type[event_index][var_index], var_index, log_atom)
                        self.var_type_history_list[event_index][var_index][0][-1] = 1
                        return

                    self.var_type[event_index][var_index] = ['others', 0]
                    self.print_changed_var_type(event_index, VT_old, ['others'], var_index, log_atom)
                    return
            return

        # Update for var_type others
        if self.var_type[event_index][var_index][0] == 'others':
            # Do not update variableType
            if not self.options['update_var_type']:
                return

            # Check if it has passed enough time, to check if the values have a new var_type
            if (self.var_type[event_index][var_index][1] + 1) % (self.options['numPauseOthers'] + 1) == 0:
                # Added a exponential waiting time to avoid redundant tests
                if not consists_of_ints([np.log2((self.var_type[event_index][var_index][1] + 1) / (self.options['numPauseOthers'] + 1))]):
                    self.var_type[event_index][var_index][1] += 1
                    return

                # Checking for a new var_type
                vt_new = self.detect_var_type(event_index, var_index)
                # Only increase the number of skipped update-cycles
                if vt_new[0] == 'others':
                    self.var_type[event_index][var_index][1] += 1
                    return
                # The variable is getting assigned a new var_type

                # VarType is empiric distribution
                if vt_new[0] == 'emp':
                    self.var_type[event_index][var_index] = vt_new
                    self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                    self.s_ks_get_quantiles(event_index, var_index, log_atom)

                # VarType is a continuous distribution
                elif vt_new[0] in self.distr_list:
                    self.var_type[event_index][var_index] = vt_new[:-1]
                    self.possible_var_type[event_index][var_index] = vt_new[-1]
                    self.bt_results[event_index][var_index] = [1] * self.options['sKS_BT_Num']
                    self.s_ks_get_quantiles(event_index, var_index, log_atom)

                # VarType is discrete
                elif vt_new[0] == 'd':
                    self.var_type[event_index][var_index] = vt_new
                    self.d_init_bt(event_index, var_index)

                else:
                    self.var_type[event_index][var_index] = vt_new
                self.print_changed_var_type(event_index, ['others'], vt_new, var_index, log_atom)
            else:
                self.var_type[event_index][var_index][1] += 1
            return

        # Print that something was wrong
        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, 'New type detected %s!' % self.var_type[event_index][var_index][0], 
                    sorted_log_lines, event_data, log_atom, self)

    def s_ks_get_quantiles(self, event_index, var_index, log_atom):
        """Generates the needed quantiles of the distribution for the sliding KS-test"""
        if self.var_type[event_index][var_index][0] == 'emp':
            # Get a list of almost equidistant indices
            indices = [int(i) for i in [self.options['numMinAppearance'] * j / (2 * self.options['sKS_NumValues']) for j in
                       range(2 * self.options['sKS_NumValues'])]]

            # Get the list of values and sort them
            sorted_values = copy.copy(self.event_type_detector.values[event_index][var_index][-self.options['numMinAppearance']:])
            sorted_values.sort()

            # Generate the list of distribution values
            distr_val = []
            for index in indices:
                distr_val.append(sorted_values[index])

            self.distr_val[event_index][var_index] = distr_val
            return

        # Calculate the quantiles of the uniformal distribution
        if self.var_type[event_index][var_index][0] == 'uni':
            Min = self.var_type[event_index][var_index][1]
            Max = self.var_type[event_index][var_index][2]

            # Generate the equidistant q-quantiles
            self.distr_val[event_index][var_index] = Min + np.array(range(2 * self.options['sKS_NumValues'])) / (
                2 * self.options['sKS_NumValues'] - 1) * (Max - Min)
            return

        # Calculate the quantiles of the normal distributed
        if self.var_type[event_index][var_index][0] == 'nor':
            EV = self.var_type[event_index][var_index][1]
            sigma = self.var_type[event_index][var_index][2]
            Min = self.var_type[event_index][var_index][3]
            Max = self.var_type[event_index][var_index][4]
            indices = self.s_ks_get_distr_ind(event_index, self.distribution_data['nor'], EV, sigma, Min, Max, log_atom)

            # Generate the quantiles for the var_type with the standardised quantiles
            self.distr_val[event_index][var_index] = self.distribution_data['nor'][indices] * sigma + EV
            return

        if self.var_type[event_index][var_index][0] == 'spec':  # Calculate the quantiles of the special distribution
            EV = self.var_type[event_index][var_index][1]
            sigma = self.var_type[event_index][var_index][2]
            Min = self.var_type[event_index][var_index][3]
            Max = self.var_type[event_index][var_index][4]

            indices = self.s_ks_get_distr_ind(event_index, self.distribution_data['spec'], EV, sigma, Min, Max, log_atom)

            # Generate the quantiles for the var_type with the standardised quantiles
            self.distr_val[event_index][var_index] = self.distribution_data['spec'][indices] * sigma + EV
            return

        # Calculate the quantiles of the beta distribution
        if self.var_type[event_index][var_index][0] == 'beta':
            EV = self.var_type[event_index][var_index][1]
            sigma = self.var_type[event_index][var_index][2]
            Min = self.var_type[event_index][var_index][3]
            Max = self.var_type[event_index][var_index][4]

            indices = self.s_ks_get_distr_ind(
                event_index, self.distribution_data['beta' + str(self.var_type[event_index][var_index][5])], EV, sigma, Min, Max, log_atom)

            # Generate the quantiles for the var_type with the standardised quantiles
            self.distr_val[event_index][var_index] = self.distribution_data['beta' + str(self.var_type[event_index][var_index][5])][
                                                      indices] * sigma + EV
            return

        # Calculate the quantiles of the mixed beta distribution
        if self.var_type[event_index][var_index][0] == 'betam':
            Min = self.var_type[event_index][var_index][1]
            scale = self.var_type[event_index][var_index][2]
            Max = self.var_type[event_index][var_index][4]
            proportion = self.var_type[event_index][var_index][5]

            # Alternative to s_ks_get_distr_ind, because no tailcuts and a different approach are needed
            indices1 = [int(round(i / proportion)) for i in range(int(round(1000 * proportion)))]
            indices2 = [i for i in range(1000) if i not in indices1]

            # Generate the quantiles for the var_type with the standardised quantiles
            self.distr_val[event_index][var_index] = self.distribution_data['betam1'][indices1] * scale + Min
            self.distr_val[event_index][var_index] = np.append(
                self.distr_val[event_index][var_index], self.distribution_data['betam2'][indices2] * scale + Min)
            self.distr_val[event_index][var_index].sort()
            return

    def s_ks_get_distr_ind(self, event_index, tmp_sample, EV, sigma, Min, Max, log_atom):
        """Generates the needed sKS_NumValues indices of tmp_sample for the sliding KS-test"""
        # Standardised minimum. Used for getting the indices for cutting of tails
        tmp_min = (Min - EV) / sigma
        # Standardised maximum
        tmp_max = (Max - EV) / sigma

        indices = []  # List of the returned indices
        indices = 0 + np.array(range(2 * self.options['sKS_NumValues'])) / (2 * self.options['sKS_NumValues'] - 1) * (
                    len(tmp_sample) - 1)
        indices = indices.astype(int)
        return indices

    def s_ks_test(self, event_index, var_index, first_distr):
        """Makes a KS-test solely with the bucketlist. Returns a list with the first entry True/False and as the second entry the maximal
        distance of the step functions"""
        num_distr_val = 2 * self.options['sKS_NumValues']

        # Calculate the critical distance for the KS-test
        # The parameters are in the list of the critical distances
        distribution = self.var_type[event_index][var_index][0]
        if distribution == 'beta':
            distribution += str(self.var_type[event_index][var_index][-1])
        if self.options['sKS_Alpha'] in self.crit_dist_upd and self.options['numMinAppearance'] in self.crit_dist_upd[self.options['sKS_Alpha']] and \
                self.options['sKS_NumValues'] in self.crit_dist_upd[self.options['sKS_Alpha']][self.options['numMinAppearance']] and \
                distribution in self.crit_dist_upd[self.options['sKS_Alpha']][self.options['numMinAppearance']][self.options['sKS_NumValues']]:
            crit_distance = \
                self.crit_dist_upd[self.options['sKS_Alpha']][self.options['numMinAppearance']][self.options['sKS_NumValues']][distribution]
        else:
            crit_distance = ((num_distr_val + self.options['sKS_NumValues']) * (np.log(2 / self.options['sKS_Alpha'])) / (
                2 * num_distr_val * self.options['sKS_NumValues'])) ** (1 / 2)
        
        # scipy KS-test for normal distribution
        if self.var_type[event_index][var_index][0] == 'uni':
            max_dist = kstest(
                self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'uniform',
                args=(self.var_type[event_index][var_index][1], self.var_type[event_index][var_index][2]-self.var_type[event_index][var_index][1]))[0]
            if first_distr:
                if max_dist > crit_distance:
                    return [False, max_dist]
                return [True, max_dist]
            if max_dist > crit_distance:
                return [False, 1.0]
            return [True, 0.0]

        # scipy KS-test for uniformal distribution
        if self.var_type[event_index][var_index][0] == 'nor':
            max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'norm', args=(
                self.var_type[event_index][var_index][1], self.var_type[event_index][var_index][2]))[0]
            if first_distr:
                if max_dist > crit_distance:
                    return [False, max_dist]
                return [True, max_dist]
            if max_dist > crit_distance:
                return [False, 1.0]
            return [True, 0.0]

        # scipy KS-test for beta distribution
        if self.var_type[event_index][var_index][0] == 'beta':
            if self.var_type[event_index][var_index][5] == 1:
                max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'beta', args=(
                    0.5, 0.5, self.var_type[event_index][var_index][3],
                            self.var_type[event_index][var_index][4] - self.var_type[event_index][var_index][3]))[0]
                if first_distr:
                    if max_dist > crit_distance:
                        return [False, max_dist]
                    return [True, max_dist]
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]
            if self.var_type[event_index][var_index][5] == 2:
                # Mu and sigma of the desired distribution
                [mu, sigma] = [5 / (5 + 2), pow(5 * 2 / (5 + 2 + 1), 1 / 2) / (5 + 2)]
                max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'beta', args=(
                    5, 2, self.var_type[event_index][var_index][1] - mu * self.var_type[event_index][var_index][2] / sigma,
                    self.var_type[event_index][var_index][2] / sigma))[0]
                if first_distr:
                    if max_dist > crit_distance:
                        return [False, max_dist]
                    return [True, max_dist]
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]
            if self.var_type[event_index][var_index][5] == 3:
                # Mu and sigma of the desired distribution
                [mu, sigma] = [2 / (5 + 2), pow(5 * 2 / (5 + 2 + 1), 1 / 2) / (5 + 2)]
                max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'beta', args=(
                    2, 5, self.var_type[event_index][var_index][1] - mu * self.var_type[event_index][var_index][2] / sigma,
                    self.var_type[event_index][var_index][2] / sigma))[0]
                if first_distr:
                    if max_dist > crit_distance:
                        return [False, max_dist]
                    return [True, max_dist]
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]
            if self.var_type[event_index][var_index][5] == 4:
                # Mu and sigma of the desired distribution
                [mu, sigma] = [1 / (5 + 1), pow(5 * 1 / (5 + 1 + 1), 1 / 2) / (5 + 1)]
                max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'beta', args=(
                    1, 5, self.var_type[event_index][var_index][1] - mu * self.var_type[event_index][var_index][2] / sigma,
                    self.var_type[event_index][var_index][2] / sigma))[0]
                if first_distr:
                    if max_dist > crit_distance:
                        return [False, max_dist]
                    return [True, max_dist]
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]
            if self.var_type[event_index][var_index][5] == 5:
                # Mu and sigma of the desired distribution
                [mu, sigma] = [5 / (5 + 1), pow(5 * 1 / (5 + 1 + 1), 1 / 2) / (5 + 1)]
                max_dist = kstest(self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:], 'beta', args=(
                    5, 1, self.var_type[event_index][var_index][1] - mu * self.var_type[event_index][var_index][2] / sigma,
                    self.var_type[event_index][var_index][2] / sigma))[0]
                if first_distr:
                    if max_dist > crit_distance:
                        return [False, max_dist]
                    return [True, max_dist]
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]

        # sKS-test
        else:
            max_dist = ks_2samp(self.distr_val[event_index][var_index], self.event_type_detector.values[event_index][var_index][-self.options['sKS_NumValues']:])[0]
            if first_distr:
                if max_dist > crit_distance:
                    return [False, max_dist]
                return [True, max_dist]
            else:
                if max_dist > crit_distance:
                    return [False, 1.0]
                return [True, 0.0]

        return [True, 0.0]

    def d_test(self, event_index, var_index):
        """Makes a test if the new variables follow the discrete distribution and appends the result to the BT"""
        if self.options['usedMultinomialTest'] == 'MT':
            # Count the appearance of the values
            values_app = [0] * len(self.var_type[event_index][var_index][1])
            for v in self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:]:
                values_app[self.var_type[event_index][var_index][1].index(v)] += 1

            # probability of the values or the test sample
            prob_of_sample = self.bt_results[event_index][var_index][1].pmf(values_app)
            # Sum of the probabilities, which are smaller than the probability of the values
            smaller_prob_sum = 0
            if len(self.var_type[event_index][var_index][1]) <= 5:
                for i in range(self.options['numUpdate'] + 1):
                    if len(self.var_type[event_index][var_index][1]) == 2:
                        tmp_prob = self.bt_results[event_index][var_index][1].pmf([i, self.options['numUpdate'] - i])
                        if tmp_prob <= prob_of_sample:
                            smaller_prob_sum += tmp_prob
                    else:
                        for j in range(self.options['numUpdate'] - i + 1):
                            if len(self.var_type[event_index][var_index][1]) == 3:
                                tmp_prob = self.bt_results[event_index][var_index][1].pmf([i, j, self.options['numUpdate'] - (i + j)])
                                if tmp_prob <= prob_of_sample:
                                    smaller_prob_sum += tmp_prob
                            else:
                                for k in range(self.options['numUpdate'] - (i + j) + 1):
                                    if len(self.var_type[event_index][var_index][1]) == 4:
                                        tmp_prob = self.bt_results[event_index][var_index][1].pmf(
                                            [i, j, k, self.options['numUpdate'] - (i + j + k)])
                                        if tmp_prob <= prob_of_sample:
                                            smaller_prob_sum += tmp_prob
                                    else:
                                        for l in range(self.options['numUpdate'] - (i + j + k) + 1):
                                            tmp_prob = self.bt_results[event_index][var_index][1].pmf(
                                                [i, j, k, l, self.options['numUpdate'] - (i + j + k + l)])
                                            if tmp_prob <= prob_of_sample:
                                                smaller_prob_sum += tmp_prob

            # Make a multinomial test
            if smaller_prob_sum < self.options['d_Alpha']:
                self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [0]
                return
            self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [1]
            return

        if self.options['usedMultinomialTest'] == 'Chi':
            # Count the appearance of the values
            values_app = [0] * len(self.var_type[event_index][var_index][1])
            for v in self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:]:
                values_app[self.var_type[event_index][var_index][1].index(v)] += 1

            # Make a chisquare test
            if chisquare(values_app, f_exp=[i * self.options['numUpdate'] for i in self.var_type[event_index][var_index][2]])[1] < \
                    self.options['d_Alpha']:
                self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [0]
                return
            self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [1]
            return

        # Make an approximated multinomial test which consists of binomial tests
        if self.options['usedMultinomialTest'] == 'Approx':
            # Count the appearance of the values
            values_app = [0] * len(self.var_type[event_index][var_index][1])
            for v in self.event_type_detector.values[event_index][var_index][-self.options['numUpdate']:]:
                values_app[self.var_type[event_index][var_index][1].index(v)] += 1

            # Makes for each value a twosided BT. If one fails the d-test fails
            for i, value in enumerate(values_app):
                if value < self.bt_results[event_index][var_index][1][i] or value > self.bt_results[event_index][var_index][2][i]:
                    self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [0]
                    return

            self.bt_results[event_index][var_index][0] = self.bt_results[event_index][var_index][0][1:] + [1]
            return

    def d_init_bt(self, event_index, var_index):
        """Initialises the BT for discrete variables"""
        if self.options['usedMultinomialTest'] == 'MT':
            # Initialise the list for the results and the multinomialtest
            self.bt_results[event_index][var_index] = [
                [1] * self.options['d_BT_Num'], multinomial(self.options['numUpdate'], self.var_type[event_index][var_index][2])]

        else:
            # Generates a list of the lower bounds of the individual BTs of the single values
            lower_bound_list = self.options['numUpdate'] - self.bt_min_successes_multi_p(
                self.options['numUpdate'], 1 - np.array(self.var_type[event_index][var_index][2]), self.options['d_Alpha'] / 2,
                event_index, var_index)

            # Generates a list of the upper bounds of the individual BTs of the single values
            upper_bound_list = self.bt_min_successes_multi_p(
                self.options['numUpdate'], self.var_type[event_index][var_index][2],  self.options['d_Alpha'] / 2, event_index, var_index)

            # Initialise the list for the results
            self.bt_results[event_index][var_index] = [[1] * self.options['d_BT_Num'], lower_bound_list, upper_bound_list]

    def init_var_type_history_list(self, event_index):
        """Initialises the history of the variabletypes of the eventType"""
        if len(self.var_type_history_list) < event_index + 1 or self.var_type_history_list[event_index] == []:
            for i in range(event_index + 1 - len(self.var_type_history_list)):
                self.var_type_history_list.append([])

            # [others, static, [discrete, number of appended steps], asc, desc , unique, normal, uniform, beta, special]
            if not self.var_type_history_list[event_index]:
                self.var_type_history_list[event_index] = [[[], [], [[], []], [], [], [], [[], []]] for _ in range(len(
                    self.var_type[event_index]))]

            # Append the first entries to the historyList
            # Test only the variables with paths in the path_list
            if self.path_list is None:
                index_list = range(self.length[event_index])

            # Test all variables
            else:
                index_list = self.variable_path_num[event_index]

            for var_index in index_list:
                # This section updates the historyList of the variableTypes
                try:
                    # Index of the variableType in the list  # [others, static, [discrete, number of appendece steps], asc, desc, unique,
                    # normal, uniform, beta, special]
                    type_index = self.var_type_history_list_order.index(self.var_type[event_index][var_index][0])
                except:
                    type_index = -1

                for tmp_type_index in range(len(self.var_type_history_list[event_index][var_index])):
                    if tmp_type_index == type_index:
                        if len(self.var_type_history_list[event_index][var_index][type_index]) >= 1 and isinstance(
                                self.var_type_history_list[event_index][var_index][type_index][0], list):
                            self.var_type_history_list[event_index][var_index][type_index][0].append(1)
                            for i in range(1, len(self.var_type_history_list[event_index][var_index][type_index])):
                                self.var_type_history_list[event_index][var_index][type_index][i].append(0)
                        else:
                            self.var_type_history_list[event_index][var_index][type_index].append(1)
                    else:
                        if len(self.var_type_history_list[event_index][var_index][tmp_type_index]) >= 1 and isinstance(
                                self.var_type_history_list[event_index][var_index][tmp_type_index][0], list):
                            for i in range(len(self.var_type_history_list[event_index][var_index][tmp_type_index])):
                                self.var_type_history_list[event_index][var_index][tmp_type_index][i].append(0)
                        else:
                            self.var_type_history_list[event_index][var_index][tmp_type_index].append(0)

                # Continuously distributed
                if type_index == -1:
                    if self.var_type[event_index][var_index][0] == 'uni':
                        self.var_type_history_list[event_index][var_index][6][0][-1] = (
                            self.var_type[event_index][var_index][1] + self.var_type[event_index][var_index][2]) / 2
                        self.var_type_history_list[event_index][var_index][6][1][-1] = (
                            self.var_type[event_index][var_index][2] - self.var_type[event_index][var_index][1]) / np.sqrt(12)
                    else:
                        self.var_type_history_list[event_index][var_index][6][0][-1] = self.var_type[event_index][var_index][1]
                        self.var_type_history_list[event_index][var_index][6][1][-1] = self.var_type[event_index][var_index][2]

    def get_indicator(self, event_index):
        """Calculates and returns a indicator for a change in the system behaviour based on the analysis of VarTypeD"""
        # List which stores the single indicators for the variables
        indicator_list = []

        for var_index in range(len(self.var_type_history_list[event_index])):
            if not self.event_type_detector.check_variables[event_index][var_index]:
                indicator_list.append(0)
                continue

            # List, which stores the differences of probabilities of the types, where the current history is higher than the reference.
            diff_list = []
            # Length of the reference
            len_ref = self.options['numVarTypeHistRef']
            # Length of the current historylist
            len_cur = self.options['numCheckVarTypeVT']

            # Appends the positive differnces of the probabilities to diff_list
            for type_index in range(len(self.var_type_history_list[event_index][var_index])):
                if self.var_type_history_list_reference[event_index][var_index][1] == len_ref and sum(
                        self.var_type_history_list[event_index][var_index][1]) < len_cur:
                    diff_list.append(1)
                    break
                # Differentiation of the entries, which are lists (e.g. discrete, continuously distributed)
                if type_index in [2, 6]:
                    if type_index == 6:
                        if self.var_type_history_list_reference[event_index][var_index][type_index] == 0:
                            diff_list.append(len([
                                1 for x in self.var_type_history_list[event_index][var_index][type_index][1][
                                    -self.options['numCheckVarTypeVT']:] if x != 0]) / len_cur)
                        else:
                            var_type_ev = sum(self.var_type_history_list[event_index][var_index][type_index][0][
                                -self.options['numCheckVarTypeVT']:]) / max(len(
                                    [1 for x in self.var_type_history_list[event_index][var_index][type_index][0][
                                        -self.options['numCheckVarTypeVT']:] if x != 0]), 1)
                            var_type_sd = sum(self.var_type_history_list[event_index][var_index][type_index][1][
                                -self.options['numCheckVarTypeVT']:]) / max(len(
                                    [1 for x in self.var_type_history_list[event_index][var_index][type_index][1][
                                        -self.options['numCheckVarTypeVT']:] if x != 0]), 1)

                            # Formula to include the impact of the mean, standard deviation and changes of the distribution
                            if max(self.var_type_history_list_reference[event_index][var_index][type_index][1], var_type_sd) > 0:
                                diff_list.append((
                                    min(1, abs(
                                        (self.var_type_history_list_reference[event_index][var_index][type_index][0] - var_type_ev) / max(
                                            abs(self.var_type_history_list_reference[event_index][var_index][type_index][0]),
                                            abs(var_type_ev))) / 3 + abs(
                                        (self.var_type_history_list_reference[event_index][var_index][type_index][1] - var_type_sd) / max(
                                            abs(self.var_type_history_list_reference[event_index][var_index][type_index][1]),
                                            abs(var_type_sd))) / 3 + 1 / 3) * len([
                                                x for x in self.var_type_history_list[event_index][var_index][type_index][1][
                                                    -self.options['numCheckVarTypeVT']:] if x != 0])) / len_cur)
                            else:
                                diff_list.append(0)
                    else:
                        tmp_max = 0
                        for j in range(len(self.var_type_history_list[event_index][var_index][type_index])):
                            if j == 0 and self.var_type_history_list_reference[event_index][var_index][type_index][j] == 0:
                                tmp_max = max(tmp_max, (sum(self.var_type_history_list[event_index][var_index][type_index][j][
                                    -self.options['numCheckVarTypeVT']:]) /
                                        len_cur - self.var_type_history_list_reference[event_index][var_index][type_index][j] / len_ref))
                            else:
                                tmp_max = max(tmp_max, (sum(self.var_type_history_list[event_index][var_index][type_index][j][
                                    -self.options['numCheckVarTypeVT']:]) /
                                        len_cur - self.var_type_history_list_reference[event_index][var_index][type_index][j] / len_ref) /
                                            2)
                        diff_list.append(tmp_max)

                else:
                    if self.var_type_history_list_reference[event_index][var_index][type_index] == 0:
                        diff_list.append(sum(
                            self.var_type_history_list[event_index][var_index][type_index][-self.options['numCheckVarTypeVT']:]) / len_cur)
                    else:
                        diff_list.append(max(0, (sum(
                            self.var_type_history_list[event_index][var_index][type_index][-self.options['numCheckVarTypeVT']:]) / len_cur -
                                self.var_type_history_list_reference[event_index][var_index][type_index] / len_ref)) / 2)

            if len(diff_list) == 0:
                indicator_list.append(0)
            else:
                indicator_list.append(sum(diff_list))
        return indicator_list

    def bt_min_successes(self, num_BT, p, alpha):
        """Calculates the minimal number of successes for the BT with significance alpha, where p is the probability of success and num_bt
        is the number of observed tests"""

        tmp_sum = 0.0
        max_observations_factorial = np.math.factorial(num_BT)
        i_factorial = 1
        for i in range(num_BT + 1):
            i_factorial = i_factorial * max(i, 1)
            tmp_sum = tmp_sum + max_observations_factorial / (i_factorial * np.math.factorial(num_BT - i)) * ((1 - p) ** i) * (
                p ** (num_BT - i))
            if tmp_sum > alpha:
                return num_BT - i
        return 0

    def bt_min_successes_multi_p(self, num_bt, p_list, alpha, event_index, var_index):
        """Calculates the minimal number of successes for the BT with significance alpha, where p_list is a list of probabilities of
        successes and num_bt is the number of observed tests"""

        if 'num_bt = %s, alpha = %s' % (num_bt, alpha) in self.bt_min_succ_data:
            # Here the min_successes are not being generated, but instead the right Indices are searched for in the bt_min_succ_data-list
            return np.searchsorted(self.bt_min_succ_data['num_bt = %s, alpha = %s' % (num_bt, alpha)], p_list, side='left', sorter=None)

        # Calculate the min_successes normally for each value one by one
        tmp_list = []
        for i in range(len(self.var_type[event_index][var_index][1])):
            tmp_list.append(self.bt_min_successes(num_bt, p_list[i], alpha))
        tmp_list = np.array(tmp_list)
        return tmp_list

    def print_var_type(self, event_index, log_atom):
        """Prints the data of the eventType"""
        if self.event_type_detector.options['silence'] or self.options['silenceAllWithoutConfidence'] or self.options[
                'silenceAllExceptIndicator']:
            return
        tmp_string = ''
        if self.length[event_index] > 0 and self.var_type[event_index][0] == []:
            tmp_string += 'Not enough Events of this type: \n'
        else:
            tmp_string += 'Event: %s\n' % self.event_type_detector.longest_path[event_index]
            for var_index in range(self.length[event_index]):
                # Skips the variable if checkVariable is False
                if not self.event_type_detector.check_variables[event_index][var_index]:
                    continue
                if self.possible_var_type[event_index][var_index]:
                    tmp_string += 'Path %s: [%s\n,%s]\n' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], self.var_type[event_index][var_index],
                        self.possible_var_type[event_index][var_index])
                elif self.var_type[event_index][var_index][0] == 'd':
                    tmp_string += "Path %s: ['d']\n" % (self.event_type_detector.variable_key_list[event_index][var_index])
                elif self.var_type[event_index][var_index][0] == 'unq':
                    tmp_string += "Path %s: ['unq']\n" % (self.event_type_detector.variable_key_list[event_index][var_index])
                else:
                    tmp_string += 'Path %s: %s\n' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], self.var_type[event_index][var_index])
        tmp_string += 'Appearance: %s' % self.event_type_detector.num_eventlines[event_index]

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, tmp_string, sorted_log_lines, event_data, log_atom, self)

    def print_initial_var_type(self, event_index, log_atom):
        """prints the initial variableTypes"""
        if self.event_type_detector.options['silence'] or self.options['silenceAllWithoutConfidence'] or self.options[
                'silenceAllExceptIndicator']:
            return
        tmp_string = 'Initial detection of varTypes in lines like %s:\n' % str(repr(self.event_type_detector.log_atom.raw_data))

        for var_index in range(self.length[event_index]):
            if self.var_type[event_index][var_index]:
                if self.var_type[event_index][var_index][0] == 'unq':
                    tmp_string += "Path %s: ['unq']\n" % (self.event_type_detector.variable_key_list[event_index][var_index])
                elif self.var_type[event_index][var_index][0] == 'd':
                    tmp_string += "Path %s: ['d']\n" % (self.event_type_detector.variable_key_list[event_index][var_index])
                elif self.var_type[event_index][var_index][0] != 'stat':
                    tmp_string += 'Path %s: %s\n' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], self.var_type[event_index][var_index])

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, tmp_string, sorted_log_lines, event_data, log_atom, self)

    def print_changed_var_type(self, event_index, vt_old, vt_new, var_index, log_atom, confidence=None):
        """prints the changed variableTypes"""
        if (self.print_statistics or self.show_indi_plot) and ((not (isinstance(self.options['numUpdatesTillVarRed'], bool)) and (
                self.event_type_detector.num_eventlines[event_index] - self.options['numMinAppearance']) / self.options['numUpdate'] >=
                self.options['numUpdatesTillVarRed'] - 1)):
            self.changed_var_types.append(self.event_type_detector.num_eventlines[event_index])

        if self.event_type_detector.options['silence'] or (self.options['silenceAllWithoutConfidence'] and confidence is None) or \
                self.options['silenceAllExceptIndicator']:
            return

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, 'VariableType of path %s changed from %s to %s after the %s-th analysed line' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], vt_old[0], vt_new[0],
                        self.event_type_detector.num_eventlines[event_index]), sorted_log_lines, event_data, log_atom, self)
        
        '''if confidence is None:
            for listener in self.anomaly_event_handlers:
                listener.receive_event(
                    'Analysis.%s' % self.__class__.__name__,
                    'VariableType of path %s changed from %s to %s after the %s-th analysed line' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], vt_old[0], vt_new[0],
                        self.event_type_detector.num_eventlines[event_index]), [self.event_type_detector.log_atom.raw_data],
                    [self.event_type_detector.log_atom, 'Event: %s' % self.event_type_detector.longest_path[event_index],
                        'Number of parsed log lines: %s' % self.event_type_detector.total_records], self)
        else:
            for listener in self.anomaly_event_handlers:
                listener.receive_event(
                    'Analysis.%s' % self.__class__.__name__,
                    'VariableType of path %s changed from %s to %s after the %s-th analysed line' % (
                        self.event_type_detector.variable_key_list[event_index][var_index], vt_old[0], vt_new[0],
                        self.event_type_detector.num_eventlines[event_index]), [self.event_type_detector.log_atom.raw_data],
                    [self.event_type_detector.log_atom, 'Event: %s' % self.event_type_detector.longest_path[event_index],
                        'Number of parsed log lines: %s' % self.event_type_detector.total_records, confidence], self)'''

    def print_reject_var_type(self, event_index, vt, var_index, log_atom):
        """prints the changed variableTypes"""
        if self.event_type_detector.options['silence'] or self.options['silenceAllWithoutConfidence'] or self.options[
                'silenceAllExceptIndicator']:
            return

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, 'VariableType of path %s would reject the type %s after the %s-th analysed line' % (
                    self.event_type_detector.variable_key_list[event_index][var_index], vt[0],
                    self.event_type_detector.num_eventlines[event_index]), sorted_log_lines, event_data, log_atom, self)

    def print_warning(self, event_index, message, log_atom):
        """prints a warning"""
        if self.event_type_detector.options['silence'] or self.options['silenceAllWithoutConfidence'] or self.options[
                'silenceAllExceptIndicator'] or not log_atom:
            return

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event(
                'Analysis.%s' % self.__class__.__name__, 
                'Warning: %s after the %s-th analysed line' % (message, self.event_type_detector.num_eventlines[event_index]), 
                sorted_log_lines, event_data, log_atom, self)

    def print(self, event_index, message, log_atom, confidence=None, indicator=None):
        """Prints the message"""
        if self.event_type_detector.options['silence'] or (self.options['silenceAllWithoutConfidence'] and confidence is None) or (
                self.options['silenceAllExceptIndicator'] and indicator is None):
            return

        sorted_log_lines = [self.event_type_detector.longest_path[event_index] + os.linesep + log_atom.raw_data.decode()]
        analysis_component = {'AffectedLogAtomPaths': [log_atom.parser_match.get_match_dictionary().keys()]}
        event_data = {'AnalysisComponent': analysis_component, 'TotalRecords': self.event_type_detector.total_records}
        for listener in self.anomaly_event_handlers:
            listener.receive_event('Analysis.%s' % self.__class__.__name__, message, sorted_log_lines, event_data, log_atom, self)

        '''if confidence is None:
            for listener in self.anomaly_event_handlers:
                listener.receive_event('Analysis.%s' % self.__class__.__name__, message, [log_atom.raw_data], [
                    log_atom, 'Event: %s' % self.event_type_detector.longest_path[event_index],
                    'Number of parsed log lines: %d' % self.event_type_detector.total_records], log_atom, self)
        else:
            for listener in self.anomaly_event_handlers:
                listener.receive_event('Analysis.%s' % self.__class__.__name__, message, [log_atom.raw_data], [
                    log_atom, 'Event: %s' % self.event_type_detector.longest_path[event_index],
                    'Number of parsed log lines: %d' % self.event_type_detector.total_records, confidence], log_atom, self)'''


def convert_to_floats(list_in):
    """Gives back false if one entry of the list is no float and returns the list of floats otherwise"""
    num_list = []
    for item in list_in:
        try:
            num_list.append(float(item))
        except:
            return False
    return num_list


def consists_of_floats(list_in):
    """Gives back false if one entry of the list is no float or integer. True otherwise"""
    return all(isinstance(x, (float, int)) for x in list_in)


def consists_of_ints(list_in):
    """Gives back True if all entries are integers an False otherwise"""
    for item in list_in:
        if item != int(item):
            return False
    return True
